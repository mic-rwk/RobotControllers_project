
RC_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004120  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  080042a8  080042a8  000052a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800477c  0800477c  00006014  2**0
                  CONTENTS
  4 .ARM          00000008  0800477c  0800477c  0000577c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004784  08004784  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004784  08004784  00005784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004788  08004788  00005788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  0800478c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e74  20000014  080047a0  00006014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e88  080047a0  00006e88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e255  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002441  00000000  00000000  00014299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  000166e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00026ae9  00000000  00000000  00017388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00010d76  00000000  00000000  0003de71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000ea20b  00000000  00000000  0004ebe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00138df2  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 0000099c  00000000  00000000  00138e35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003210  00000000  00000000  001397d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0013c9e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004290 	.word	0x08004290

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08004290 	.word	0x08004290

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <Paint_NewImage>:
 image   :   Pointer to the image cache
 width   :   The width of the picture
 Height  :   The height of the picture
 Color   :   Whether the picture is inverted
 ******************************************************************************/
void Paint_NewImage(uint8_t *image, uint16_t Width, uint16_t Height, uint16_t Rotate, uint16_t Color) {
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0
 80004be:	60f8      	str	r0, [r7, #12]
 80004c0:	4608      	mov	r0, r1
 80004c2:	4611      	mov	r1, r2
 80004c4:	461a      	mov	r2, r3
 80004c6:	4603      	mov	r3, r0
 80004c8:	817b      	strh	r3, [r7, #10]
 80004ca:	460b      	mov	r3, r1
 80004cc:	813b      	strh	r3, [r7, #8]
 80004ce:	4613      	mov	r3, r2
 80004d0:	80fb      	strh	r3, [r7, #6]
	Paint.Image = NULL;
 80004d2:	4b24      	ldr	r3, [pc, #144]	@ (8000564 <Paint_NewImage+0xac>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
	Paint.Image = image;
 80004d8:	4a22      	ldr	r2, [pc, #136]	@ (8000564 <Paint_NewImage+0xac>)
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	6013      	str	r3, [r2, #0]

	Paint.WidthMemory = Width;
 80004de:	4a21      	ldr	r2, [pc, #132]	@ (8000564 <Paint_NewImage+0xac>)
 80004e0:	897b      	ldrh	r3, [r7, #10]
 80004e2:	8113      	strh	r3, [r2, #8]
	Paint.HeightMemory = Height;
 80004e4:	4a1f      	ldr	r2, [pc, #124]	@ (8000564 <Paint_NewImage+0xac>)
 80004e6:	893b      	ldrh	r3, [r7, #8]
 80004e8:	8153      	strh	r3, [r2, #10]
	Paint.Color = Color;
 80004ea:	4a1e      	ldr	r2, [pc, #120]	@ (8000564 <Paint_NewImage+0xac>)
 80004ec:	8b3b      	ldrh	r3, [r7, #24]
 80004ee:	8193      	strh	r3, [r2, #12]
	Paint.WidthByte = (Paint.WidthMemory % 8 == 0) ? (Paint.WidthMemory / 8) : (Paint.WidthMemory / 8 + 1);
 80004f0:	4b1c      	ldr	r3, [pc, #112]	@ (8000564 <Paint_NewImage+0xac>)
 80004f2:	891b      	ldrh	r3, [r3, #8]
 80004f4:	f003 0307 	and.w	r3, r3, #7
 80004f8:	b29b      	uxth	r3, r3
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d104      	bne.n	8000508 <Paint_NewImage+0x50>
 80004fe:	4b19      	ldr	r3, [pc, #100]	@ (8000564 <Paint_NewImage+0xac>)
 8000500:	891b      	ldrh	r3, [r3, #8]
 8000502:	08db      	lsrs	r3, r3, #3
 8000504:	b29b      	uxth	r3, r3
 8000506:	e005      	b.n	8000514 <Paint_NewImage+0x5c>
 8000508:	4b16      	ldr	r3, [pc, #88]	@ (8000564 <Paint_NewImage+0xac>)
 800050a:	891b      	ldrh	r3, [r3, #8]
 800050c:	08db      	lsrs	r3, r3, #3
 800050e:	b29b      	uxth	r3, r3
 8000510:	3301      	adds	r3, #1
 8000512:	b29b      	uxth	r3, r3
 8000514:	4a13      	ldr	r2, [pc, #76]	@ (8000564 <Paint_NewImage+0xac>)
 8000516:	8253      	strh	r3, [r2, #18]
	Paint.HeightByte = Height;
 8000518:	4a12      	ldr	r2, [pc, #72]	@ (8000564 <Paint_NewImage+0xac>)
 800051a:	893b      	ldrh	r3, [r7, #8]
 800051c:	8293      	strh	r3, [r2, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);

	Paint.Rotate = Rotate;
 800051e:	4a11      	ldr	r2, [pc, #68]	@ (8000564 <Paint_NewImage+0xac>)
 8000520:	88fb      	ldrh	r3, [r7, #6]
 8000522:	81d3      	strh	r3, [r2, #14]
	Paint.Mirror = MIRROR_NONE;
 8000524:	4b0f      	ldr	r3, [pc, #60]	@ (8000564 <Paint_NewImage+0xac>)
 8000526:	2200      	movs	r2, #0
 8000528:	821a      	strh	r2, [r3, #16]
	Paint.Scale = 2;
 800052a:	4b0e      	ldr	r3, [pc, #56]	@ (8000564 <Paint_NewImage+0xac>)
 800052c:	2202      	movs	r2, #2
 800052e:	82da      	strh	r2, [r3, #22]
	if (Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8000530:	88fb      	ldrh	r3, [r7, #6]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d002      	beq.n	800053c <Paint_NewImage+0x84>
 8000536:	88fb      	ldrh	r3, [r7, #6]
 8000538:	2bb4      	cmp	r3, #180	@ 0xb4
 800053a:	d106      	bne.n	800054a <Paint_NewImage+0x92>
		Paint.Width = Width;
 800053c:	4a09      	ldr	r2, [pc, #36]	@ (8000564 <Paint_NewImage+0xac>)
 800053e:	897b      	ldrh	r3, [r7, #10]
 8000540:	8093      	strh	r3, [r2, #4]
		Paint.Height = Height;
 8000542:	4a08      	ldr	r2, [pc, #32]	@ (8000564 <Paint_NewImage+0xac>)
 8000544:	893b      	ldrh	r3, [r7, #8]
 8000546:	80d3      	strh	r3, [r2, #6]
 8000548:	e006      	b.n	8000558 <Paint_NewImage+0xa0>
	} else {
		Paint.Width = Height;
 800054a:	4a06      	ldr	r2, [pc, #24]	@ (8000564 <Paint_NewImage+0xac>)
 800054c:	893b      	ldrh	r3, [r7, #8]
 800054e:	8093      	strh	r3, [r2, #4]
		Paint.Height = Width;
 8000550:	4a04      	ldr	r2, [pc, #16]	@ (8000564 <Paint_NewImage+0xac>)
 8000552:	897b      	ldrh	r3, [r7, #10]
 8000554:	80d3      	strh	r3, [r2, #6]
	}
}
 8000556:	bf00      	nop
 8000558:	bf00      	nop
 800055a:	3714      	adds	r7, #20
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	20000030 	.word	0x20000030

08000568 <Paint_SelectImage>:
/******************************************************************************
 function: Select Image
 parameter:
 image : Pointer to the image cache
 ******************************************************************************/
void Paint_SelectImage(uint8_t *image) {
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	Paint.Image = image;
 8000570:	4a04      	ldr	r2, [pc, #16]	@ (8000584 <Paint_SelectImage+0x1c>)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	6013      	str	r3, [r2, #0]
}
 8000576:	bf00      	nop
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	20000030 	.word	0x20000030

08000588 <Paint_SetPixel>:
 parameter:
 Xpoint : At point X
 Ypoint : At point Y
 Color  : Painted colors
 ******************************************************************************/
void Paint_SetPixel(uint16_t Xpoint, uint16_t Ypoint, uint16_t Color) {
 8000588:	b480      	push	{r7}
 800058a:	b08b      	sub	sp, #44	@ 0x2c
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	80fb      	strh	r3, [r7, #6]
 8000592:	460b      	mov	r3, r1
 8000594:	80bb      	strh	r3, [r7, #4]
 8000596:	4613      	mov	r3, r2
 8000598:	807b      	strh	r3, [r7, #2]
	if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 800059a:	4b88      	ldr	r3, [pc, #544]	@ (80007bc <Paint_SetPixel+0x234>)
 800059c:	889b      	ldrh	r3, [r3, #4]
 800059e:	88fa      	ldrh	r2, [r7, #6]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	f200 8145 	bhi.w	8000830 <Paint_SetPixel+0x2a8>
 80005a6:	4b85      	ldr	r3, [pc, #532]	@ (80007bc <Paint_SetPixel+0x234>)
 80005a8:	88db      	ldrh	r3, [r3, #6]
 80005aa:	88ba      	ldrh	r2, [r7, #4]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	f200 813f 	bhi.w	8000830 <Paint_SetPixel+0x2a8>
		//DEBUG("Exceeding display boundaries\r\n");
		return;
	}
	uint16_t X, Y;

	switch (Paint.Rotate) {
 80005b2:	4b82      	ldr	r3, [pc, #520]	@ (80007bc <Paint_SetPixel+0x234>)
 80005b4:	89db      	ldrh	r3, [r3, #14]
 80005b6:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80005ba:	d02b      	beq.n	8000614 <Paint_SetPixel+0x8c>
 80005bc:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80005c0:	f300 8138 	bgt.w	8000834 <Paint_SetPixel+0x2ac>
 80005c4:	2bb4      	cmp	r3, #180	@ 0xb4
 80005c6:	d016      	beq.n	80005f6 <Paint_SetPixel+0x6e>
 80005c8:	2bb4      	cmp	r3, #180	@ 0xb4
 80005ca:	f300 8133 	bgt.w	8000834 <Paint_SetPixel+0x2ac>
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d002      	beq.n	80005d8 <Paint_SetPixel+0x50>
 80005d2:	2b5a      	cmp	r3, #90	@ 0x5a
 80005d4:	d005      	beq.n	80005e2 <Paint_SetPixel+0x5a>
	case 270:
		X = Ypoint;
		Y = Paint.HeightMemory - Xpoint - 1;
		break;
	default:
		return;
 80005d6:	e12d      	b.n	8000834 <Paint_SetPixel+0x2ac>
		X = Xpoint;
 80005d8:	88fb      	ldrh	r3, [r7, #6]
 80005da:	84fb      	strh	r3, [r7, #38]	@ 0x26
		Y = Ypoint;
 80005dc:	88bb      	ldrh	r3, [r7, #4]
 80005de:	84bb      	strh	r3, [r7, #36]	@ 0x24
		break;
 80005e0:	e022      	b.n	8000628 <Paint_SetPixel+0xa0>
		X = Paint.WidthMemory - Ypoint - 1;
 80005e2:	4b76      	ldr	r3, [pc, #472]	@ (80007bc <Paint_SetPixel+0x234>)
 80005e4:	891a      	ldrh	r2, [r3, #8]
 80005e6:	88bb      	ldrh	r3, [r7, #4]
 80005e8:	1ad3      	subs	r3, r2, r3
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	3b01      	subs	r3, #1
 80005ee:	84fb      	strh	r3, [r7, #38]	@ 0x26
		Y = Xpoint;
 80005f0:	88fb      	ldrh	r3, [r7, #6]
 80005f2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		break;
 80005f4:	e018      	b.n	8000628 <Paint_SetPixel+0xa0>
		X = Paint.WidthMemory - Xpoint - 1;
 80005f6:	4b71      	ldr	r3, [pc, #452]	@ (80007bc <Paint_SetPixel+0x234>)
 80005f8:	891a      	ldrh	r2, [r3, #8]
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	1ad3      	subs	r3, r2, r3
 80005fe:	b29b      	uxth	r3, r3
 8000600:	3b01      	subs	r3, #1
 8000602:	84fb      	strh	r3, [r7, #38]	@ 0x26
		Y = Paint.HeightMemory - Ypoint - 1;
 8000604:	4b6d      	ldr	r3, [pc, #436]	@ (80007bc <Paint_SetPixel+0x234>)
 8000606:	895a      	ldrh	r2, [r3, #10]
 8000608:	88bb      	ldrh	r3, [r7, #4]
 800060a:	1ad3      	subs	r3, r2, r3
 800060c:	b29b      	uxth	r3, r3
 800060e:	3b01      	subs	r3, #1
 8000610:	84bb      	strh	r3, [r7, #36]	@ 0x24
		break;
 8000612:	e009      	b.n	8000628 <Paint_SetPixel+0xa0>
		X = Ypoint;
 8000614:	88bb      	ldrh	r3, [r7, #4]
 8000616:	84fb      	strh	r3, [r7, #38]	@ 0x26
		Y = Paint.HeightMemory - Xpoint - 1;
 8000618:	4b68      	ldr	r3, [pc, #416]	@ (80007bc <Paint_SetPixel+0x234>)
 800061a:	895a      	ldrh	r2, [r3, #10]
 800061c:	88fb      	ldrh	r3, [r7, #6]
 800061e:	1ad3      	subs	r3, r2, r3
 8000620:	b29b      	uxth	r3, r3
 8000622:	3b01      	subs	r3, #1
 8000624:	84bb      	strh	r3, [r7, #36]	@ 0x24
		break;
 8000626:	bf00      	nop
	}

	switch (Paint.Mirror) {
 8000628:	4b64      	ldr	r3, [pc, #400]	@ (80007bc <Paint_SetPixel+0x234>)
 800062a:	8a1b      	ldrh	r3, [r3, #16]
 800062c:	2b03      	cmp	r3, #3
 800062e:	f200 8103 	bhi.w	8000838 <Paint_SetPixel+0x2b0>
 8000632:	a201      	add	r2, pc, #4	@ (adr r2, 8000638 <Paint_SetPixel+0xb0>)
 8000634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000638:	08000687 	.word	0x08000687
 800063c:	08000649 	.word	0x08000649
 8000640:	08000659 	.word	0x08000659
 8000644:	08000669 	.word	0x08000669
	case MIRROR_NONE:
		break;
	case MIRROR_HORIZONTAL:
		X = Paint.WidthMemory - X - 1;
 8000648:	4b5c      	ldr	r3, [pc, #368]	@ (80007bc <Paint_SetPixel+0x234>)
 800064a:	891a      	ldrh	r2, [r3, #8]
 800064c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800064e:	1ad3      	subs	r3, r2, r3
 8000650:	b29b      	uxth	r3, r3
 8000652:	3b01      	subs	r3, #1
 8000654:	84fb      	strh	r3, [r7, #38]	@ 0x26
		break;
 8000656:	e017      	b.n	8000688 <Paint_SetPixel+0x100>
	case MIRROR_VERTICAL:
		Y = Paint.HeightMemory - Y - 1;
 8000658:	4b58      	ldr	r3, [pc, #352]	@ (80007bc <Paint_SetPixel+0x234>)
 800065a:	895a      	ldrh	r2, [r3, #10]
 800065c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800065e:	1ad3      	subs	r3, r2, r3
 8000660:	b29b      	uxth	r3, r3
 8000662:	3b01      	subs	r3, #1
 8000664:	84bb      	strh	r3, [r7, #36]	@ 0x24
		break;
 8000666:	e00f      	b.n	8000688 <Paint_SetPixel+0x100>
	case MIRROR_ORIGIN:
		X = Paint.WidthMemory - X - 1;
 8000668:	4b54      	ldr	r3, [pc, #336]	@ (80007bc <Paint_SetPixel+0x234>)
 800066a:	891a      	ldrh	r2, [r3, #8]
 800066c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800066e:	1ad3      	subs	r3, r2, r3
 8000670:	b29b      	uxth	r3, r3
 8000672:	3b01      	subs	r3, #1
 8000674:	84fb      	strh	r3, [r7, #38]	@ 0x26
		Y = Paint.HeightMemory - Y - 1;
 8000676:	4b51      	ldr	r3, [pc, #324]	@ (80007bc <Paint_SetPixel+0x234>)
 8000678:	895a      	ldrh	r2, [r3, #10]
 800067a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800067c:	1ad3      	subs	r3, r2, r3
 800067e:	b29b      	uxth	r3, r3
 8000680:	3b01      	subs	r3, #1
 8000682:	84bb      	strh	r3, [r7, #36]	@ 0x24
		break;
 8000684:	e000      	b.n	8000688 <Paint_SetPixel+0x100>
		break;
 8000686:	bf00      	nop
	default:
		return;
	}

	if (X > Paint.WidthMemory || Y > Paint.HeightMemory) {
 8000688:	4b4c      	ldr	r3, [pc, #304]	@ (80007bc <Paint_SetPixel+0x234>)
 800068a:	891b      	ldrh	r3, [r3, #8]
 800068c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800068e:	429a      	cmp	r2, r3
 8000690:	f200 80d4 	bhi.w	800083c <Paint_SetPixel+0x2b4>
 8000694:	4b49      	ldr	r3, [pc, #292]	@ (80007bc <Paint_SetPixel+0x234>)
 8000696:	895b      	ldrh	r3, [r3, #10]
 8000698:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800069a:	429a      	cmp	r2, r3
 800069c:	f200 80ce 	bhi.w	800083c <Paint_SetPixel+0x2b4>
		//DEBUG("Exceeding display boundaries\r\n");
		return;
	}
	if (Paint.Scale == 2) {
 80006a0:	4b46      	ldr	r3, [pc, #280]	@ (80007bc <Paint_SetPixel+0x234>)
 80006a2:	8adb      	ldrh	r3, [r3, #22]
 80006a4:	2b02      	cmp	r3, #2
 80006a6:	d139      	bne.n	800071c <Paint_SetPixel+0x194>
		uint32_t Addr = X / 8 + Y * Paint.WidthByte;
 80006a8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80006aa:	08db      	lsrs	r3, r3, #3
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	4619      	mov	r1, r3
 80006b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80006b2:	4a42      	ldr	r2, [pc, #264]	@ (80007bc <Paint_SetPixel+0x234>)
 80006b4:	8a52      	ldrh	r2, [r2, #18]
 80006b6:	fb02 f303 	mul.w	r3, r2, r3
 80006ba:	440b      	add	r3, r1
 80006bc:	613b      	str	r3, [r7, #16]
		uint8_t Rdata = Paint.Image[Addr];
 80006be:	4b3f      	ldr	r3, [pc, #252]	@ (80007bc <Paint_SetPixel+0x234>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	693b      	ldr	r3, [r7, #16]
 80006c4:	4413      	add	r3, r2
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	73fb      	strb	r3, [r7, #15]
		if (Color == BLACK)
 80006ca:	887b      	ldrh	r3, [r7, #2]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d113      	bne.n	80006f8 <Paint_SetPixel+0x170>
			Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 80006d0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80006d2:	f003 0307 	and.w	r3, r3, #7
 80006d6:	2280      	movs	r2, #128	@ 0x80
 80006d8:	fa42 f303 	asr.w	r3, r2, r3
 80006dc:	b25b      	sxtb	r3, r3
 80006de:	43db      	mvns	r3, r3
 80006e0:	b25a      	sxtb	r2, r3
 80006e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006e6:	4013      	ands	r3, r2
 80006e8:	b259      	sxtb	r1, r3
 80006ea:	4b34      	ldr	r3, [pc, #208]	@ (80007bc <Paint_SetPixel+0x234>)
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	693b      	ldr	r3, [r7, #16]
 80006f0:	4413      	add	r3, r2
 80006f2:	b2ca      	uxtb	r2, r1
 80006f4:	701a      	strb	r2, [r3, #0]
 80006f6:	e0a2      	b.n	800083e <Paint_SetPixel+0x2b6>
		else
			Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 80006f8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80006fa:	f003 0307 	and.w	r3, r3, #7
 80006fe:	2280      	movs	r2, #128	@ 0x80
 8000700:	fa42 f303 	asr.w	r3, r2, r3
 8000704:	b25a      	sxtb	r2, r3
 8000706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800070a:	4313      	orrs	r3, r2
 800070c:	b259      	sxtb	r1, r3
 800070e:	4b2b      	ldr	r3, [pc, #172]	@ (80007bc <Paint_SetPixel+0x234>)
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	693b      	ldr	r3, [r7, #16]
 8000714:	4413      	add	r3, r2
 8000716:	b2ca      	uxtb	r2, r1
 8000718:	701a      	strb	r2, [r3, #0]
 800071a:	e090      	b.n	800083e <Paint_SetPixel+0x2b6>
	} else if (Paint.Scale == 4) {
 800071c:	4b27      	ldr	r3, [pc, #156]	@ (80007bc <Paint_SetPixel+0x234>)
 800071e:	8adb      	ldrh	r3, [r3, #22]
 8000720:	2b04      	cmp	r3, #4
 8000722:	d14d      	bne.n	80007c0 <Paint_SetPixel+0x238>
		uint16_t Width = (Paint.WidthMemory % 4 == 0) ? (Paint.WidthMemory / 4) : (Paint.WidthMemory / 4 + 1);
 8000724:	4b25      	ldr	r3, [pc, #148]	@ (80007bc <Paint_SetPixel+0x234>)
 8000726:	891b      	ldrh	r3, [r3, #8]
 8000728:	f003 0303 	and.w	r3, r3, #3
 800072c:	b29b      	uxth	r3, r3
 800072e:	2b00      	cmp	r3, #0
 8000730:	d104      	bne.n	800073c <Paint_SetPixel+0x1b4>
 8000732:	4b22      	ldr	r3, [pc, #136]	@ (80007bc <Paint_SetPixel+0x234>)
 8000734:	891b      	ldrh	r3, [r3, #8]
 8000736:	089b      	lsrs	r3, r3, #2
 8000738:	b29b      	uxth	r3, r3
 800073a:	e005      	b.n	8000748 <Paint_SetPixel+0x1c0>
 800073c:	4b1f      	ldr	r3, [pc, #124]	@ (80007bc <Paint_SetPixel+0x234>)
 800073e:	891b      	ldrh	r3, [r3, #8]
 8000740:	089b      	lsrs	r3, r3, #2
 8000742:	b29b      	uxth	r3, r3
 8000744:	3301      	adds	r3, #1
 8000746:	b29b      	uxth	r3, r3
 8000748:	83bb      	strh	r3, [r7, #28]
		uint32_t Addr = X / 4 + Y * Width;
 800074a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800074c:	089b      	lsrs	r3, r3, #2
 800074e:	b29b      	uxth	r3, r3
 8000750:	4619      	mov	r1, r3
 8000752:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000754:	8bba      	ldrh	r2, [r7, #28]
 8000756:	fb02 f303 	mul.w	r3, r2, r3
 800075a:	440b      	add	r3, r1
 800075c:	61bb      	str	r3, [r7, #24]
		Color = Color % 4; //Guaranteed color scale is 4  --- 0~3
 800075e:	887b      	ldrh	r3, [r7, #2]
 8000760:	f003 0303 	and.w	r3, r3, #3
 8000764:	807b      	strh	r3, [r7, #2]
		uint8_t Rdata = Paint.Image[Addr];
 8000766:	4b15      	ldr	r3, [pc, #84]	@ (80007bc <Paint_SetPixel+0x234>)
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	69bb      	ldr	r3, [r7, #24]
 800076c:	4413      	add	r3, r2
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	75fb      	strb	r3, [r7, #23]

		Rdata = Rdata & (~(0xC0 >> ((X % 4) * 2)));
 8000772:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000774:	f003 0303 	and.w	r3, r3, #3
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	22c0      	movs	r2, #192	@ 0xc0
 800077c:	fa42 f303 	asr.w	r3, r2, r3
 8000780:	b25b      	sxtb	r3, r3
 8000782:	43db      	mvns	r3, r3
 8000784:	b25a      	sxtb	r2, r3
 8000786:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800078a:	4013      	ands	r3, r2
 800078c:	b25b      	sxtb	r3, r3
 800078e:	75fb      	strb	r3, [r7, #23]
		Paint.Image[Addr] = Rdata | (((Color << 6) & 0xC0) >> ((X % 4) * 2));
 8000790:	887b      	ldrh	r3, [r7, #2]
 8000792:	019b      	lsls	r3, r3, #6
 8000794:	b2da      	uxtb	r2, r3
 8000796:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000798:	f003 0303 	and.w	r3, r3, #3
 800079c:	005b      	lsls	r3, r3, #1
 800079e:	fa42 f303 	asr.w	r3, r2, r3
 80007a2:	b25a      	sxtb	r2, r3
 80007a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80007a8:	4313      	orrs	r3, r2
 80007aa:	b259      	sxtb	r1, r3
 80007ac:	4b03      	ldr	r3, [pc, #12]	@ (80007bc <Paint_SetPixel+0x234>)
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	69bb      	ldr	r3, [r7, #24]
 80007b2:	4413      	add	r3, r2
 80007b4:	b2ca      	uxtb	r2, r1
 80007b6:	701a      	strb	r2, [r3, #0]
 80007b8:	e041      	b.n	800083e <Paint_SetPixel+0x2b6>
 80007ba:	bf00      	nop
 80007bc:	20000030 	.word	0x20000030
	} else if (Paint.Scale == 7) {
 80007c0:	4b21      	ldr	r3, [pc, #132]	@ (8000848 <Paint_SetPixel+0x2c0>)
 80007c2:	8adb      	ldrh	r3, [r3, #22]
 80007c4:	2b07      	cmp	r3, #7
 80007c6:	d13a      	bne.n	800083e <Paint_SetPixel+0x2b6>
		uint32_t Addr = X / 2 + Y * Paint.WidthByte;
 80007c8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80007ca:	085b      	lsrs	r3, r3, #1
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	4619      	mov	r1, r3
 80007d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80007d2:	4a1d      	ldr	r2, [pc, #116]	@ (8000848 <Paint_SetPixel+0x2c0>)
 80007d4:	8a52      	ldrh	r2, [r2, #18]
 80007d6:	fb02 f303 	mul.w	r3, r2, r3
 80007da:	440b      	add	r3, r1
 80007dc:	623b      	str	r3, [r7, #32]
		uint8_t Rdata = Paint.Image[Addr];
 80007de:	4b1a      	ldr	r3, [pc, #104]	@ (8000848 <Paint_SetPixel+0x2c0>)
 80007e0:	681a      	ldr	r2, [r3, #0]
 80007e2:	6a3b      	ldr	r3, [r7, #32]
 80007e4:	4413      	add	r3, r2
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	77fb      	strb	r3, [r7, #31]
		Rdata = Rdata & (~(0xF0 >> ((X % 2) * 4))); //Clear first, then set value
 80007ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80007ec:	f003 0301 	and.w	r3, r3, #1
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	22f0      	movs	r2, #240	@ 0xf0
 80007f4:	fa42 f303 	asr.w	r3, r2, r3
 80007f8:	b25b      	sxtb	r3, r3
 80007fa:	43db      	mvns	r3, r3
 80007fc:	b25a      	sxtb	r2, r3
 80007fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000802:	4013      	ands	r3, r2
 8000804:	b25b      	sxtb	r3, r3
 8000806:	77fb      	strb	r3, [r7, #31]
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2) * 4));
 8000808:	887b      	ldrh	r3, [r7, #2]
 800080a:	011a      	lsls	r2, r3, #4
 800080c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	fa42 f303 	asr.w	r3, r2, r3
 8000818:	b25a      	sxtb	r2, r3
 800081a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800081e:	4313      	orrs	r3, r2
 8000820:	b259      	sxtb	r1, r3
 8000822:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <Paint_SetPixel+0x2c0>)
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	6a3b      	ldr	r3, [r7, #32]
 8000828:	4413      	add	r3, r2
 800082a:	b2ca      	uxtb	r2, r1
 800082c:	701a      	strb	r2, [r3, #0]
 800082e:	e006      	b.n	800083e <Paint_SetPixel+0x2b6>
		return;
 8000830:	bf00      	nop
 8000832:	e004      	b.n	800083e <Paint_SetPixel+0x2b6>
		return;
 8000834:	bf00      	nop
 8000836:	e002      	b.n	800083e <Paint_SetPixel+0x2b6>
		return;
 8000838:	bf00      	nop
 800083a:	e000      	b.n	800083e <Paint_SetPixel+0x2b6>
		return;
 800083c:	bf00      	nop
		//printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
	}
}
 800083e:	372c      	adds	r7, #44	@ 0x2c
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	20000030 	.word	0x20000030

0800084c <Paint_DrawChar>:
 Acsii_Char       ：To display the English characters
 Font             ：A structure pointer that displays a character size
 Color_Foreground : Select the foreground color
 Color_Background : Select the background color
 ******************************************************************************/
void Paint_DrawChar(uint16_t Xpoint, uint16_t Ypoint, const char Acsii_Char, sFONT *Font, uint16_t Color_Foreground, uint16_t Color_Background) {
 800084c:	b580      	push	{r7, lr}
 800084e:	b088      	sub	sp, #32
 8000850:	af00      	add	r7, sp, #0
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	4603      	mov	r3, r0
 8000856:	81fb      	strh	r3, [r7, #14]
 8000858:	460b      	mov	r3, r1
 800085a:	81bb      	strh	r3, [r7, #12]
 800085c:	4613      	mov	r3, r2
 800085e:	72fb      	strb	r3, [r7, #11]
	uint16_t Page, Column;

	if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8000860:	4b4c      	ldr	r3, [pc, #304]	@ (8000994 <Paint_DrawChar+0x148>)
 8000862:	889b      	ldrh	r3, [r3, #4]
 8000864:	89fa      	ldrh	r2, [r7, #14]
 8000866:	429a      	cmp	r2, r3
 8000868:	f200 808f 	bhi.w	800098a <Paint_DrawChar+0x13e>
 800086c:	4b49      	ldr	r3, [pc, #292]	@ (8000994 <Paint_DrawChar+0x148>)
 800086e:	88db      	ldrh	r3, [r3, #6]
 8000870:	89ba      	ldrh	r2, [r7, #12]
 8000872:	429a      	cmp	r2, r3
 8000874:	f200 8089 	bhi.w	800098a <Paint_DrawChar+0x13e>
		//DEBUG("Paint_DrawChar Input exceeds the normal display range\r\n");
		return;
	}

	uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8000878:	7afb      	ldrb	r3, [r7, #11]
 800087a:	3b20      	subs	r3, #32
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	88d2      	ldrh	r2, [r2, #6]
 8000880:	fb02 f303 	mul.w	r3, r2, r3
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	8892      	ldrh	r2, [r2, #4]
 8000888:	08d2      	lsrs	r2, r2, #3
 800088a:	b292      	uxth	r2, r2
 800088c:	4611      	mov	r1, r2
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	8892      	ldrh	r2, [r2, #4]
 8000892:	f002 0207 	and.w	r2, r2, #7
 8000896:	b292      	uxth	r2, r2
 8000898:	2a00      	cmp	r2, #0
 800089a:	bf14      	ite	ne
 800089c:	2201      	movne	r2, #1
 800089e:	2200      	moveq	r2, #0
 80008a0:	b2d2      	uxtb	r2, r2
 80008a2:	440a      	add	r2, r1
 80008a4:	fb02 f303 	mul.w	r3, r2, r3
 80008a8:	617b      	str	r3, [r7, #20]
	const unsigned char *ptr = &Font->table[Char_Offset];
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	4413      	add	r3, r2
 80008b2:	61bb      	str	r3, [r7, #24]

	for (Page = 0; Page < Font->Height; Page++) {
 80008b4:	2300      	movs	r3, #0
 80008b6:	83fb      	strh	r3, [r7, #30]
 80008b8:	e061      	b.n	800097e <Paint_DrawChar+0x132>
		for (Column = 0; Column < Font->Width; Column++) {
 80008ba:	2300      	movs	r3, #0
 80008bc:	83bb      	strh	r3, [r7, #28]
 80008be:	e04c      	b.n	800095a <Paint_DrawChar+0x10e>

			//To determine whether the font background color and screen background color is consistent
			if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 80008c0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80008c2:	2bff      	cmp	r3, #255	@ 0xff
 80008c4:	d118      	bne.n	80008f8 <Paint_DrawChar+0xac>
				if (*ptr & (0x80 >> (Column % 8)))
 80008c6:	69bb      	ldr	r3, [r7, #24]
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	4619      	mov	r1, r3
 80008cc:	8bbb      	ldrh	r3, [r7, #28]
 80008ce:	f003 0307 	and.w	r3, r3, #7
 80008d2:	2280      	movs	r2, #128	@ 0x80
 80008d4:	fa42 f303 	asr.w	r3, r2, r3
 80008d8:	400b      	ands	r3, r1
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d031      	beq.n	8000942 <Paint_DrawChar+0xf6>
					Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 80008de:	89fa      	ldrh	r2, [r7, #14]
 80008e0:	8bbb      	ldrh	r3, [r7, #28]
 80008e2:	4413      	add	r3, r2
 80008e4:	b298      	uxth	r0, r3
 80008e6:	89ba      	ldrh	r2, [r7, #12]
 80008e8:	8bfb      	ldrh	r3, [r7, #30]
 80008ea:	4413      	add	r3, r2
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80008f0:	4619      	mov	r1, r3
 80008f2:	f7ff fe49 	bl	8000588 <Paint_SetPixel>
 80008f6:	e024      	b.n	8000942 <Paint_DrawChar+0xf6>
				// Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
			} else {
				if (*ptr & (0x80 >> (Column % 8))) {
 80008f8:	69bb      	ldr	r3, [r7, #24]
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	4619      	mov	r1, r3
 80008fe:	8bbb      	ldrh	r3, [r7, #28]
 8000900:	f003 0307 	and.w	r3, r3, #7
 8000904:	2280      	movs	r2, #128	@ 0x80
 8000906:	fa42 f303 	asr.w	r3, r2, r3
 800090a:	400b      	ands	r3, r1
 800090c:	2b00      	cmp	r3, #0
 800090e:	d00c      	beq.n	800092a <Paint_DrawChar+0xde>
					Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8000910:	89fa      	ldrh	r2, [r7, #14]
 8000912:	8bbb      	ldrh	r3, [r7, #28]
 8000914:	4413      	add	r3, r2
 8000916:	b298      	uxth	r0, r3
 8000918:	89ba      	ldrh	r2, [r7, #12]
 800091a:	8bfb      	ldrh	r3, [r7, #30]
 800091c:	4413      	add	r3, r2
 800091e:	b29b      	uxth	r3, r3
 8000920:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000922:	4619      	mov	r1, r3
 8000924:	f7ff fe30 	bl	8000588 <Paint_SetPixel>
 8000928:	e00b      	b.n	8000942 <Paint_DrawChar+0xf6>
					// Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
				} else {
					Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 800092a:	89fa      	ldrh	r2, [r7, #14]
 800092c:	8bbb      	ldrh	r3, [r7, #28]
 800092e:	4413      	add	r3, r2
 8000930:	b298      	uxth	r0, r3
 8000932:	89ba      	ldrh	r2, [r7, #12]
 8000934:	8bfb      	ldrh	r3, [r7, #30]
 8000936:	4413      	add	r3, r2
 8000938:	b29b      	uxth	r3, r3
 800093a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800093c:	4619      	mov	r1, r3
 800093e:	f7ff fe23 	bl	8000588 <Paint_SetPixel>
					// Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
				}
			}
			//One pixel is 8 bits
			if (Column % 8 == 7)
 8000942:	8bbb      	ldrh	r3, [r7, #28]
 8000944:	f003 0307 	and.w	r3, r3, #7
 8000948:	b29b      	uxth	r3, r3
 800094a:	2b07      	cmp	r3, #7
 800094c:	d102      	bne.n	8000954 <Paint_DrawChar+0x108>
				ptr++;
 800094e:	69bb      	ldr	r3, [r7, #24]
 8000950:	3301      	adds	r3, #1
 8000952:	61bb      	str	r3, [r7, #24]
		for (Column = 0; Column < Font->Width; Column++) {
 8000954:	8bbb      	ldrh	r3, [r7, #28]
 8000956:	3301      	adds	r3, #1
 8000958:	83bb      	strh	r3, [r7, #28]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	889b      	ldrh	r3, [r3, #4]
 800095e:	8bba      	ldrh	r2, [r7, #28]
 8000960:	429a      	cmp	r2, r3
 8000962:	d3ad      	bcc.n	80008c0 <Paint_DrawChar+0x74>
		} // Write a line
		if (Font->Width % 8 != 0)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	889b      	ldrh	r3, [r3, #4]
 8000968:	f003 0307 	and.w	r3, r3, #7
 800096c:	b29b      	uxth	r3, r3
 800096e:	2b00      	cmp	r3, #0
 8000970:	d002      	beq.n	8000978 <Paint_DrawChar+0x12c>
			ptr++;
 8000972:	69bb      	ldr	r3, [r7, #24]
 8000974:	3301      	adds	r3, #1
 8000976:	61bb      	str	r3, [r7, #24]
	for (Page = 0; Page < Font->Height; Page++) {
 8000978:	8bfb      	ldrh	r3, [r7, #30]
 800097a:	3301      	adds	r3, #1
 800097c:	83fb      	strh	r3, [r7, #30]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	88db      	ldrh	r3, [r3, #6]
 8000982:	8bfa      	ldrh	r2, [r7, #30]
 8000984:	429a      	cmp	r2, r3
 8000986:	d398      	bcc.n	80008ba <Paint_DrawChar+0x6e>
 8000988:	e000      	b.n	800098c <Paint_DrawChar+0x140>
		return;
 800098a:	bf00      	nop
	} // Write all
}
 800098c:	3720      	adds	r7, #32
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000030 	.word	0x20000030

08000998 <Paint_DrawString_EN>:
 pString          ：The first address of the English string to be displayed
 Font             ：A structure pointer that displays a character size
 Color_Foreground : Select the foreground color
 Color_Background : Select the background color
 ******************************************************************************/
void Paint_DrawString_EN(uint16_t Xstart, uint16_t Ystart, const char *pString, sFONT *Font, uint16_t Color_Foreground, uint16_t Color_Background) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b088      	sub	sp, #32
 800099c:	af02      	add	r7, sp, #8
 800099e:	60ba      	str	r2, [r7, #8]
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	4603      	mov	r3, r0
 80009a4:	81fb      	strh	r3, [r7, #14]
 80009a6:	460b      	mov	r3, r1
 80009a8:	81bb      	strh	r3, [r7, #12]
	uint16_t Xpoint = Xstart;
 80009aa:	89fb      	ldrh	r3, [r7, #14]
 80009ac:	82fb      	strh	r3, [r7, #22]
	uint16_t Ypoint = Ystart;
 80009ae:	89bb      	ldrh	r3, [r7, #12]
 80009b0:	82bb      	strh	r3, [r7, #20]

	if (Xstart > Paint.Width || Ystart > Paint.Height) {
 80009b2:	4b21      	ldr	r3, [pc, #132]	@ (8000a38 <Paint_DrawString_EN+0xa0>)
 80009b4:	889b      	ldrh	r3, [r3, #4]
 80009b6:	89fa      	ldrh	r2, [r7, #14]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d838      	bhi.n	8000a2e <Paint_DrawString_EN+0x96>
 80009bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000a38 <Paint_DrawString_EN+0xa0>)
 80009be:	88db      	ldrh	r3, [r3, #6]
 80009c0:	89ba      	ldrh	r2, [r7, #12]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d833      	bhi.n	8000a2e <Paint_DrawString_EN+0x96>
		//DEBUG("Paint_DrawString_EN Input exceeds the normal display range\r\n");
		return;
	}

	while (*pString != '\0') {
 80009c6:	e02d      	b.n	8000a24 <Paint_DrawString_EN+0x8c>
		//if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
		if ((Xpoint + Font->Width) > Paint.Width) {
 80009c8:	8afb      	ldrh	r3, [r7, #22]
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	8892      	ldrh	r2, [r2, #4]
 80009ce:	4413      	add	r3, r2
 80009d0:	4a19      	ldr	r2, [pc, #100]	@ (8000a38 <Paint_DrawString_EN+0xa0>)
 80009d2:	8892      	ldrh	r2, [r2, #4]
 80009d4:	4293      	cmp	r3, r2
 80009d6:	dd06      	ble.n	80009e6 <Paint_DrawString_EN+0x4e>
			Xpoint = Xstart;
 80009d8:	89fb      	ldrh	r3, [r7, #14]
 80009da:	82fb      	strh	r3, [r7, #22]
			Ypoint += Font->Height;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	88da      	ldrh	r2, [r3, #6]
 80009e0:	8abb      	ldrh	r3, [r7, #20]
 80009e2:	4413      	add	r3, r2
 80009e4:	82bb      	strh	r3, [r7, #20]
		}

		// If the Y direction is full, reposition to(Xstart, Ystart)
		if ((Ypoint + Font->Height) > Paint.Height) {
 80009e6:	8abb      	ldrh	r3, [r7, #20]
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	88d2      	ldrh	r2, [r2, #6]
 80009ec:	4413      	add	r3, r2
 80009ee:	4a12      	ldr	r2, [pc, #72]	@ (8000a38 <Paint_DrawString_EN+0xa0>)
 80009f0:	88d2      	ldrh	r2, [r2, #6]
 80009f2:	4293      	cmp	r3, r2
 80009f4:	dd03      	ble.n	80009fe <Paint_DrawString_EN+0x66>
			Xpoint = Xstart;
 80009f6:	89fb      	ldrh	r3, [r7, #14]
 80009f8:	82fb      	strh	r3, [r7, #22]
			Ypoint = Ystart;
 80009fa:	89bb      	ldrh	r3, [r7, #12]
 80009fc:	82bb      	strh	r3, [r7, #20]
		}
		Paint_DrawChar(Xpoint, Ypoint, *pString, Font, Color_Foreground, Color_Background);
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	781a      	ldrb	r2, [r3, #0]
 8000a02:	8ab9      	ldrh	r1, [r7, #20]
 8000a04:	8af8      	ldrh	r0, [r7, #22]
 8000a06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000a08:	9301      	str	r3, [sp, #4]
 8000a0a:	8c3b      	ldrh	r3, [r7, #32]
 8000a0c:	9300      	str	r3, [sp, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	f7ff ff1c 	bl	800084c <Paint_DrawChar>

		//The next character of the address
		pString++;
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	3301      	adds	r3, #1
 8000a18:	60bb      	str	r3, [r7, #8]

		//The next word of the abscissa increases the font of the broadband
		Xpoint += Font->Width;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	889a      	ldrh	r2, [r3, #4]
 8000a1e:	8afb      	ldrh	r3, [r7, #22]
 8000a20:	4413      	add	r3, r2
 8000a22:	82fb      	strh	r3, [r7, #22]
	while (*pString != '\0') {
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d1cd      	bne.n	80009c8 <Paint_DrawString_EN+0x30>
 8000a2c:	e000      	b.n	8000a30 <Paint_DrawString_EN+0x98>
		return;
 8000a2e:	bf00      	nop
	}
}
 8000a30:	3718      	adds	r7, #24
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000030 	.word	0x20000030

08000a3c <RESET_HIG>:
#ifndef SRC_SSD1680_C_
#define SRC_SSD1680_C_

#include "main.h"

static void RESET_HIG() {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_SET);
 8000a40:	2201      	movs	r2, #1
 8000a42:	2108      	movs	r1, #8
 8000a44:	4802      	ldr	r0, [pc, #8]	@ (8000a50 <RESET_HIG+0x14>)
 8000a46:	f001 f81f 	bl	8001a88 <HAL_GPIO_WritePin>
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	48000400 	.word	0x48000400

08000a54 <RESET_LOW>:

static void RESET_LOW() {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2108      	movs	r1, #8
 8000a5c:	4802      	ldr	r0, [pc, #8]	@ (8000a68 <RESET_LOW+0x14>)
 8000a5e:	f001 f813 	bl	8001a88 <HAL_GPIO_WritePin>
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	48000400 	.word	0x48000400

08000a6c <CS_HIG>:

static void CS_HIG() {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_SET);
 8000a70:	2201      	movs	r2, #1
 8000a72:	2110      	movs	r1, #16
 8000a74:	4802      	ldr	r0, [pc, #8]	@ (8000a80 <CS_HIG+0x14>)
 8000a76:	f001 f807 	bl	8001a88 <HAL_GPIO_WritePin>
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	48000400 	.word	0x48000400

08000a84 <CS_LOW>:

static void CS_LOW() {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2110      	movs	r1, #16
 8000a8c:	4802      	ldr	r0, [pc, #8]	@ (8000a98 <CS_LOW+0x14>)
 8000a8e:	f000 fffb 	bl	8001a88 <HAL_GPIO_WritePin>
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	48000400 	.word	0x48000400

08000a9c <DC_HIG>:

static void DC_HIG() {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EPD_DC_GPIO_Port, EPD_DC_Pin, GPIO_PIN_SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	2120      	movs	r1, #32
 8000aa4:	4802      	ldr	r0, [pc, #8]	@ (8000ab0 <DC_HIG+0x14>)
 8000aa6:	f000 ffef 	bl	8001a88 <HAL_GPIO_WritePin>
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	48000400 	.word	0x48000400

08000ab4 <DC_LOW>:

static void DC_LOW() {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EPD_DC_GPIO_Port, EPD_DC_Pin, GPIO_PIN_RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2120      	movs	r1, #32
 8000abc:	4802      	ldr	r0, [pc, #8]	@ (8000ac8 <DC_LOW+0x14>)
 8000abe:	f000 ffe3 	bl	8001a88 <HAL_GPIO_WritePin>
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	48000400 	.word	0x48000400

08000acc <BUSY_READ>:

static uint8_t BUSY_READ() {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(EPD_BUSY_GPIO_Port, EPD_BUSY_Pin);
 8000ad0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ad4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ad8:	f000 ffbe 	bl	8001a58 <HAL_GPIO_ReadPin>
 8000adc:	4603      	mov	r3, r0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <Delay_ms>:

static void Delay_ms(uint16_t ms) {
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b082      	sub	sp, #8
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	4603      	mov	r3, r0
 8000aea:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(ms);
 8000aec:	88fb      	ldrh	r3, [r7, #6]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 fcfe 	bl	80014f0 <HAL_Delay>
}
 8000af4:	bf00      	nop
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <SPI_WriteByte>:

extern SPI_HandleTypeDef hspi1;
static void SPI_WriteByte(uint8_t value) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &value, 1, 1000);
 8000b06:	1df9      	adds	r1, r7, #7
 8000b08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	4803      	ldr	r0, [pc, #12]	@ (8000b1c <SPI_WriteByte+0x20>)
 8000b10:	f002 fb95 	bl	800323e <HAL_SPI_Transmit>
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20001d98 	.word	0x20001d98

08000b20 <EPD_Reset>:

///////////////////////////////////

static void EPD_Reset(void) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	RESET_HIG();
 8000b24:	f7ff ff8a 	bl	8000a3c <RESET_HIG>
	Delay_ms(20);
 8000b28:	2014      	movs	r0, #20
 8000b2a:	f7ff ffda 	bl	8000ae2 <Delay_ms>
	RESET_LOW();
 8000b2e:	f7ff ff91 	bl	8000a54 <RESET_LOW>
	Delay_ms(2);
 8000b32:	2002      	movs	r0, #2
 8000b34:	f7ff ffd5 	bl	8000ae2 <Delay_ms>
	RESET_HIG();
 8000b38:	f7ff ff80 	bl	8000a3c <RESET_HIG>
	Delay_ms(20);
 8000b3c:	2014      	movs	r0, #20
 8000b3e:	f7ff ffd0 	bl	8000ae2 <Delay_ms>
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <EPD_SendCommand>:

static void EPD_SendCommand(uint8_t Reg) {
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	71fb      	strb	r3, [r7, #7]
	DC_LOW();
 8000b50:	f7ff ffb0 	bl	8000ab4 <DC_LOW>
	CS_LOW();
 8000b54:	f7ff ff96 	bl	8000a84 <CS_LOW>
	SPI_WriteByte(Reg);
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff ffce 	bl	8000afc <SPI_WriteByte>
	CS_HIG();
 8000b60:	f7ff ff84 	bl	8000a6c <CS_HIG>
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <EPD_SendData>:

static void EPD_SendData(uint8_t Data) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
	DC_HIG();
 8000b76:	f7ff ff91 	bl	8000a9c <DC_HIG>
	CS_LOW();
 8000b7a:	f7ff ff83 	bl	8000a84 <CS_LOW>
	SPI_WriteByte(Data);
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff ffbb 	bl	8000afc <SPI_WriteByte>
	CS_HIG();
 8000b86:	f7ff ff71 	bl	8000a6c <CS_HIG>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <EPD_ReadBusy>:

static void EPD_ReadBusy(void) {
 8000b92:	b580      	push	{r7, lr}
 8000b94:	af00      	add	r7, sp, #0
	while (1) {	 //=1 BUSY
		if (BUSY_READ() == 0)
 8000b96:	f7ff ff99 	bl	8000acc <BUSY_READ>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d003      	beq.n	8000ba8 <EPD_ReadBusy+0x16>
			break;
		Delay_ms(10);
 8000ba0:	200a      	movs	r0, #10
 8000ba2:	f7ff ff9e 	bl	8000ae2 <Delay_ms>
		if (BUSY_READ() == 0)
 8000ba6:	e7f6      	b.n	8000b96 <EPD_ReadBusy+0x4>
			break;
 8000ba8:	bf00      	nop
	}
	Delay_ms(10);
 8000baa:	200a      	movs	r0, #10
 8000bac:	f7ff ff99 	bl	8000ae2 <Delay_ms>
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <EPD_SetWindows>:

/////////////////////////////////////

static void EPD_SetWindows(uint16_t Xstart, uint16_t Ystart, uint16_t Xend, uint16_t Yend) {
 8000bb4:	b590      	push	{r4, r7, lr}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4604      	mov	r4, r0
 8000bbc:	4608      	mov	r0, r1
 8000bbe:	4611      	mov	r1, r2
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4623      	mov	r3, r4
 8000bc4:	80fb      	strh	r3, [r7, #6]
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	80bb      	strh	r3, [r7, #4]
 8000bca:	460b      	mov	r3, r1
 8000bcc:	807b      	strh	r3, [r7, #2]
 8000bce:	4613      	mov	r3, r2
 8000bd0:	803b      	strh	r3, [r7, #0]
	EPD_SendCommand(0x44); // SET_RAM_X_ADDRESS_START_END_POSITION
 8000bd2:	2044      	movs	r0, #68	@ 0x44
 8000bd4:	f7ff ffb7 	bl	8000b46 <EPD_SendCommand>
	EPD_SendData((Xstart >> 3) & 0xFF);
 8000bd8:	88fb      	ldrh	r3, [r7, #6]
 8000bda:	08db      	lsrs	r3, r3, #3
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff ffc3 	bl	8000b6c <EPD_SendData>
	EPD_SendData((Xend >> 3) & 0xFF);
 8000be6:	887b      	ldrh	r3, [r7, #2]
 8000be8:	08db      	lsrs	r3, r3, #3
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff ffbc 	bl	8000b6c <EPD_SendData>

	EPD_SendCommand(0x45); // SET_RAM_Y_ADDRESS_START_END_POSITION
 8000bf4:	2045      	movs	r0, #69	@ 0x45
 8000bf6:	f7ff ffa6 	bl	8000b46 <EPD_SendCommand>
	EPD_SendData(Ystart & 0xFF);
 8000bfa:	88bb      	ldrh	r3, [r7, #4]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff ffb4 	bl	8000b6c <EPD_SendData>
	EPD_SendData((Ystart >> 8) & 0xFF);
 8000c04:	88bb      	ldrh	r3, [r7, #4]
 8000c06:	0a1b      	lsrs	r3, r3, #8
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff ffad 	bl	8000b6c <EPD_SendData>
	EPD_SendData(Yend & 0xFF);
 8000c12:	883b      	ldrh	r3, [r7, #0]
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff ffa8 	bl	8000b6c <EPD_SendData>
	EPD_SendData((Yend >> 8) & 0xFF);
 8000c1c:	883b      	ldrh	r3, [r7, #0]
 8000c1e:	0a1b      	lsrs	r3, r3, #8
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ffa1 	bl	8000b6c <EPD_SendData>
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd90      	pop	{r4, r7, pc}

08000c32 <EPD_SetCursor>:

static void EPD_SetCursor(uint8_t Xstart, uint16_t Ystart) {
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	4603      	mov	r3, r0
 8000c3a:	460a      	mov	r2, r1
 8000c3c:	71fb      	strb	r3, [r7, #7]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	80bb      	strh	r3, [r7, #4]
	EPD_SendCommand(0x4E); // SET_RAM_X_ADDRESS_COUNTER
 8000c42:	204e      	movs	r0, #78	@ 0x4e
 8000c44:	f7ff ff7f 	bl	8000b46 <EPD_SendCommand>
	EPD_SendData(Xstart & 0xFF);
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff ff8e 	bl	8000b6c <EPD_SendData>

	EPD_SendCommand(0x4F); // SET_RAM_Y_ADDRESS_COUNTER
 8000c50:	204f      	movs	r0, #79	@ 0x4f
 8000c52:	f7ff ff78 	bl	8000b46 <EPD_SendCommand>
	EPD_SendData(Ystart & 0xFF);
 8000c56:	88bb      	ldrh	r3, [r7, #4]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff ff86 	bl	8000b6c <EPD_SendData>
	EPD_SendData((Ystart >> 8) & 0xFF);
 8000c60:	88bb      	ldrh	r3, [r7, #4]
 8000c62:	0a1b      	lsrs	r3, r3, #8
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff ff7f 	bl	8000b6c <EPD_SendData>
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <EPD_TurnOnDisplay>:

static void EPD_TurnOnDisplay(void) {
 8000c76:	b580      	push	{r7, lr}
 8000c78:	af00      	add	r7, sp, #0
	EPD_SendCommand(0x18);
 8000c7a:	2018      	movs	r0, #24
 8000c7c:	f7ff ff63 	bl	8000b46 <EPD_SendCommand>
	EPD_SendData(0X80);
 8000c80:	2080      	movs	r0, #128	@ 0x80
 8000c82:	f7ff ff73 	bl	8000b6c <EPD_SendData>
	EPD_SendCommand(0x22);
 8000c86:	2022      	movs	r0, #34	@ 0x22
 8000c88:	f7ff ff5d 	bl	8000b46 <EPD_SendCommand>
	EPD_SendData(0XF7);
 8000c8c:	20f7      	movs	r0, #247	@ 0xf7
 8000c8e:	f7ff ff6d 	bl	8000b6c <EPD_SendData>
	EPD_SendCommand(0x20); // Activate Display Update Sequence
 8000c92:	2020      	movs	r0, #32
 8000c94:	f7ff ff57 	bl	8000b46 <EPD_SendCommand>
	EPD_ReadBusy();
 8000c98:	f7ff ff7b 	bl	8000b92 <EPD_ReadBusy>
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <EPD_Init>:

void EPD_Init(uint16_t Width, uint16_t Height) {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	460a      	mov	r2, r1
 8000caa:	80fb      	strh	r3, [r7, #6]
 8000cac:	4613      	mov	r3, r2
 8000cae:	80bb      	strh	r3, [r7, #4]
	EPD_Reset();
 8000cb0:	f7ff ff36 	bl	8000b20 <EPD_Reset>

	EPD_ReadBusy();
 8000cb4:	f7ff ff6d 	bl	8000b92 <EPD_ReadBusy>
	EPD_SendCommand(0x12);  //SWRESET
 8000cb8:	2012      	movs	r0, #18
 8000cba:	f7ff ff44 	bl	8000b46 <EPD_SendCommand>
	EPD_ReadBusy();
 8000cbe:	f7ff ff68 	bl	8000b92 <EPD_ReadBusy>

	EPD_SendCommand(0x01); //Driver output control
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	f7ff ff3f 	bl	8000b46 <EPD_SendCommand>
	EPD_SendData(Height - 1); //(EPD_WIDTH -1) & 0xff
 8000cc8:	88bb      	ldrh	r3, [r7, #4]
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	3b01      	subs	r3, #1
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff ff4b 	bl	8000b6c <EPD_SendData>
	EPD_SendData(((Height - 1) >> 8) & 0x01); //(EPD_WIDTH -1) & 0x100
 8000cd6:	88bb      	ldrh	r3, [r7, #4]
 8000cd8:	3b01      	subs	r3, #1
 8000cda:	121b      	asrs	r3, r3, #8
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff41 	bl	8000b6c <EPD_SendData>
	EPD_SendData(0x00); // 0x01 TB/ 0x02 SM/ 0x04 GD
 8000cea:	2000      	movs	r0, #0
 8000cec:	f7ff ff3e 	bl	8000b6c <EPD_SendData>
	 G295 ROW295 ROW294 ROW295 ROW147*/

	/* 0x04 GD: Selects the 1st output Gate
	 This bit is made to match the GATE layout connection on the panel. It defines the first scanning line. */

	EPD_SendCommand(0x11); //data entry mode
 8000cf0:	2011      	movs	r0, #17
 8000cf2:	f7ff ff28 	bl	8000b46 <EPD_SendCommand>
	EPD_SendData(0x03); //0x04 Am / 0x03 ID[1:0]
 8000cf6:	2003      	movs	r0, #3
 8000cf8:	f7ff ff38 	bl	8000b6c <EPD_SendData>
	 the RAM. When AM = “0”, the address counter is updated in the X direction. When AM = “1”, the
	 address counter is updated in the Y direction. When window addresses are selected, data are written
	 to the RAM area specified by the window addresses in the manner specified with ID[1:0] and AM
	 bits. */

	EPD_SetWindows(0, 0, Width - 1, Height - 1);
 8000cfc:	88fb      	ldrh	r3, [r7, #6]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	b29a      	uxth	r2, r3
 8000d02:	88bb      	ldrh	r3, [r7, #4]
 8000d04:	3b01      	subs	r3, #1
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	2100      	movs	r1, #0
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f7ff ff52 	bl	8000bb4 <EPD_SetWindows>
	EPD_SetCursor(0, 0);
 8000d10:	2100      	movs	r1, #0
 8000d12:	2000      	movs	r0, #0
 8000d14:	f7ff ff8d 	bl	8000c32 <EPD_SetCursor>

	EPD_SendCommand(0x3C); //BorderWavefrom
 8000d18:	203c      	movs	r0, #60	@ 0x3c
 8000d1a:	f7ff ff14 	bl	8000b46 <EPD_SendCommand>
	EPD_SendData(0x05);
 8000d1e:	2005      	movs	r0, #5
 8000d20:	f7ff ff24 	bl	8000b6c <EPD_SendData>

	EPD_SendCommand(0x21); //  Display update control
 8000d24:	2021      	movs	r0, #33	@ 0x21
 8000d26:	f7ff ff0e 	bl	8000b46 <EPD_SendCommand>
	EPD_SendData(0x00);
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	f7ff ff1e 	bl	8000b6c <EPD_SendData>
	EPD_SendData(0x80);
 8000d30:	2080      	movs	r0, #128	@ 0x80
 8000d32:	f7ff ff1b 	bl	8000b6c <EPD_SendData>

	EPD_ReadBusy();
 8000d36:	f7ff ff2c 	bl	8000b92 <EPD_ReadBusy>
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <EPD_Display>:
		}
	}
	EPD_TurnOnDisplay();
}

void EPD_Display(const uint8_t *blackImage, const uint8_t *redImage, uint16_t Width, uint16_t Height) {
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b086      	sub	sp, #24
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	60f8      	str	r0, [r7, #12]
 8000d4a:	60b9      	str	r1, [r7, #8]
 8000d4c:	4611      	mov	r1, r2
 8000d4e:	461a      	mov	r2, r3
 8000d50:	460b      	mov	r3, r1
 8000d52:	80fb      	strh	r3, [r7, #6]
 8000d54:	4613      	mov	r3, r2
 8000d56:	80bb      	strh	r3, [r7, #4]
	Width = (Width % 8 == 0) ? (Width / 8) : (Width / 8 + 1);
 8000d58:	88fb      	ldrh	r3, [r7, #6]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d103      	bne.n	8000d6c <EPD_Display+0x2a>
 8000d64:	88fb      	ldrh	r3, [r7, #6]
 8000d66:	08db      	lsrs	r3, r3, #3
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	e004      	b.n	8000d76 <EPD_Display+0x34>
 8000d6c:	88fb      	ldrh	r3, [r7, #6]
 8000d6e:	08db      	lsrs	r3, r3, #3
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	3301      	adds	r3, #1
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	80fb      	strh	r3, [r7, #6]

	if (blackImage != NULL) {
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d023      	beq.n	8000dc6 <EPD_Display+0x84>
		EPD_SendCommand(0x24);
 8000d7e:	2024      	movs	r0, #36	@ 0x24
 8000d80:	f7ff fee1 	bl	8000b46 <EPD_SendCommand>
		for (uint16_t j = 0; j < Height; j++) {
 8000d84:	2300      	movs	r3, #0
 8000d86:	82fb      	strh	r3, [r7, #22]
 8000d88:	e019      	b.n	8000dbe <EPD_Display+0x7c>
			for (uint16_t i = 0; i < Width; i++) {
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	82bb      	strh	r3, [r7, #20]
 8000d8e:	e00f      	b.n	8000db0 <EPD_Display+0x6e>
				EPD_SendData(blackImage[i + j * Width]);
 8000d90:	8aba      	ldrh	r2, [r7, #20]
 8000d92:	8afb      	ldrh	r3, [r7, #22]
 8000d94:	88f9      	ldrh	r1, [r7, #6]
 8000d96:	fb01 f303 	mul.w	r3, r1, r3
 8000d9a:	4413      	add	r3, r2
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	4413      	add	r3, r2
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fee1 	bl	8000b6c <EPD_SendData>
			for (uint16_t i = 0; i < Width; i++) {
 8000daa:	8abb      	ldrh	r3, [r7, #20]
 8000dac:	3301      	adds	r3, #1
 8000dae:	82bb      	strh	r3, [r7, #20]
 8000db0:	8aba      	ldrh	r2, [r7, #20]
 8000db2:	88fb      	ldrh	r3, [r7, #6]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d3eb      	bcc.n	8000d90 <EPD_Display+0x4e>
		for (uint16_t j = 0; j < Height; j++) {
 8000db8:	8afb      	ldrh	r3, [r7, #22]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	82fb      	strh	r3, [r7, #22]
 8000dbe:	8afa      	ldrh	r2, [r7, #22]
 8000dc0:	88bb      	ldrh	r3, [r7, #4]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d3e1      	bcc.n	8000d8a <EPD_Display+0x48>
			}
		}
	}
	if (redImage != NULL) {
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d023      	beq.n	8000e14 <EPD_Display+0xd2>
		EPD_SendCommand(0x26);
 8000dcc:	2026      	movs	r0, #38	@ 0x26
 8000dce:	f7ff feba 	bl	8000b46 <EPD_SendCommand>
		for (uint16_t j = 0; j < Height; j++) {
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	827b      	strh	r3, [r7, #18]
 8000dd6:	e019      	b.n	8000e0c <EPD_Display+0xca>
			for (uint16_t i = 0; i < Width; i++) {
 8000dd8:	2300      	movs	r3, #0
 8000dda:	823b      	strh	r3, [r7, #16]
 8000ddc:	e00f      	b.n	8000dfe <EPD_Display+0xbc>
				EPD_SendData(redImage[i + j * Width]);
 8000dde:	8a3a      	ldrh	r2, [r7, #16]
 8000de0:	8a7b      	ldrh	r3, [r7, #18]
 8000de2:	88f9      	ldrh	r1, [r7, #6]
 8000de4:	fb01 f303 	mul.w	r3, r1, r3
 8000de8:	4413      	add	r3, r2
 8000dea:	461a      	mov	r2, r3
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	4413      	add	r3, r2
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff feba 	bl	8000b6c <EPD_SendData>
			for (uint16_t i = 0; i < Width; i++) {
 8000df8:	8a3b      	ldrh	r3, [r7, #16]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	823b      	strh	r3, [r7, #16]
 8000dfe:	8a3a      	ldrh	r2, [r7, #16]
 8000e00:	88fb      	ldrh	r3, [r7, #6]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d3eb      	bcc.n	8000dde <EPD_Display+0x9c>
		for (uint16_t j = 0; j < Height; j++) {
 8000e06:	8a7b      	ldrh	r3, [r7, #18]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	827b      	strh	r3, [r7, #18]
 8000e0c:	8a7a      	ldrh	r2, [r7, #18]
 8000e0e:	88bb      	ldrh	r3, [r7, #4]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d3e1      	bcc.n	8000dd8 <EPD_Display+0x96>
			}
		}
	}
	EPD_TurnOnDisplay();
 8000e14:	f7ff ff2f 	bl	8000c76 <EPD_TurnOnDisplay>
}
 8000e18:	bf00      	nop
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <EPD_Sleep>:

void EPD_Sleep() {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
	EPD_SendCommand(0x10); //enter deep sleep
 8000e24:	2010      	movs	r0, #16
 8000e26:	f7ff fe8e 	bl	8000b46 <EPD_SendCommand>
	EPD_SendData(0x01);
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	f7ff fe9e 	bl	8000b6c <EPD_SendData>
	Delay_ms(100);
 8000e30:	2064      	movs	r0, #100	@ 0x64
 8000e32:	f7ff fe56 	bl	8000ae2 <Delay_ms>
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <demo_V33>:
    HAL_Delay(3000);

    EPD_Sleep(); // USYPIAMY WYŚWIETLACZ BO NIE MUSI WIĘCEJ PRACOWAĆ
}

void demo_V33(uint16_t temp, uint16_t co2){ // Wyświetla string1 i string2
 8000e3c:	b590      	push	{r4, r7, lr}
 8000e3e:	b091      	sub	sp, #68	@ 0x44
 8000e40:	af02      	add	r7, sp, #8
 8000e42:	4603      	mov	r3, r0
 8000e44:	460a      	mov	r2, r1
 8000e46:	80fb      	strh	r3, [r7, #6]
 8000e48:	4613      	mov	r3, r2
 8000e4a:	80bb      	strh	r3, [r7, #4]
    const char temp_title_text[] = "Temperatura: ";  // PIERWSZY TEKST
 8000e4c:	4b2f      	ldr	r3, [pc, #188]	@ (8000f0c <demo_V33+0xd0>)
 8000e4e:	f107 0414 	add.w	r4, r7, #20
 8000e52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e54:	c407      	stmia	r4!, {r0, r1, r2}
 8000e56:	8023      	strh	r3, [r4, #0]
    const char co2_title_text[] = "CO2: "; //DRUGI TEKST
 8000e58:	4a2d      	ldr	r2, [pc, #180]	@ (8000f10 <demo_V33+0xd4>)
 8000e5a:	f107 030c 	add.w	r3, r7, #12
 8000e5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e62:	6018      	str	r0, [r3, #0]
 8000e64:	3304      	adds	r3, #4
 8000e66:	8019      	strh	r1, [r3, #0]

    uint16_t x_temp_title_text = 0; // POLOŻENIE PUNKTU STARTOWEGO DLA PIERWSZEGO TEKSTU X
 8000e68:	2300      	movs	r3, #0
 8000e6a:	86fb      	strh	r3, [r7, #54]	@ 0x36
    uint16_t y_temp_title_text = 5; // -||- Y
 8000e6c:	2305      	movs	r3, #5
 8000e6e:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint16_t x_co2_title_text = 0;// POLOŻENIE PUNKTU STARTOWEGO DLA DRUGIEGO TEKSTU X
 8000e70:	2300      	movs	r3, #0
 8000e72:	867b      	strh	r3, [r7, #50]	@ 0x32
    uint16_t y_co2_title_text = 50;// -||- Y
 8000e74:	2332      	movs	r3, #50	@ 0x32
 8000e76:	863b      	strh	r3, [r7, #48]	@ 0x30

    uint16_t x_temp_value = 100;
 8000e78:	2364      	movs	r3, #100	@ 0x64
 8000e7a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    uint16_t y_temp_value = 5;
 8000e7c:	2305      	movs	r3, #5
 8000e7e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    uint16_t x_co2_value = 100;
 8000e80:	2364      	movs	r3, #100	@ 0x64
 8000e82:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint16_t y_co2_value = 50;
 8000e84:	2332      	movs	r3, #50	@ 0x32
 8000e86:	853b      	strh	r3, [r7, #40]	@ 0x28

    static uint8_t BlackImage[120/8 * 250]; // NIE DO KOŃCA WIEM CO XD
    static uint8_t RedImage[120/8 * 250];

    int width_bytes = 128 / 8;
 8000e88:	2310      	movs	r3, #16
 8000e8a:	627b      	str	r3, [r7, #36]	@ 0x24

    EPD_Init(120, 250);  // INICJALIZACJA WYŚWIETLACZA
 8000e8c:	21fa      	movs	r1, #250	@ 0xfa
 8000e8e:	2078      	movs	r0, #120	@ 0x78
 8000e90:	f7ff ff06 	bl	8000ca0 <EPD_Init>
    HAL_Delay(300); // OPÓŹNIENIE
 8000e94:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000e98:	f000 fb2a 	bl	80014f0 <HAL_Delay>

    // 1. Wyczyść oba bufory na biało (bit 1 = biały)
    memset(BlackImage, 0xFF, sizeof(BlackImage));
 8000e9c:	f640 62a6 	movw	r2, #3750	@ 0xea6
 8000ea0:	21ff      	movs	r1, #255	@ 0xff
 8000ea2:	481c      	ldr	r0, [pc, #112]	@ (8000f14 <demo_V33+0xd8>)
 8000ea4:	f003 f9c7 	bl	8004236 <memset>
    //memset(RedImage, 0x00, sizeof(RedImage)); // brak czerwieni
    // CZYŚCIMY BO NIE CHCEMY SYFILISA - PATRZ README.md

    // 4. Teraz wczytaj tekst do BlackImage i RedImage za pomocą Paint:
    Paint_NewImage(BlackImage, 120, 250, 0, WHITE); // TO CHYBA TEŻ DZIAŁA JAKO CZYSZCZENIE BUFORA
 8000ea8:	23ff      	movs	r3, #255	@ 0xff
 8000eaa:	9300      	str	r3, [sp, #0]
 8000eac:	2300      	movs	r3, #0
 8000eae:	22fa      	movs	r2, #250	@ 0xfa
 8000eb0:	2178      	movs	r1, #120	@ 0x78
 8000eb2:	4818      	ldr	r0, [pc, #96]	@ (8000f14 <demo_V33+0xd8>)
 8000eb4:	f7ff fb00 	bl	80004b8 <Paint_NewImage>
    Paint_SelectImage(BlackImage);
 8000eb8:	4816      	ldr	r0, [pc, #88]	@ (8000f14 <demo_V33+0xd8>)
 8000eba:	f7ff fb55 	bl	8000568 <Paint_SelectImage>
    Paint_DrawString_EN(x_temp_title_text, y_temp_title_text, temp_title_text, &Font12, BLACK, WHITE); // TUTAJ MÓWIMY ŻEBY WYDRUKOWAŁO NAM W PUNKCIE DLA PIERWSZEGO STRINGA WŁAŚNIE TEGO STRINGA W TAKIM FONCIE
 8000ebe:	f107 0214 	add.w	r2, r7, #20
 8000ec2:	8eb9      	ldrh	r1, [r7, #52]	@ 0x34
 8000ec4:	8ef8      	ldrh	r0, [r7, #54]	@ 0x36
 8000ec6:	23ff      	movs	r3, #255	@ 0xff
 8000ec8:	9301      	str	r3, [sp, #4]
 8000eca:	2300      	movs	r3, #0
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	4b12      	ldr	r3, [pc, #72]	@ (8000f18 <demo_V33+0xdc>)
 8000ed0:	f7ff fd62 	bl	8000998 <Paint_DrawString_EN>
    // NO I MÓWIMY TEŻ ŻE MA TO BYĆ WARTOŚĆ MIĘDZY BLACK A WHITE - OBRAZ MONOCHROMATYCZNY DLA BUFORA CZARNEGO
    //Paint_NewImage(RedImage, 120, 250, 0, WHITE);,,
    //Paint_SelectImage(RedImage);
   // Paint_DrawRectangle(x_promotion - 2, y_promotion - 2, x_promotion + 100, y_promotion + 50, RED, DOT_PIXEL_1X1, DRAW_FILL_FULL);
    Paint_DrawString_EN(x_co2_title_text, y_co2_title_text, co2_title_text, &Font12, BLACK, WHITE);
 8000ed4:	f107 020c 	add.w	r2, r7, #12
 8000ed8:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8000eda:	8e78      	ldrh	r0, [r7, #50]	@ 0x32
 8000edc:	23ff      	movs	r3, #255	@ 0xff
 8000ede:	9301      	str	r3, [sp, #4]
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f18 <demo_V33+0xdc>)
 8000ee6:	f7ff fd57 	bl	8000998 <Paint_DrawString_EN>

    // 5. Wyświetl
    EPD_Display(BlackImage, RedImage, 120, 250); // FUNKCJA WYŚWIETLAJĄCA
 8000eea:	23fa      	movs	r3, #250	@ 0xfa
 8000eec:	2278      	movs	r2, #120	@ 0x78
 8000eee:	490b      	ldr	r1, [pc, #44]	@ (8000f1c <demo_V33+0xe0>)
 8000ef0:	4808      	ldr	r0, [pc, #32]	@ (8000f14 <demo_V33+0xd8>)
 8000ef2:	f7ff ff26 	bl	8000d42 <EPD_Display>
    HAL_Delay(3000);
 8000ef6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000efa:	f000 faf9 	bl	80014f0 <HAL_Delay>

    EPD_Sleep(); // USYPIAMY WYŚWIETLACZ BO NIE MUSI WIĘCEJ PRACOWAĆ
 8000efe:	f7ff ff8f 	bl	8000e20 <EPD_Sleep>
}
 8000f02:	bf00      	nop
 8000f04:	373c      	adds	r7, #60	@ 0x3c
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd90      	pop	{r4, r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	080042a8 	.word	0x080042a8
 8000f10:	080042b8 	.word	0x080042b8
 8000f14:	20000048 	.word	0x20000048
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	20000ef0 	.word	0x20000ef0

08000f20 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b088      	sub	sp, #32
 8000f24:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f26:	f107 030c 	add.w	r3, r7, #12
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
 8000f34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	4b28      	ldr	r3, [pc, #160]	@ (8000fd8 <MX_GPIO_Init+0xb8>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f3a:	4a27      	ldr	r2, [pc, #156]	@ (8000fd8 <MX_GPIO_Init+0xb8>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f42:	4b25      	ldr	r3, [pc, #148]	@ (8000fd8 <MX_GPIO_Init+0xb8>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4e:	4b22      	ldr	r3, [pc, #136]	@ (8000fd8 <MX_GPIO_Init+0xb8>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f52:	4a21      	ldr	r2, [pc, #132]	@ (8000fd8 <MX_GPIO_Init+0xb8>)
 8000f54:	f043 0302 	orr.w	r3, r3, #2
 8000f58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd8 <MX_GPIO_Init+0xb8>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EPD_RST_Pin|EPD_DC_Pin, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2128      	movs	r1, #40	@ 0x28
 8000f6a:	481c      	ldr	r0, [pc, #112]	@ (8000fdc <MX_GPIO_Init+0xbc>)
 8000f6c:	f000 fd8c 	bl	8001a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	2110      	movs	r1, #16
 8000f74:	4819      	ldr	r0, [pc, #100]	@ (8000fdc <MX_GPIO_Init+0xbc>)
 8000f76:	f000 fd87 	bl	8001a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EPD_BUSY_Pin;
 8000f7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f80:	2300      	movs	r3, #0
 8000f82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EPD_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000f88:	f107 030c 	add.w	r3, r7, #12
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f92:	f000 fbb7 	bl	8001704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EPD_RST_Pin;
 8000f96:	2308      	movs	r3, #8
 8000f98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EPD_RST_GPIO_Port, &GPIO_InitStruct);
 8000fa6:	f107 030c 	add.w	r3, r7, #12
 8000faa:	4619      	mov	r1, r3
 8000fac:	480b      	ldr	r0, [pc, #44]	@ (8000fdc <MX_GPIO_Init+0xbc>)
 8000fae:	f000 fba9 	bl	8001704 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = EPD_CS_Pin|EPD_DC_Pin;
 8000fb2:	2330      	movs	r3, #48	@ 0x30
 8000fb4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc2:	f107 030c 	add.w	r3, r7, #12
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4804      	ldr	r0, [pc, #16]	@ (8000fdc <MX_GPIO_Init+0xbc>)
 8000fca:	f000 fb9b 	bl	8001704 <HAL_GPIO_Init>

}
 8000fce:	bf00      	nop
 8000fd0:	3720      	adds	r7, #32
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	48000400 	.word	0x48000400

08000fe0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe6:	f000 fa07 	bl	80013f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fea:	f000 f812 	bl	8001012 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fee:	f7ff ff97 	bl	8000f20 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ff2:	f000 f94b 	bl	800128c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000ff6:	f000 f863 	bl	80010c0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  uint16_t temp = 100;
 8000ffa:	2364      	movs	r3, #100	@ 0x64
 8000ffc:	80fb      	strh	r3, [r7, #6]
  uint16_t co2 = 200;
 8000ffe:	23c8      	movs	r3, #200	@ 0xc8
 8001000:	80bb      	strh	r3, [r7, #4]

  demo_V33(temp,co2);
 8001002:	88ba      	ldrh	r2, [r7, #4]
 8001004:	88fb      	ldrh	r3, [r7, #6]
 8001006:	4611      	mov	r1, r2
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ff17 	bl	8000e3c <demo_V33>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800100e:	bf00      	nop
 8001010:	e7fd      	b.n	800100e <main+0x2e>

08001012 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b096      	sub	sp, #88	@ 0x58
 8001016:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	2244      	movs	r2, #68	@ 0x44
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f003 f908 	bl	8004236 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001026:	463b      	mov	r3, r7
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001034:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001038:	f000 fd4c 	bl	8001ad4 <HAL_PWREx_ControlVoltageScaling>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001042:	f000 f837 	bl	80010b4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001046:	2302      	movs	r3, #2
 8001048:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800104a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800104e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001050:	2310      	movs	r3, #16
 8001052:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001054:	2302      	movs	r3, #2
 8001056:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001058:	2302      	movs	r3, #2
 800105a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800105c:	2301      	movs	r3, #1
 800105e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001060:	230a      	movs	r3, #10
 8001062:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001064:	2307      	movs	r3, #7
 8001066:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001068:	2302      	movs	r3, #2
 800106a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800106c:	2302      	movs	r3, #2
 800106e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	4618      	mov	r0, r3
 8001076:	f000 fd83 	bl	8001b80 <HAL_RCC_OscConfig>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001080:	f000 f818 	bl	80010b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001084:	230f      	movs	r3, #15
 8001086:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001088:	2303      	movs	r3, #3
 800108a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800108c:	2300      	movs	r3, #0
 800108e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001094:	2300      	movs	r3, #0
 8001096:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001098:	463b      	mov	r3, r7
 800109a:	2104      	movs	r1, #4
 800109c:	4618      	mov	r0, r3
 800109e:	f001 f94b 	bl	8002338 <HAL_RCC_ClockConfig>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010a8:	f000 f804 	bl	80010b4 <Error_Handler>
  }
}
 80010ac:	bf00      	nop
 80010ae:	3758      	adds	r7, #88	@ 0x58
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b8:	b672      	cpsid	i
}
 80010ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010bc:	bf00      	nop
 80010be:	e7fd      	b.n	80010bc <Error_Handler+0x8>

080010c0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80010c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001134 <MX_SPI1_Init+0x74>)
 80010c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001138 <MX_SPI1_Init+0x78>)
 80010c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001134 <MX_SPI1_Init+0x74>)
 80010cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010d2:	4b18      	ldr	r3, [pc, #96]	@ (8001134 <MX_SPI1_Init+0x74>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010d8:	4b16      	ldr	r3, [pc, #88]	@ (8001134 <MX_SPI1_Init+0x74>)
 80010da:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80010de:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010e0:	4b14      	ldr	r3, [pc, #80]	@ (8001134 <MX_SPI1_Init+0x74>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010e6:	4b13      	ldr	r3, [pc, #76]	@ (8001134 <MX_SPI1_Init+0x74>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010ec:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <MX_SPI1_Init+0x74>)
 80010ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010f2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80010f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001134 <MX_SPI1_Init+0x74>)
 80010f6:	2228      	movs	r2, #40	@ 0x28
 80010f8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001134 <MX_SPI1_Init+0x74>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001100:	4b0c      	ldr	r3, [pc, #48]	@ (8001134 <MX_SPI1_Init+0x74>)
 8001102:	2200      	movs	r2, #0
 8001104:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001106:	4b0b      	ldr	r3, [pc, #44]	@ (8001134 <MX_SPI1_Init+0x74>)
 8001108:	2200      	movs	r2, #0
 800110a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800110c:	4b09      	ldr	r3, [pc, #36]	@ (8001134 <MX_SPI1_Init+0x74>)
 800110e:	2207      	movs	r2, #7
 8001110:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001112:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <MX_SPI1_Init+0x74>)
 8001114:	2200      	movs	r2, #0
 8001116:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001118:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <MX_SPI1_Init+0x74>)
 800111a:	2208      	movs	r2, #8
 800111c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800111e:	4805      	ldr	r0, [pc, #20]	@ (8001134 <MX_SPI1_Init+0x74>)
 8001120:	f001 ffea 	bl	80030f8 <HAL_SPI_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800112a:	f7ff ffc3 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20001d98 	.word	0x20001d98
 8001138:	40013000 	.word	0x40013000

0800113c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	@ 0x28
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a17      	ldr	r2, [pc, #92]	@ (80011b8 <HAL_SPI_MspInit+0x7c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d128      	bne.n	80011b0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800115e:	4b17      	ldr	r3, [pc, #92]	@ (80011bc <HAL_SPI_MspInit+0x80>)
 8001160:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001162:	4a16      	ldr	r2, [pc, #88]	@ (80011bc <HAL_SPI_MspInit+0x80>)
 8001164:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001168:	6613      	str	r3, [r2, #96]	@ 0x60
 800116a:	4b14      	ldr	r3, [pc, #80]	@ (80011bc <HAL_SPI_MspInit+0x80>)
 800116c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800116e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	4b11      	ldr	r3, [pc, #68]	@ (80011bc <HAL_SPI_MspInit+0x80>)
 8001178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117a:	4a10      	ldr	r2, [pc, #64]	@ (80011bc <HAL_SPI_MspInit+0x80>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001182:	4b0e      	ldr	r3, [pc, #56]	@ (80011bc <HAL_SPI_MspInit+0x80>)
 8001184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800118e:	23a0      	movs	r3, #160	@ 0xa0
 8001190:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	2302      	movs	r3, #2
 8001194:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800119a:	2302      	movs	r3, #2
 800119c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800119e:	2305      	movs	r3, #5
 80011a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	4619      	mov	r1, r3
 80011a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ac:	f000 faaa 	bl	8001704 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80011b0:	bf00      	nop
 80011b2:	3728      	adds	r7, #40	@ 0x28
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40013000 	.word	0x40013000
 80011bc:	40021000 	.word	0x40021000

080011c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001204 <HAL_MspInit+0x44>)
 80011c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001204 <HAL_MspInit+0x44>)
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80011d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001204 <HAL_MspInit+0x44>)
 80011d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011de:	4b09      	ldr	r3, [pc, #36]	@ (8001204 <HAL_MspInit+0x44>)
 80011e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011e2:	4a08      	ldr	r2, [pc, #32]	@ (8001204 <HAL_MspInit+0x44>)
 80011e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80011ea:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <HAL_MspInit+0x44>)
 80011ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011f2:	603b      	str	r3, [r7, #0]
 80011f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	40021000 	.word	0x40021000

08001208 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800120c:	bf00      	nop
 800120e:	e7fd      	b.n	800120c <NMI_Handler+0x4>

08001210 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001214:	bf00      	nop
 8001216:	e7fd      	b.n	8001214 <HardFault_Handler+0x4>

08001218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <MemManage_Handler+0x4>

08001220 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001224:	bf00      	nop
 8001226:	e7fd      	b.n	8001224 <BusFault_Handler+0x4>

08001228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800122c:	bf00      	nop
 800122e:	e7fd      	b.n	800122c <UsageFault_Handler+0x4>

08001230 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800125e:	f000 f927 	bl	80014b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800126c:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <SystemInit+0x20>)
 800126e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001272:	4a05      	ldr	r2, [pc, #20]	@ (8001288 <SystemInit+0x20>)
 8001274:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001278:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001290:	4b14      	ldr	r3, [pc, #80]	@ (80012e4 <MX_USART2_UART_Init+0x58>)
 8001292:	4a15      	ldr	r2, [pc, #84]	@ (80012e8 <MX_USART2_UART_Init+0x5c>)
 8001294:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001296:	4b13      	ldr	r3, [pc, #76]	@ (80012e4 <MX_USART2_UART_Init+0x58>)
 8001298:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800129c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800129e:	4b11      	ldr	r3, [pc, #68]	@ (80012e4 <MX_USART2_UART_Init+0x58>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012a4:	4b0f      	ldr	r3, [pc, #60]	@ (80012e4 <MX_USART2_UART_Init+0x58>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012aa:	4b0e      	ldr	r3, [pc, #56]	@ (80012e4 <MX_USART2_UART_Init+0x58>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012b0:	4b0c      	ldr	r3, [pc, #48]	@ (80012e4 <MX_USART2_UART_Init+0x58>)
 80012b2:	220c      	movs	r2, #12
 80012b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012b6:	4b0b      	ldr	r3, [pc, #44]	@ (80012e4 <MX_USART2_UART_Init+0x58>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012bc:	4b09      	ldr	r3, [pc, #36]	@ (80012e4 <MX_USART2_UART_Init+0x58>)
 80012be:	2200      	movs	r2, #0
 80012c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012c2:	4b08      	ldr	r3, [pc, #32]	@ (80012e4 <MX_USART2_UART_Init+0x58>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012c8:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <MX_USART2_UART_Init+0x58>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012ce:	4805      	ldr	r0, [pc, #20]	@ (80012e4 <MX_USART2_UART_Init+0x58>)
 80012d0:	f002 fa90 	bl	80037f4 <HAL_UART_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012da:	f7ff feeb 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20001dfc 	.word	0x20001dfc
 80012e8:	40004400 	.word	0x40004400

080012ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b0ac      	sub	sp, #176	@ 0xb0
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	2288      	movs	r2, #136	@ 0x88
 800130a:	2100      	movs	r1, #0
 800130c:	4618      	mov	r0, r3
 800130e:	f002 ff92 	bl	8004236 <memset>
  if(uartHandle->Instance==USART2)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a21      	ldr	r2, [pc, #132]	@ (800139c <HAL_UART_MspInit+0xb0>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d13b      	bne.n	8001394 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800131c:	2302      	movs	r3, #2
 800131e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001320:	2300      	movs	r3, #0
 8001322:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	4618      	mov	r0, r3
 800132a:	f001 fa29 	bl	8002780 <HAL_RCCEx_PeriphCLKConfig>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001334:	f7ff febe 	bl	80010b4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001338:	4b19      	ldr	r3, [pc, #100]	@ (80013a0 <HAL_UART_MspInit+0xb4>)
 800133a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800133c:	4a18      	ldr	r2, [pc, #96]	@ (80013a0 <HAL_UART_MspInit+0xb4>)
 800133e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001342:	6593      	str	r3, [r2, #88]	@ 0x58
 8001344:	4b16      	ldr	r3, [pc, #88]	@ (80013a0 <HAL_UART_MspInit+0xb4>)
 8001346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001348:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001350:	4b13      	ldr	r3, [pc, #76]	@ (80013a0 <HAL_UART_MspInit+0xb4>)
 8001352:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001354:	4a12      	ldr	r2, [pc, #72]	@ (80013a0 <HAL_UART_MspInit+0xb4>)
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800135c:	4b10      	ldr	r3, [pc, #64]	@ (80013a0 <HAL_UART_MspInit+0xb4>)
 800135e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001360:	f003 0301 	and.w	r3, r3, #1
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001368:	230c      	movs	r3, #12
 800136a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136e:	2302      	movs	r3, #2
 8001370:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137a:	2303      	movs	r3, #3
 800137c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001380:	2307      	movs	r3, #7
 8001382:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001386:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800138a:	4619      	mov	r1, r3
 800138c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001390:	f000 f9b8 	bl	8001704 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001394:	bf00      	nop
 8001396:	37b0      	adds	r7, #176	@ 0xb0
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40004400 	.word	0x40004400
 80013a0:	40021000 	.word	0x40021000

080013a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013a8:	f7ff ff5e 	bl	8001268 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013ac:	480c      	ldr	r0, [pc, #48]	@ (80013e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80013ae:	490d      	ldr	r1, [pc, #52]	@ (80013e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013b0:	4a0d      	ldr	r2, [pc, #52]	@ (80013e8 <LoopForever+0xe>)
  movs r3, #0
 80013b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b4:	e002      	b.n	80013bc <LoopCopyDataInit>

080013b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ba:	3304      	adds	r3, #4

080013bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c0:	d3f9      	bcc.n	80013b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c2:	4a0a      	ldr	r2, [pc, #40]	@ (80013ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80013c4:	4c0a      	ldr	r4, [pc, #40]	@ (80013f0 <LoopForever+0x16>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c8:	e001      	b.n	80013ce <LoopFillZerobss>

080013ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013cc:	3204      	adds	r2, #4

080013ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d0:	d3fb      	bcc.n	80013ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013d2:	f002 ff39 	bl	8004248 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013d6:	f7ff fe03 	bl	8000fe0 <main>

080013da <LoopForever>:

LoopForever:
    b LoopForever
 80013da:	e7fe      	b.n	80013da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013dc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80013e8:	0800478c 	.word	0x0800478c
  ldr r2, =_sbss
 80013ec:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80013f0:	20001e88 	.word	0x20001e88

080013f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013f4:	e7fe      	b.n	80013f4 <ADC1_2_IRQHandler>
	...

080013f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013fe:	2300      	movs	r3, #0
 8001400:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001402:	4b0c      	ldr	r3, [pc, #48]	@ (8001434 <HAL_Init+0x3c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a0b      	ldr	r2, [pc, #44]	@ (8001434 <HAL_Init+0x3c>)
 8001408:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800140c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800140e:	2003      	movs	r0, #3
 8001410:	f000 f944 	bl	800169c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001414:	2000      	movs	r0, #0
 8001416:	f000 f80f 	bl	8001438 <HAL_InitTick>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d002      	beq.n	8001426 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	71fb      	strb	r3, [r7, #7]
 8001424:	e001      	b.n	800142a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001426:	f7ff fecb 	bl	80011c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800142a:	79fb      	ldrb	r3, [r7, #7]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40022000 	.word	0x40022000

08001438 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001440:	2300      	movs	r3, #0
 8001442:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001444:	4b17      	ldr	r3, [pc, #92]	@ (80014a4 <HAL_InitTick+0x6c>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d023      	beq.n	8001494 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800144c:	4b16      	ldr	r3, [pc, #88]	@ (80014a8 <HAL_InitTick+0x70>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4b14      	ldr	r3, [pc, #80]	@ (80014a4 <HAL_InitTick+0x6c>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	4619      	mov	r1, r3
 8001456:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800145a:	fbb3 f3f1 	udiv	r3, r3, r1
 800145e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001462:	4618      	mov	r0, r3
 8001464:	f000 f941 	bl	80016ea <HAL_SYSTICK_Config>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d10f      	bne.n	800148e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2b0f      	cmp	r3, #15
 8001472:	d809      	bhi.n	8001488 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001474:	2200      	movs	r2, #0
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	f04f 30ff 	mov.w	r0, #4294967295
 800147c:	f000 f919 	bl	80016b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001480:	4a0a      	ldr	r2, [pc, #40]	@ (80014ac <HAL_InitTick+0x74>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	e007      	b.n	8001498 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	73fb      	strb	r3, [r7, #15]
 800148c:	e004      	b.n	8001498 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	73fb      	strb	r3, [r7, #15]
 8001492:	e001      	b.n	8001498 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001498:	7bfb      	ldrb	r3, [r7, #15]
}
 800149a:	4618      	mov	r0, r3
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000010 	.word	0x20000010
 80014a8:	20000008 	.word	0x20000008
 80014ac:	2000000c 	.word	0x2000000c

080014b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014b4:	4b06      	ldr	r3, [pc, #24]	@ (80014d0 <HAL_IncTick+0x20>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	461a      	mov	r2, r3
 80014ba:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <HAL_IncTick+0x24>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4413      	add	r3, r2
 80014c0:	4a04      	ldr	r2, [pc, #16]	@ (80014d4 <HAL_IncTick+0x24>)
 80014c2:	6013      	str	r3, [r2, #0]
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	20000010 	.word	0x20000010
 80014d4:	20001e84 	.word	0x20001e84

080014d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return uwTick;
 80014dc:	4b03      	ldr	r3, [pc, #12]	@ (80014ec <HAL_GetTick+0x14>)
 80014de:	681b      	ldr	r3, [r3, #0]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	20001e84 	.word	0x20001e84

080014f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f8:	f7ff ffee 	bl	80014d8 <HAL_GetTick>
 80014fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001508:	d005      	beq.n	8001516 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800150a:	4b0a      	ldr	r3, [pc, #40]	@ (8001534 <HAL_Delay+0x44>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	461a      	mov	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4413      	add	r3, r2
 8001514:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001516:	bf00      	nop
 8001518:	f7ff ffde 	bl	80014d8 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	429a      	cmp	r2, r3
 8001526:	d8f7      	bhi.n	8001518 <HAL_Delay+0x28>
  {
  }
}
 8001528:	bf00      	nop
 800152a:	bf00      	nop
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000010 	.word	0x20000010

08001538 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001548:	4b0c      	ldr	r3, [pc, #48]	@ (800157c <__NVIC_SetPriorityGrouping+0x44>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800154e:	68ba      	ldr	r2, [r7, #8]
 8001550:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001554:	4013      	ands	r3, r2
 8001556:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001560:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001564:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001568:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800156a:	4a04      	ldr	r2, [pc, #16]	@ (800157c <__NVIC_SetPriorityGrouping+0x44>)
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	60d3      	str	r3, [r2, #12]
}
 8001570:	bf00      	nop
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001584:	4b04      	ldr	r3, [pc, #16]	@ (8001598 <__NVIC_GetPriorityGrouping+0x18>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	0a1b      	lsrs	r3, r3, #8
 800158a:	f003 0307 	and.w	r3, r3, #7
}
 800158e:	4618      	mov	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	6039      	str	r1, [r7, #0]
 80015a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	db0a      	blt.n	80015c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	490c      	ldr	r1, [pc, #48]	@ (80015e8 <__NVIC_SetPriority+0x4c>)
 80015b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ba:	0112      	lsls	r2, r2, #4
 80015bc:	b2d2      	uxtb	r2, r2
 80015be:	440b      	add	r3, r1
 80015c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c4:	e00a      	b.n	80015dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	4908      	ldr	r1, [pc, #32]	@ (80015ec <__NVIC_SetPriority+0x50>)
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	f003 030f 	and.w	r3, r3, #15
 80015d2:	3b04      	subs	r3, #4
 80015d4:	0112      	lsls	r2, r2, #4
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	440b      	add	r3, r1
 80015da:	761a      	strb	r2, [r3, #24]
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	e000e100 	.word	0xe000e100
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b089      	sub	sp, #36	@ 0x24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f1c3 0307 	rsb	r3, r3, #7
 800160a:	2b04      	cmp	r3, #4
 800160c:	bf28      	it	cs
 800160e:	2304      	movcs	r3, #4
 8001610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3304      	adds	r3, #4
 8001616:	2b06      	cmp	r3, #6
 8001618:	d902      	bls.n	8001620 <NVIC_EncodePriority+0x30>
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	3b03      	subs	r3, #3
 800161e:	e000      	b.n	8001622 <NVIC_EncodePriority+0x32>
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001624:	f04f 32ff 	mov.w	r2, #4294967295
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43da      	mvns	r2, r3
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	401a      	ands	r2, r3
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001638:	f04f 31ff 	mov.w	r1, #4294967295
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	fa01 f303 	lsl.w	r3, r1, r3
 8001642:	43d9      	mvns	r1, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001648:	4313      	orrs	r3, r2
         );
}
 800164a:	4618      	mov	r0, r3
 800164c:	3724      	adds	r7, #36	@ 0x24
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
	...

08001658 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3b01      	subs	r3, #1
 8001664:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001668:	d301      	bcc.n	800166e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800166a:	2301      	movs	r3, #1
 800166c:	e00f      	b.n	800168e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800166e:	4a0a      	ldr	r2, [pc, #40]	@ (8001698 <SysTick_Config+0x40>)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3b01      	subs	r3, #1
 8001674:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001676:	210f      	movs	r1, #15
 8001678:	f04f 30ff 	mov.w	r0, #4294967295
 800167c:	f7ff ff8e 	bl	800159c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001680:	4b05      	ldr	r3, [pc, #20]	@ (8001698 <SysTick_Config+0x40>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001686:	4b04      	ldr	r3, [pc, #16]	@ (8001698 <SysTick_Config+0x40>)
 8001688:	2207      	movs	r2, #7
 800168a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	e000e010 	.word	0xe000e010

0800169c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff ff47 	bl	8001538 <__NVIC_SetPriorityGrouping>
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b086      	sub	sp, #24
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	4603      	mov	r3, r0
 80016ba:	60b9      	str	r1, [r7, #8]
 80016bc:	607a      	str	r2, [r7, #4]
 80016be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016c4:	f7ff ff5c 	bl	8001580 <__NVIC_GetPriorityGrouping>
 80016c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	68b9      	ldr	r1, [r7, #8]
 80016ce:	6978      	ldr	r0, [r7, #20]
 80016d0:	f7ff ff8e 	bl	80015f0 <NVIC_EncodePriority>
 80016d4:	4602      	mov	r2, r0
 80016d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016da:	4611      	mov	r1, r2
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ff5d 	bl	800159c <__NVIC_SetPriority>
}
 80016e2:	bf00      	nop
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7ff ffb0 	bl	8001658 <SysTick_Config>
 80016f8:	4603      	mov	r3, r0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
	...

08001704 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001704:	b480      	push	{r7}
 8001706:	b087      	sub	sp, #28
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001712:	e17f      	b.n	8001a14 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	2101      	movs	r1, #1
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	fa01 f303 	lsl.w	r3, r1, r3
 8001720:	4013      	ands	r3, r2
 8001722:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2b00      	cmp	r3, #0
 8001728:	f000 8171 	beq.w	8001a0e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 0303 	and.w	r3, r3, #3
 8001734:	2b01      	cmp	r3, #1
 8001736:	d005      	beq.n	8001744 <HAL_GPIO_Init+0x40>
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 0303 	and.w	r3, r3, #3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d130      	bne.n	80017a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	2203      	movs	r2, #3
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	43db      	mvns	r3, r3
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	4013      	ands	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	68da      	ldr	r2, [r3, #12]
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4313      	orrs	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800177a:	2201      	movs	r2, #1
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4013      	ands	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	091b      	lsrs	r3, r3, #4
 8001790:	f003 0201 	and.w	r2, r3, #1
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4313      	orrs	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	2b03      	cmp	r3, #3
 80017b0:	d118      	bne.n	80017e4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80017b8:	2201      	movs	r2, #1
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	4013      	ands	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	08db      	lsrs	r3, r3, #3
 80017ce:	f003 0201 	and.w	r2, r3, #1
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	4313      	orrs	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 0303 	and.w	r3, r3, #3
 80017ec:	2b03      	cmp	r3, #3
 80017ee:	d017      	beq.n	8001820 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	2203      	movs	r2, #3
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4013      	ands	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	4313      	orrs	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 0303 	and.w	r3, r3, #3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d123      	bne.n	8001874 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	08da      	lsrs	r2, r3, #3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3208      	adds	r2, #8
 8001834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001838:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	220f      	movs	r2, #15
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4013      	ands	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	691a      	ldr	r2, [r3, #16]
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	4313      	orrs	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	08da      	lsrs	r2, r3, #3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	3208      	adds	r2, #8
 800186e:	6939      	ldr	r1, [r7, #16]
 8001870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	2203      	movs	r2, #3
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4013      	ands	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 0203 	and.w	r2, r3, #3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	4313      	orrs	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f000 80ac 	beq.w	8001a0e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b6:	4b5f      	ldr	r3, [pc, #380]	@ (8001a34 <HAL_GPIO_Init+0x330>)
 80018b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018ba:	4a5e      	ldr	r2, [pc, #376]	@ (8001a34 <HAL_GPIO_Init+0x330>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80018c2:	4b5c      	ldr	r3, [pc, #368]	@ (8001a34 <HAL_GPIO_Init+0x330>)
 80018c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018ce:	4a5a      	ldr	r2, [pc, #360]	@ (8001a38 <HAL_GPIO_Init+0x334>)
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	089b      	lsrs	r3, r3, #2
 80018d4:	3302      	adds	r3, #2
 80018d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018da:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	f003 0303 	and.w	r3, r3, #3
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	220f      	movs	r2, #15
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43db      	mvns	r3, r3
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	4013      	ands	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80018f8:	d025      	beq.n	8001946 <HAL_GPIO_Init+0x242>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a4f      	ldr	r2, [pc, #316]	@ (8001a3c <HAL_GPIO_Init+0x338>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d01f      	beq.n	8001942 <HAL_GPIO_Init+0x23e>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a4e      	ldr	r2, [pc, #312]	@ (8001a40 <HAL_GPIO_Init+0x33c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d019      	beq.n	800193e <HAL_GPIO_Init+0x23a>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a4d      	ldr	r2, [pc, #308]	@ (8001a44 <HAL_GPIO_Init+0x340>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d013      	beq.n	800193a <HAL_GPIO_Init+0x236>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a4c      	ldr	r2, [pc, #304]	@ (8001a48 <HAL_GPIO_Init+0x344>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d00d      	beq.n	8001936 <HAL_GPIO_Init+0x232>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a4b      	ldr	r2, [pc, #300]	@ (8001a4c <HAL_GPIO_Init+0x348>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d007      	beq.n	8001932 <HAL_GPIO_Init+0x22e>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a4a      	ldr	r2, [pc, #296]	@ (8001a50 <HAL_GPIO_Init+0x34c>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d101      	bne.n	800192e <HAL_GPIO_Init+0x22a>
 800192a:	2306      	movs	r3, #6
 800192c:	e00c      	b.n	8001948 <HAL_GPIO_Init+0x244>
 800192e:	2307      	movs	r3, #7
 8001930:	e00a      	b.n	8001948 <HAL_GPIO_Init+0x244>
 8001932:	2305      	movs	r3, #5
 8001934:	e008      	b.n	8001948 <HAL_GPIO_Init+0x244>
 8001936:	2304      	movs	r3, #4
 8001938:	e006      	b.n	8001948 <HAL_GPIO_Init+0x244>
 800193a:	2303      	movs	r3, #3
 800193c:	e004      	b.n	8001948 <HAL_GPIO_Init+0x244>
 800193e:	2302      	movs	r3, #2
 8001940:	e002      	b.n	8001948 <HAL_GPIO_Init+0x244>
 8001942:	2301      	movs	r3, #1
 8001944:	e000      	b.n	8001948 <HAL_GPIO_Init+0x244>
 8001946:	2300      	movs	r3, #0
 8001948:	697a      	ldr	r2, [r7, #20]
 800194a:	f002 0203 	and.w	r2, r2, #3
 800194e:	0092      	lsls	r2, r2, #2
 8001950:	4093      	lsls	r3, r2
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4313      	orrs	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001958:	4937      	ldr	r1, [pc, #220]	@ (8001a38 <HAL_GPIO_Init+0x334>)
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	089b      	lsrs	r3, r3, #2
 800195e:	3302      	adds	r3, #2
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001966:	4b3b      	ldr	r3, [pc, #236]	@ (8001a54 <HAL_GPIO_Init+0x350>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	43db      	mvns	r3, r3
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	4013      	ands	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4313      	orrs	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800198a:	4a32      	ldr	r2, [pc, #200]	@ (8001a54 <HAL_GPIO_Init+0x350>)
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001990:	4b30      	ldr	r3, [pc, #192]	@ (8001a54 <HAL_GPIO_Init+0x350>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	43db      	mvns	r3, r3
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4013      	ands	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d003      	beq.n	80019b4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019b4:	4a27      	ldr	r2, [pc, #156]	@ (8001a54 <HAL_GPIO_Init+0x350>)
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019ba:	4b26      	ldr	r3, [pc, #152]	@ (8001a54 <HAL_GPIO_Init+0x350>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	43db      	mvns	r3, r3
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	4013      	ands	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4313      	orrs	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019de:	4a1d      	ldr	r2, [pc, #116]	@ (8001a54 <HAL_GPIO_Init+0x350>)
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80019e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a54 <HAL_GPIO_Init+0x350>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4013      	ands	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d003      	beq.n	8001a08 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a08:	4a12      	ldr	r2, [pc, #72]	@ (8001a54 <HAL_GPIO_Init+0x350>)
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	3301      	adds	r3, #1
 8001a12:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f47f ae78 	bne.w	8001714 <HAL_GPIO_Init+0x10>
  }
}
 8001a24:	bf00      	nop
 8001a26:	bf00      	nop
 8001a28:	371c      	adds	r7, #28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40010000 	.word	0x40010000
 8001a3c:	48000400 	.word	0x48000400
 8001a40:	48000800 	.word	0x48000800
 8001a44:	48000c00 	.word	0x48000c00
 8001a48:	48001000 	.word	0x48001000
 8001a4c:	48001400 	.word	0x48001400
 8001a50:	48001800 	.word	0x48001800
 8001a54:	40010400 	.word	0x40010400

08001a58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691a      	ldr	r2, [r3, #16]
 8001a68:	887b      	ldrh	r3, [r7, #2]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d002      	beq.n	8001a76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a70:	2301      	movs	r3, #1
 8001a72:	73fb      	strb	r3, [r7, #15]
 8001a74:	e001      	b.n	8001a7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a76:	2300      	movs	r3, #0
 8001a78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	807b      	strh	r3, [r7, #2]
 8001a94:	4613      	mov	r3, r2
 8001a96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a98:	787b      	ldrb	r3, [r7, #1]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a9e:	887a      	ldrh	r2, [r7, #2]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001aa4:	e002      	b.n	8001aac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001aa6:	887a      	ldrh	r2, [r7, #2]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001abc:	4b04      	ldr	r3, [pc, #16]	@ (8001ad0 <HAL_PWREx_GetVoltageRange+0x18>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	40007000 	.word	0x40007000

08001ad4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ae2:	d130      	bne.n	8001b46 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ae4:	4b23      	ldr	r3, [pc, #140]	@ (8001b74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001aec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001af0:	d038      	beq.n	8001b64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001af2:	4b20      	ldr	r3, [pc, #128]	@ (8001b74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001afa:	4a1e      	ldr	r2, [pc, #120]	@ (8001b74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001afc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b00:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b02:	4b1d      	ldr	r3, [pc, #116]	@ (8001b78 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2232      	movs	r2, #50	@ 0x32
 8001b08:	fb02 f303 	mul.w	r3, r2, r3
 8001b0c:	4a1b      	ldr	r2, [pc, #108]	@ (8001b7c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b12:	0c9b      	lsrs	r3, r3, #18
 8001b14:	3301      	adds	r3, #1
 8001b16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b18:	e002      	b.n	8001b20 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b20:	4b14      	ldr	r3, [pc, #80]	@ (8001b74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b22:	695b      	ldr	r3, [r3, #20]
 8001b24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b2c:	d102      	bne.n	8001b34 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1f2      	bne.n	8001b1a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b34:	4b0f      	ldr	r3, [pc, #60]	@ (8001b74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b40:	d110      	bne.n	8001b64 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e00f      	b.n	8001b66 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b46:	4b0b      	ldr	r3, [pc, #44]	@ (8001b74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b52:	d007      	beq.n	8001b64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b54:	4b07      	ldr	r3, [pc, #28]	@ (8001b74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b5c:	4a05      	ldr	r2, [pc, #20]	@ (8001b74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b62:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	40007000 	.word	0x40007000
 8001b78:	20000008 	.word	0x20000008
 8001b7c:	431bde83 	.word	0x431bde83

08001b80 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b088      	sub	sp, #32
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e3ca      	b.n	8002328 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b92:	4b97      	ldr	r3, [pc, #604]	@ (8001df0 <HAL_RCC_OscConfig+0x270>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f003 030c 	and.w	r3, r3, #12
 8001b9a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b9c:	4b94      	ldr	r3, [pc, #592]	@ (8001df0 <HAL_RCC_OscConfig+0x270>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	f003 0303 	and.w	r3, r3, #3
 8001ba4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0310 	and.w	r3, r3, #16
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f000 80e4 	beq.w	8001d7c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d007      	beq.n	8001bca <HAL_RCC_OscConfig+0x4a>
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	2b0c      	cmp	r3, #12
 8001bbe:	f040 808b 	bne.w	8001cd8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	f040 8087 	bne.w	8001cd8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bca:	4b89      	ldr	r3, [pc, #548]	@ (8001df0 <HAL_RCC_OscConfig+0x270>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d005      	beq.n	8001be2 <HAL_RCC_OscConfig+0x62>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e3a2      	b.n	8002328 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a1a      	ldr	r2, [r3, #32]
 8001be6:	4b82      	ldr	r3, [pc, #520]	@ (8001df0 <HAL_RCC_OscConfig+0x270>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0308 	and.w	r3, r3, #8
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d004      	beq.n	8001bfc <HAL_RCC_OscConfig+0x7c>
 8001bf2:	4b7f      	ldr	r3, [pc, #508]	@ (8001df0 <HAL_RCC_OscConfig+0x270>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bfa:	e005      	b.n	8001c08 <HAL_RCC_OscConfig+0x88>
 8001bfc:	4b7c      	ldr	r3, [pc, #496]	@ (8001df0 <HAL_RCC_OscConfig+0x270>)
 8001bfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c02:	091b      	lsrs	r3, r3, #4
 8001c04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d223      	bcs.n	8001c54 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f000 fd55 	bl	80026c0 <RCC_SetFlashLatencyFromMSIRange>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e383      	b.n	8002328 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c20:	4b73      	ldr	r3, [pc, #460]	@ (8001df0 <HAL_RCC_OscConfig+0x270>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a72      	ldr	r2, [pc, #456]	@ (8001df0 <HAL_RCC_OscConfig+0x270>)
 8001c26:	f043 0308 	orr.w	r3, r3, #8
 8001c2a:	6013      	str	r3, [r2, #0]
 8001c2c:	4b70      	ldr	r3, [pc, #448]	@ (8001df0 <HAL_RCC_OscConfig+0x270>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	496d      	ldr	r1, [pc, #436]	@ (8001df0 <HAL_RCC_OscConfig+0x270>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c3e:	4b6c      	ldr	r3, [pc, #432]	@ (8001df0 <HAL_RCC_OscConfig+0x270>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	021b      	lsls	r3, r3, #8
 8001c4c:	4968      	ldr	r1, [pc, #416]	@ (8001df0 <HAL_RCC_OscConfig+0x270>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	604b      	str	r3, [r1, #4]
 8001c52:	e025      	b.n	8001ca0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c54:	4b66      	ldr	r3, [pc, #408]	@ (8001df0 <HAL_RCC_OscConfig+0x270>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a65      	ldr	r2, [pc, #404]	@ (8001df0 <HAL_RCC_OscConfig+0x270>)
 8001c5a:	f043 0308 	orr.w	r3, r3, #8
 8001c5e:	6013      	str	r3, [r2, #0]
 8001c60:	4b63      	ldr	r3, [pc, #396]	@ (8001df0 <HAL_RCC_OscConfig+0x270>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	4960      	ldr	r1, [pc, #384]	@ (8001df0 <HAL_RCC_OscConfig+0x270>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c72:	4b5f      	ldr	r3, [pc, #380]	@ (8001df0 <HAL_RCC_OscConfig+0x270>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	021b      	lsls	r3, r3, #8
 8001c80:	495b      	ldr	r1, [pc, #364]	@ (8001df0 <HAL_RCC_OscConfig+0x270>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d109      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f000 fd15 	bl	80026c0 <RCC_SetFlashLatencyFromMSIRange>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e343      	b.n	8002328 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ca0:	f000 fc4a 	bl	8002538 <HAL_RCC_GetSysClockFreq>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	4b52      	ldr	r3, [pc, #328]	@ (8001df0 <HAL_RCC_OscConfig+0x270>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	091b      	lsrs	r3, r3, #4
 8001cac:	f003 030f 	and.w	r3, r3, #15
 8001cb0:	4950      	ldr	r1, [pc, #320]	@ (8001df4 <HAL_RCC_OscConfig+0x274>)
 8001cb2:	5ccb      	ldrb	r3, [r1, r3]
 8001cb4:	f003 031f 	and.w	r3, r3, #31
 8001cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cbc:	4a4e      	ldr	r2, [pc, #312]	@ (8001df8 <HAL_RCC_OscConfig+0x278>)
 8001cbe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001cc0:	4b4e      	ldr	r3, [pc, #312]	@ (8001dfc <HAL_RCC_OscConfig+0x27c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff fbb7 	bl	8001438 <HAL_InitTick>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d052      	beq.n	8001d7a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
 8001cd6:	e327      	b.n	8002328 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d032      	beq.n	8001d46 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ce0:	4b43      	ldr	r3, [pc, #268]	@ (8001df0 <HAL_RCC_OscConfig+0x270>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a42      	ldr	r2, [pc, #264]	@ (8001df0 <HAL_RCC_OscConfig+0x270>)
 8001ce6:	f043 0301 	orr.w	r3, r3, #1
 8001cea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cec:	f7ff fbf4 	bl	80014d8 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cf4:	f7ff fbf0 	bl	80014d8 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e310      	b.n	8002328 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d06:	4b3a      	ldr	r3, [pc, #232]	@ (8001df0 <HAL_RCC_OscConfig+0x270>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0f0      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d12:	4b37      	ldr	r3, [pc, #220]	@ (8001df0 <HAL_RCC_OscConfig+0x270>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a36      	ldr	r2, [pc, #216]	@ (8001df0 <HAL_RCC_OscConfig+0x270>)
 8001d18:	f043 0308 	orr.w	r3, r3, #8
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	4b34      	ldr	r3, [pc, #208]	@ (8001df0 <HAL_RCC_OscConfig+0x270>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	4931      	ldr	r1, [pc, #196]	@ (8001df0 <HAL_RCC_OscConfig+0x270>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d30:	4b2f      	ldr	r3, [pc, #188]	@ (8001df0 <HAL_RCC_OscConfig+0x270>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	021b      	lsls	r3, r3, #8
 8001d3e:	492c      	ldr	r1, [pc, #176]	@ (8001df0 <HAL_RCC_OscConfig+0x270>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	604b      	str	r3, [r1, #4]
 8001d44:	e01a      	b.n	8001d7c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d46:	4b2a      	ldr	r3, [pc, #168]	@ (8001df0 <HAL_RCC_OscConfig+0x270>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a29      	ldr	r2, [pc, #164]	@ (8001df0 <HAL_RCC_OscConfig+0x270>)
 8001d4c:	f023 0301 	bic.w	r3, r3, #1
 8001d50:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d52:	f7ff fbc1 	bl	80014d8 <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d5a:	f7ff fbbd 	bl	80014d8 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e2dd      	b.n	8002328 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d6c:	4b20      	ldr	r3, [pc, #128]	@ (8001df0 <HAL_RCC_OscConfig+0x270>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1f0      	bne.n	8001d5a <HAL_RCC_OscConfig+0x1da>
 8001d78:	e000      	b.n	8001d7c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d7a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d074      	beq.n	8001e72 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	2b08      	cmp	r3, #8
 8001d8c:	d005      	beq.n	8001d9a <HAL_RCC_OscConfig+0x21a>
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	2b0c      	cmp	r3, #12
 8001d92:	d10e      	bne.n	8001db2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	2b03      	cmp	r3, #3
 8001d98:	d10b      	bne.n	8001db2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d9a:	4b15      	ldr	r3, [pc, #84]	@ (8001df0 <HAL_RCC_OscConfig+0x270>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d064      	beq.n	8001e70 <HAL_RCC_OscConfig+0x2f0>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d160      	bne.n	8001e70 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e2ba      	b.n	8002328 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dba:	d106      	bne.n	8001dca <HAL_RCC_OscConfig+0x24a>
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001df0 <HAL_RCC_OscConfig+0x270>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a0b      	ldr	r2, [pc, #44]	@ (8001df0 <HAL_RCC_OscConfig+0x270>)
 8001dc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	e026      	b.n	8001e18 <HAL_RCC_OscConfig+0x298>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001dd2:	d115      	bne.n	8001e00 <HAL_RCC_OscConfig+0x280>
 8001dd4:	4b06      	ldr	r3, [pc, #24]	@ (8001df0 <HAL_RCC_OscConfig+0x270>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a05      	ldr	r2, [pc, #20]	@ (8001df0 <HAL_RCC_OscConfig+0x270>)
 8001dda:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001dde:	6013      	str	r3, [r2, #0]
 8001de0:	4b03      	ldr	r3, [pc, #12]	@ (8001df0 <HAL_RCC_OscConfig+0x270>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a02      	ldr	r2, [pc, #8]	@ (8001df0 <HAL_RCC_OscConfig+0x270>)
 8001de6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dea:	6013      	str	r3, [r2, #0]
 8001dec:	e014      	b.n	8001e18 <HAL_RCC_OscConfig+0x298>
 8001dee:	bf00      	nop
 8001df0:	40021000 	.word	0x40021000
 8001df4:	08004734 	.word	0x08004734
 8001df8:	20000008 	.word	0x20000008
 8001dfc:	2000000c 	.word	0x2000000c
 8001e00:	4ba0      	ldr	r3, [pc, #640]	@ (8002084 <HAL_RCC_OscConfig+0x504>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a9f      	ldr	r2, [pc, #636]	@ (8002084 <HAL_RCC_OscConfig+0x504>)
 8001e06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e0a:	6013      	str	r3, [r2, #0]
 8001e0c:	4b9d      	ldr	r3, [pc, #628]	@ (8002084 <HAL_RCC_OscConfig+0x504>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a9c      	ldr	r2, [pc, #624]	@ (8002084 <HAL_RCC_OscConfig+0x504>)
 8001e12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d013      	beq.n	8001e48 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e20:	f7ff fb5a 	bl	80014d8 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e28:	f7ff fb56 	bl	80014d8 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b64      	cmp	r3, #100	@ 0x64
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e276      	b.n	8002328 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e3a:	4b92      	ldr	r3, [pc, #584]	@ (8002084 <HAL_RCC_OscConfig+0x504>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0f0      	beq.n	8001e28 <HAL_RCC_OscConfig+0x2a8>
 8001e46:	e014      	b.n	8001e72 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e48:	f7ff fb46 	bl	80014d8 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e50:	f7ff fb42 	bl	80014d8 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b64      	cmp	r3, #100	@ 0x64
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e262      	b.n	8002328 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e62:	4b88      	ldr	r3, [pc, #544]	@ (8002084 <HAL_RCC_OscConfig+0x504>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f0      	bne.n	8001e50 <HAL_RCC_OscConfig+0x2d0>
 8001e6e:	e000      	b.n	8001e72 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d060      	beq.n	8001f40 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	d005      	beq.n	8001e90 <HAL_RCC_OscConfig+0x310>
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	2b0c      	cmp	r3, #12
 8001e88:	d119      	bne.n	8001ebe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d116      	bne.n	8001ebe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e90:	4b7c      	ldr	r3, [pc, #496]	@ (8002084 <HAL_RCC_OscConfig+0x504>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d005      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x328>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d101      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e23f      	b.n	8002328 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea8:	4b76      	ldr	r3, [pc, #472]	@ (8002084 <HAL_RCC_OscConfig+0x504>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	061b      	lsls	r3, r3, #24
 8001eb6:	4973      	ldr	r1, [pc, #460]	@ (8002084 <HAL_RCC_OscConfig+0x504>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ebc:	e040      	b.n	8001f40 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d023      	beq.n	8001f0e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ec6:	4b6f      	ldr	r3, [pc, #444]	@ (8002084 <HAL_RCC_OscConfig+0x504>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a6e      	ldr	r2, [pc, #440]	@ (8002084 <HAL_RCC_OscConfig+0x504>)
 8001ecc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ed0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed2:	f7ff fb01 	bl	80014d8 <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ed8:	e008      	b.n	8001eec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eda:	f7ff fafd 	bl	80014d8 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e21d      	b.n	8002328 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eec:	4b65      	ldr	r3, [pc, #404]	@ (8002084 <HAL_RCC_OscConfig+0x504>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0f0      	beq.n	8001eda <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef8:	4b62      	ldr	r3, [pc, #392]	@ (8002084 <HAL_RCC_OscConfig+0x504>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	061b      	lsls	r3, r3, #24
 8001f06:	495f      	ldr	r1, [pc, #380]	@ (8002084 <HAL_RCC_OscConfig+0x504>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	604b      	str	r3, [r1, #4]
 8001f0c:	e018      	b.n	8001f40 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f0e:	4b5d      	ldr	r3, [pc, #372]	@ (8002084 <HAL_RCC_OscConfig+0x504>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a5c      	ldr	r2, [pc, #368]	@ (8002084 <HAL_RCC_OscConfig+0x504>)
 8001f14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1a:	f7ff fadd 	bl	80014d8 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f22:	f7ff fad9 	bl	80014d8 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e1f9      	b.n	8002328 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f34:	4b53      	ldr	r3, [pc, #332]	@ (8002084 <HAL_RCC_OscConfig+0x504>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1f0      	bne.n	8001f22 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0308 	and.w	r3, r3, #8
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d03c      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	695b      	ldr	r3, [r3, #20]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d01c      	beq.n	8001f8e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f54:	4b4b      	ldr	r3, [pc, #300]	@ (8002084 <HAL_RCC_OscConfig+0x504>)
 8001f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f5a:	4a4a      	ldr	r2, [pc, #296]	@ (8002084 <HAL_RCC_OscConfig+0x504>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f64:	f7ff fab8 	bl	80014d8 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f6c:	f7ff fab4 	bl	80014d8 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e1d4      	b.n	8002328 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f7e:	4b41      	ldr	r3, [pc, #260]	@ (8002084 <HAL_RCC_OscConfig+0x504>)
 8001f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0ef      	beq.n	8001f6c <HAL_RCC_OscConfig+0x3ec>
 8001f8c:	e01b      	b.n	8001fc6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f8e:	4b3d      	ldr	r3, [pc, #244]	@ (8002084 <HAL_RCC_OscConfig+0x504>)
 8001f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f94:	4a3b      	ldr	r2, [pc, #236]	@ (8002084 <HAL_RCC_OscConfig+0x504>)
 8001f96:	f023 0301 	bic.w	r3, r3, #1
 8001f9a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f9e:	f7ff fa9b 	bl	80014d8 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fa6:	f7ff fa97 	bl	80014d8 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e1b7      	b.n	8002328 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fb8:	4b32      	ldr	r3, [pc, #200]	@ (8002084 <HAL_RCC_OscConfig+0x504>)
 8001fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1ef      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0304 	and.w	r3, r3, #4
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 80a6 	beq.w	8002120 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fd8:	4b2a      	ldr	r3, [pc, #168]	@ (8002084 <HAL_RCC_OscConfig+0x504>)
 8001fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d10d      	bne.n	8002000 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fe4:	4b27      	ldr	r3, [pc, #156]	@ (8002084 <HAL_RCC_OscConfig+0x504>)
 8001fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe8:	4a26      	ldr	r2, [pc, #152]	@ (8002084 <HAL_RCC_OscConfig+0x504>)
 8001fea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fee:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ff0:	4b24      	ldr	r3, [pc, #144]	@ (8002084 <HAL_RCC_OscConfig+0x504>)
 8001ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ff8:	60bb      	str	r3, [r7, #8]
 8001ffa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002000:	4b21      	ldr	r3, [pc, #132]	@ (8002088 <HAL_RCC_OscConfig+0x508>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002008:	2b00      	cmp	r3, #0
 800200a:	d118      	bne.n	800203e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800200c:	4b1e      	ldr	r3, [pc, #120]	@ (8002088 <HAL_RCC_OscConfig+0x508>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a1d      	ldr	r2, [pc, #116]	@ (8002088 <HAL_RCC_OscConfig+0x508>)
 8002012:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002016:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002018:	f7ff fa5e 	bl	80014d8 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002020:	f7ff fa5a 	bl	80014d8 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e17a      	b.n	8002328 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002032:	4b15      	ldr	r3, [pc, #84]	@ (8002088 <HAL_RCC_OscConfig+0x508>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0f0      	beq.n	8002020 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d108      	bne.n	8002058 <HAL_RCC_OscConfig+0x4d8>
 8002046:	4b0f      	ldr	r3, [pc, #60]	@ (8002084 <HAL_RCC_OscConfig+0x504>)
 8002048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800204c:	4a0d      	ldr	r2, [pc, #52]	@ (8002084 <HAL_RCC_OscConfig+0x504>)
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002056:	e029      	b.n	80020ac <HAL_RCC_OscConfig+0x52c>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	2b05      	cmp	r3, #5
 800205e:	d115      	bne.n	800208c <HAL_RCC_OscConfig+0x50c>
 8002060:	4b08      	ldr	r3, [pc, #32]	@ (8002084 <HAL_RCC_OscConfig+0x504>)
 8002062:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002066:	4a07      	ldr	r2, [pc, #28]	@ (8002084 <HAL_RCC_OscConfig+0x504>)
 8002068:	f043 0304 	orr.w	r3, r3, #4
 800206c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002070:	4b04      	ldr	r3, [pc, #16]	@ (8002084 <HAL_RCC_OscConfig+0x504>)
 8002072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002076:	4a03      	ldr	r2, [pc, #12]	@ (8002084 <HAL_RCC_OscConfig+0x504>)
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002080:	e014      	b.n	80020ac <HAL_RCC_OscConfig+0x52c>
 8002082:	bf00      	nop
 8002084:	40021000 	.word	0x40021000
 8002088:	40007000 	.word	0x40007000
 800208c:	4b9c      	ldr	r3, [pc, #624]	@ (8002300 <HAL_RCC_OscConfig+0x780>)
 800208e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002092:	4a9b      	ldr	r2, [pc, #620]	@ (8002300 <HAL_RCC_OscConfig+0x780>)
 8002094:	f023 0301 	bic.w	r3, r3, #1
 8002098:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800209c:	4b98      	ldr	r3, [pc, #608]	@ (8002300 <HAL_RCC_OscConfig+0x780>)
 800209e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020a2:	4a97      	ldr	r2, [pc, #604]	@ (8002300 <HAL_RCC_OscConfig+0x780>)
 80020a4:	f023 0304 	bic.w	r3, r3, #4
 80020a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d016      	beq.n	80020e2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b4:	f7ff fa10 	bl	80014d8 <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ba:	e00a      	b.n	80020d2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020bc:	f7ff fa0c 	bl	80014d8 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e12a      	b.n	8002328 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020d2:	4b8b      	ldr	r3, [pc, #556]	@ (8002300 <HAL_RCC_OscConfig+0x780>)
 80020d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0ed      	beq.n	80020bc <HAL_RCC_OscConfig+0x53c>
 80020e0:	e015      	b.n	800210e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e2:	f7ff f9f9 	bl	80014d8 <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020e8:	e00a      	b.n	8002100 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ea:	f7ff f9f5 	bl	80014d8 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e113      	b.n	8002328 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002100:	4b7f      	ldr	r3, [pc, #508]	@ (8002300 <HAL_RCC_OscConfig+0x780>)
 8002102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1ed      	bne.n	80020ea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800210e:	7ffb      	ldrb	r3, [r7, #31]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d105      	bne.n	8002120 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002114:	4b7a      	ldr	r3, [pc, #488]	@ (8002300 <HAL_RCC_OscConfig+0x780>)
 8002116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002118:	4a79      	ldr	r2, [pc, #484]	@ (8002300 <HAL_RCC_OscConfig+0x780>)
 800211a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800211e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 80fe 	beq.w	8002326 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800212e:	2b02      	cmp	r3, #2
 8002130:	f040 80d0 	bne.w	80022d4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002134:	4b72      	ldr	r3, [pc, #456]	@ (8002300 <HAL_RCC_OscConfig+0x780>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	f003 0203 	and.w	r2, r3, #3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002144:	429a      	cmp	r2, r3
 8002146:	d130      	bne.n	80021aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002152:	3b01      	subs	r3, #1
 8002154:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002156:	429a      	cmp	r2, r3
 8002158:	d127      	bne.n	80021aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002164:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002166:	429a      	cmp	r2, r3
 8002168:	d11f      	bne.n	80021aa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002174:	2a07      	cmp	r2, #7
 8002176:	bf14      	ite	ne
 8002178:	2201      	movne	r2, #1
 800217a:	2200      	moveq	r2, #0
 800217c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800217e:	4293      	cmp	r3, r2
 8002180:	d113      	bne.n	80021aa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800218c:	085b      	lsrs	r3, r3, #1
 800218e:	3b01      	subs	r3, #1
 8002190:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002192:	429a      	cmp	r2, r3
 8002194:	d109      	bne.n	80021aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a0:	085b      	lsrs	r3, r3, #1
 80021a2:	3b01      	subs	r3, #1
 80021a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d06e      	beq.n	8002288 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	2b0c      	cmp	r3, #12
 80021ae:	d069      	beq.n	8002284 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80021b0:	4b53      	ldr	r3, [pc, #332]	@ (8002300 <HAL_RCC_OscConfig+0x780>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d105      	bne.n	80021c8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80021bc:	4b50      	ldr	r3, [pc, #320]	@ (8002300 <HAL_RCC_OscConfig+0x780>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e0ad      	b.n	8002328 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80021cc:	4b4c      	ldr	r3, [pc, #304]	@ (8002300 <HAL_RCC_OscConfig+0x780>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a4b      	ldr	r2, [pc, #300]	@ (8002300 <HAL_RCC_OscConfig+0x780>)
 80021d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021d6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021d8:	f7ff f97e 	bl	80014d8 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e0:	f7ff f97a 	bl	80014d8 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e09a      	b.n	8002328 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021f2:	4b43      	ldr	r3, [pc, #268]	@ (8002300 <HAL_RCC_OscConfig+0x780>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f0      	bne.n	80021e0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021fe:	4b40      	ldr	r3, [pc, #256]	@ (8002300 <HAL_RCC_OscConfig+0x780>)
 8002200:	68da      	ldr	r2, [r3, #12]
 8002202:	4b40      	ldr	r3, [pc, #256]	@ (8002304 <HAL_RCC_OscConfig+0x784>)
 8002204:	4013      	ands	r3, r2
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800220e:	3a01      	subs	r2, #1
 8002210:	0112      	lsls	r2, r2, #4
 8002212:	4311      	orrs	r1, r2
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002218:	0212      	lsls	r2, r2, #8
 800221a:	4311      	orrs	r1, r2
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002220:	0852      	lsrs	r2, r2, #1
 8002222:	3a01      	subs	r2, #1
 8002224:	0552      	lsls	r2, r2, #21
 8002226:	4311      	orrs	r1, r2
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800222c:	0852      	lsrs	r2, r2, #1
 800222e:	3a01      	subs	r2, #1
 8002230:	0652      	lsls	r2, r2, #25
 8002232:	4311      	orrs	r1, r2
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002238:	0912      	lsrs	r2, r2, #4
 800223a:	0452      	lsls	r2, r2, #17
 800223c:	430a      	orrs	r2, r1
 800223e:	4930      	ldr	r1, [pc, #192]	@ (8002300 <HAL_RCC_OscConfig+0x780>)
 8002240:	4313      	orrs	r3, r2
 8002242:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002244:	4b2e      	ldr	r3, [pc, #184]	@ (8002300 <HAL_RCC_OscConfig+0x780>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a2d      	ldr	r2, [pc, #180]	@ (8002300 <HAL_RCC_OscConfig+0x780>)
 800224a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800224e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002250:	4b2b      	ldr	r3, [pc, #172]	@ (8002300 <HAL_RCC_OscConfig+0x780>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4a2a      	ldr	r2, [pc, #168]	@ (8002300 <HAL_RCC_OscConfig+0x780>)
 8002256:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800225a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800225c:	f7ff f93c 	bl	80014d8 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002264:	f7ff f938 	bl	80014d8 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e058      	b.n	8002328 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002276:	4b22      	ldr	r3, [pc, #136]	@ (8002300 <HAL_RCC_OscConfig+0x780>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0f0      	beq.n	8002264 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002282:	e050      	b.n	8002326 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e04f      	b.n	8002328 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002288:	4b1d      	ldr	r3, [pc, #116]	@ (8002300 <HAL_RCC_OscConfig+0x780>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d148      	bne.n	8002326 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002294:	4b1a      	ldr	r3, [pc, #104]	@ (8002300 <HAL_RCC_OscConfig+0x780>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a19      	ldr	r2, [pc, #100]	@ (8002300 <HAL_RCC_OscConfig+0x780>)
 800229a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800229e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022a0:	4b17      	ldr	r3, [pc, #92]	@ (8002300 <HAL_RCC_OscConfig+0x780>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	4a16      	ldr	r2, [pc, #88]	@ (8002300 <HAL_RCC_OscConfig+0x780>)
 80022a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022ac:	f7ff f914 	bl	80014d8 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b4:	f7ff f910 	bl	80014d8 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e030      	b.n	8002328 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002300 <HAL_RCC_OscConfig+0x780>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0f0      	beq.n	80022b4 <HAL_RCC_OscConfig+0x734>
 80022d2:	e028      	b.n	8002326 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	2b0c      	cmp	r3, #12
 80022d8:	d023      	beq.n	8002322 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022da:	4b09      	ldr	r3, [pc, #36]	@ (8002300 <HAL_RCC_OscConfig+0x780>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a08      	ldr	r2, [pc, #32]	@ (8002300 <HAL_RCC_OscConfig+0x780>)
 80022e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e6:	f7ff f8f7 	bl	80014d8 <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022ec:	e00c      	b.n	8002308 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ee:	f7ff f8f3 	bl	80014d8 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d905      	bls.n	8002308 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e013      	b.n	8002328 <HAL_RCC_OscConfig+0x7a8>
 8002300:	40021000 	.word	0x40021000
 8002304:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002308:	4b09      	ldr	r3, [pc, #36]	@ (8002330 <HAL_RCC_OscConfig+0x7b0>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1ec      	bne.n	80022ee <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002314:	4b06      	ldr	r3, [pc, #24]	@ (8002330 <HAL_RCC_OscConfig+0x7b0>)
 8002316:	68da      	ldr	r2, [r3, #12]
 8002318:	4905      	ldr	r1, [pc, #20]	@ (8002330 <HAL_RCC_OscConfig+0x7b0>)
 800231a:	4b06      	ldr	r3, [pc, #24]	@ (8002334 <HAL_RCC_OscConfig+0x7b4>)
 800231c:	4013      	ands	r3, r2
 800231e:	60cb      	str	r3, [r1, #12]
 8002320:	e001      	b.n	8002326 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e000      	b.n	8002328 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3720      	adds	r7, #32
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40021000 	.word	0x40021000
 8002334:	feeefffc 	.word	0xfeeefffc

08002338 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e0e7      	b.n	800251c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800234c:	4b75      	ldr	r3, [pc, #468]	@ (8002524 <HAL_RCC_ClockConfig+0x1ec>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d910      	bls.n	800237c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235a:	4b72      	ldr	r3, [pc, #456]	@ (8002524 <HAL_RCC_ClockConfig+0x1ec>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f023 0207 	bic.w	r2, r3, #7
 8002362:	4970      	ldr	r1, [pc, #448]	@ (8002524 <HAL_RCC_ClockConfig+0x1ec>)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	4313      	orrs	r3, r2
 8002368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800236a:	4b6e      	ldr	r3, [pc, #440]	@ (8002524 <HAL_RCC_ClockConfig+0x1ec>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	429a      	cmp	r2, r3
 8002376:	d001      	beq.n	800237c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e0cf      	b.n	800251c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d010      	beq.n	80023aa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	4b66      	ldr	r3, [pc, #408]	@ (8002528 <HAL_RCC_ClockConfig+0x1f0>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002394:	429a      	cmp	r2, r3
 8002396:	d908      	bls.n	80023aa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002398:	4b63      	ldr	r3, [pc, #396]	@ (8002528 <HAL_RCC_ClockConfig+0x1f0>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	4960      	ldr	r1, [pc, #384]	@ (8002528 <HAL_RCC_ClockConfig+0x1f0>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d04c      	beq.n	8002450 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	d107      	bne.n	80023ce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023be:	4b5a      	ldr	r3, [pc, #360]	@ (8002528 <HAL_RCC_ClockConfig+0x1f0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d121      	bne.n	800240e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e0a6      	b.n	800251c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d107      	bne.n	80023e6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023d6:	4b54      	ldr	r3, [pc, #336]	@ (8002528 <HAL_RCC_ClockConfig+0x1f0>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d115      	bne.n	800240e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e09a      	b.n	800251c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d107      	bne.n	80023fe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023ee:	4b4e      	ldr	r3, [pc, #312]	@ (8002528 <HAL_RCC_ClockConfig+0x1f0>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d109      	bne.n	800240e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e08e      	b.n	800251c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023fe:	4b4a      	ldr	r3, [pc, #296]	@ (8002528 <HAL_RCC_ClockConfig+0x1f0>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e086      	b.n	800251c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800240e:	4b46      	ldr	r3, [pc, #280]	@ (8002528 <HAL_RCC_ClockConfig+0x1f0>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f023 0203 	bic.w	r2, r3, #3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	4943      	ldr	r1, [pc, #268]	@ (8002528 <HAL_RCC_ClockConfig+0x1f0>)
 800241c:	4313      	orrs	r3, r2
 800241e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002420:	f7ff f85a 	bl	80014d8 <HAL_GetTick>
 8002424:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002426:	e00a      	b.n	800243e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002428:	f7ff f856 	bl	80014d8 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002436:	4293      	cmp	r3, r2
 8002438:	d901      	bls.n	800243e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e06e      	b.n	800251c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243e:	4b3a      	ldr	r3, [pc, #232]	@ (8002528 <HAL_RCC_ClockConfig+0x1f0>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 020c 	and.w	r2, r3, #12
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	429a      	cmp	r2, r3
 800244e:	d1eb      	bne.n	8002428 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d010      	beq.n	800247e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	4b31      	ldr	r3, [pc, #196]	@ (8002528 <HAL_RCC_ClockConfig+0x1f0>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002468:	429a      	cmp	r2, r3
 800246a:	d208      	bcs.n	800247e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800246c:	4b2e      	ldr	r3, [pc, #184]	@ (8002528 <HAL_RCC_ClockConfig+0x1f0>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	492b      	ldr	r1, [pc, #172]	@ (8002528 <HAL_RCC_ClockConfig+0x1f0>)
 800247a:	4313      	orrs	r3, r2
 800247c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800247e:	4b29      	ldr	r3, [pc, #164]	@ (8002524 <HAL_RCC_ClockConfig+0x1ec>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d210      	bcs.n	80024ae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248c:	4b25      	ldr	r3, [pc, #148]	@ (8002524 <HAL_RCC_ClockConfig+0x1ec>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f023 0207 	bic.w	r2, r3, #7
 8002494:	4923      	ldr	r1, [pc, #140]	@ (8002524 <HAL_RCC_ClockConfig+0x1ec>)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	4313      	orrs	r3, r2
 800249a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800249c:	4b21      	ldr	r3, [pc, #132]	@ (8002524 <HAL_RCC_ClockConfig+0x1ec>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d001      	beq.n	80024ae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e036      	b.n	800251c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0304 	and.w	r3, r3, #4
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d008      	beq.n	80024cc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002528 <HAL_RCC_ClockConfig+0x1f0>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	4918      	ldr	r1, [pc, #96]	@ (8002528 <HAL_RCC_ClockConfig+0x1f0>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0308 	and.w	r3, r3, #8
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d009      	beq.n	80024ec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024d8:	4b13      	ldr	r3, [pc, #76]	@ (8002528 <HAL_RCC_ClockConfig+0x1f0>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	4910      	ldr	r1, [pc, #64]	@ (8002528 <HAL_RCC_ClockConfig+0x1f0>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024ec:	f000 f824 	bl	8002538 <HAL_RCC_GetSysClockFreq>
 80024f0:	4602      	mov	r2, r0
 80024f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002528 <HAL_RCC_ClockConfig+0x1f0>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	091b      	lsrs	r3, r3, #4
 80024f8:	f003 030f 	and.w	r3, r3, #15
 80024fc:	490b      	ldr	r1, [pc, #44]	@ (800252c <HAL_RCC_ClockConfig+0x1f4>)
 80024fe:	5ccb      	ldrb	r3, [r1, r3]
 8002500:	f003 031f 	and.w	r3, r3, #31
 8002504:	fa22 f303 	lsr.w	r3, r2, r3
 8002508:	4a09      	ldr	r2, [pc, #36]	@ (8002530 <HAL_RCC_ClockConfig+0x1f8>)
 800250a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800250c:	4b09      	ldr	r3, [pc, #36]	@ (8002534 <HAL_RCC_ClockConfig+0x1fc>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4618      	mov	r0, r3
 8002512:	f7fe ff91 	bl	8001438 <HAL_InitTick>
 8002516:	4603      	mov	r3, r0
 8002518:	72fb      	strb	r3, [r7, #11]

  return status;
 800251a:	7afb      	ldrb	r3, [r7, #11]
}
 800251c:	4618      	mov	r0, r3
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40022000 	.word	0x40022000
 8002528:	40021000 	.word	0x40021000
 800252c:	08004734 	.word	0x08004734
 8002530:	20000008 	.word	0x20000008
 8002534:	2000000c 	.word	0x2000000c

08002538 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002538:	b480      	push	{r7}
 800253a:	b089      	sub	sp, #36	@ 0x24
 800253c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800253e:	2300      	movs	r3, #0
 8002540:	61fb      	str	r3, [r7, #28]
 8002542:	2300      	movs	r3, #0
 8002544:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002546:	4b3e      	ldr	r3, [pc, #248]	@ (8002640 <HAL_RCC_GetSysClockFreq+0x108>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 030c 	and.w	r3, r3, #12
 800254e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002550:	4b3b      	ldr	r3, [pc, #236]	@ (8002640 <HAL_RCC_GetSysClockFreq+0x108>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	f003 0303 	and.w	r3, r3, #3
 8002558:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d005      	beq.n	800256c <HAL_RCC_GetSysClockFreq+0x34>
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	2b0c      	cmp	r3, #12
 8002564:	d121      	bne.n	80025aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d11e      	bne.n	80025aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800256c:	4b34      	ldr	r3, [pc, #208]	@ (8002640 <HAL_RCC_GetSysClockFreq+0x108>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	2b00      	cmp	r3, #0
 8002576:	d107      	bne.n	8002588 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002578:	4b31      	ldr	r3, [pc, #196]	@ (8002640 <HAL_RCC_GetSysClockFreq+0x108>)
 800257a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800257e:	0a1b      	lsrs	r3, r3, #8
 8002580:	f003 030f 	and.w	r3, r3, #15
 8002584:	61fb      	str	r3, [r7, #28]
 8002586:	e005      	b.n	8002594 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002588:	4b2d      	ldr	r3, [pc, #180]	@ (8002640 <HAL_RCC_GetSysClockFreq+0x108>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	091b      	lsrs	r3, r3, #4
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002594:	4a2b      	ldr	r2, [pc, #172]	@ (8002644 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800259c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10d      	bne.n	80025c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025a8:	e00a      	b.n	80025c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	2b04      	cmp	r3, #4
 80025ae:	d102      	bne.n	80025b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025b0:	4b25      	ldr	r3, [pc, #148]	@ (8002648 <HAL_RCC_GetSysClockFreq+0x110>)
 80025b2:	61bb      	str	r3, [r7, #24]
 80025b4:	e004      	b.n	80025c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	2b08      	cmp	r3, #8
 80025ba:	d101      	bne.n	80025c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025bc:	4b23      	ldr	r3, [pc, #140]	@ (800264c <HAL_RCC_GetSysClockFreq+0x114>)
 80025be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	2b0c      	cmp	r3, #12
 80025c4:	d134      	bne.n	8002630 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002640 <HAL_RCC_GetSysClockFreq+0x108>)
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d003      	beq.n	80025de <HAL_RCC_GetSysClockFreq+0xa6>
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	2b03      	cmp	r3, #3
 80025da:	d003      	beq.n	80025e4 <HAL_RCC_GetSysClockFreq+0xac>
 80025dc:	e005      	b.n	80025ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80025de:	4b1a      	ldr	r3, [pc, #104]	@ (8002648 <HAL_RCC_GetSysClockFreq+0x110>)
 80025e0:	617b      	str	r3, [r7, #20]
      break;
 80025e2:	e005      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80025e4:	4b19      	ldr	r3, [pc, #100]	@ (800264c <HAL_RCC_GetSysClockFreq+0x114>)
 80025e6:	617b      	str	r3, [r7, #20]
      break;
 80025e8:	e002      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	617b      	str	r3, [r7, #20]
      break;
 80025ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025f0:	4b13      	ldr	r3, [pc, #76]	@ (8002640 <HAL_RCC_GetSysClockFreq+0x108>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	091b      	lsrs	r3, r3, #4
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	3301      	adds	r3, #1
 80025fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025fe:	4b10      	ldr	r3, [pc, #64]	@ (8002640 <HAL_RCC_GetSysClockFreq+0x108>)
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	0a1b      	lsrs	r3, r3, #8
 8002604:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	fb03 f202 	mul.w	r2, r3, r2
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	fbb2 f3f3 	udiv	r3, r2, r3
 8002614:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002616:	4b0a      	ldr	r3, [pc, #40]	@ (8002640 <HAL_RCC_GetSysClockFreq+0x108>)
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	0e5b      	lsrs	r3, r3, #25
 800261c:	f003 0303 	and.w	r3, r3, #3
 8002620:	3301      	adds	r3, #1
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	fbb2 f3f3 	udiv	r3, r2, r3
 800262e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002630:	69bb      	ldr	r3, [r7, #24]
}
 8002632:	4618      	mov	r0, r3
 8002634:	3724      	adds	r7, #36	@ 0x24
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	40021000 	.word	0x40021000
 8002644:	0800474c 	.word	0x0800474c
 8002648:	00f42400 	.word	0x00f42400
 800264c:	007a1200 	.word	0x007a1200

08002650 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002654:	4b03      	ldr	r3, [pc, #12]	@ (8002664 <HAL_RCC_GetHCLKFreq+0x14>)
 8002656:	681b      	ldr	r3, [r3, #0]
}
 8002658:	4618      	mov	r0, r3
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	20000008 	.word	0x20000008

08002668 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800266c:	f7ff fff0 	bl	8002650 <HAL_RCC_GetHCLKFreq>
 8002670:	4602      	mov	r2, r0
 8002672:	4b06      	ldr	r3, [pc, #24]	@ (800268c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	0a1b      	lsrs	r3, r3, #8
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	4904      	ldr	r1, [pc, #16]	@ (8002690 <HAL_RCC_GetPCLK1Freq+0x28>)
 800267e:	5ccb      	ldrb	r3, [r1, r3]
 8002680:	f003 031f 	and.w	r3, r3, #31
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002688:	4618      	mov	r0, r3
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40021000 	.word	0x40021000
 8002690:	08004744 	.word	0x08004744

08002694 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002698:	f7ff ffda 	bl	8002650 <HAL_RCC_GetHCLKFreq>
 800269c:	4602      	mov	r2, r0
 800269e:	4b06      	ldr	r3, [pc, #24]	@ (80026b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	0adb      	lsrs	r3, r3, #11
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	4904      	ldr	r1, [pc, #16]	@ (80026bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80026aa:	5ccb      	ldrb	r3, [r1, r3]
 80026ac:	f003 031f 	and.w	r3, r3, #31
 80026b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40021000 	.word	0x40021000
 80026bc:	08004744 	.word	0x08004744

080026c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80026c8:	2300      	movs	r3, #0
 80026ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80026cc:	4b2a      	ldr	r3, [pc, #168]	@ (8002778 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80026d8:	f7ff f9ee 	bl	8001ab8 <HAL_PWREx_GetVoltageRange>
 80026dc:	6178      	str	r0, [r7, #20]
 80026de:	e014      	b.n	800270a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026e0:	4b25      	ldr	r3, [pc, #148]	@ (8002778 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e4:	4a24      	ldr	r2, [pc, #144]	@ (8002778 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80026ec:	4b22      	ldr	r3, [pc, #136]	@ (8002778 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80026f8:	f7ff f9de 	bl	8001ab8 <HAL_PWREx_GetVoltageRange>
 80026fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80026fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002778 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002702:	4a1d      	ldr	r2, [pc, #116]	@ (8002778 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002704:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002708:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002710:	d10b      	bne.n	800272a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b80      	cmp	r3, #128	@ 0x80
 8002716:	d919      	bls.n	800274c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2ba0      	cmp	r3, #160	@ 0xa0
 800271c:	d902      	bls.n	8002724 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800271e:	2302      	movs	r3, #2
 8002720:	613b      	str	r3, [r7, #16]
 8002722:	e013      	b.n	800274c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002724:	2301      	movs	r3, #1
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	e010      	b.n	800274c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b80      	cmp	r3, #128	@ 0x80
 800272e:	d902      	bls.n	8002736 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002730:	2303      	movs	r3, #3
 8002732:	613b      	str	r3, [r7, #16]
 8002734:	e00a      	b.n	800274c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b80      	cmp	r3, #128	@ 0x80
 800273a:	d102      	bne.n	8002742 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800273c:	2302      	movs	r3, #2
 800273e:	613b      	str	r3, [r7, #16]
 8002740:	e004      	b.n	800274c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b70      	cmp	r3, #112	@ 0x70
 8002746:	d101      	bne.n	800274c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002748:	2301      	movs	r3, #1
 800274a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800274c:	4b0b      	ldr	r3, [pc, #44]	@ (800277c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f023 0207 	bic.w	r2, r3, #7
 8002754:	4909      	ldr	r1, [pc, #36]	@ (800277c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	4313      	orrs	r3, r2
 800275a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800275c:	4b07      	ldr	r3, [pc, #28]	@ (800277c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	429a      	cmp	r2, r3
 8002768:	d001      	beq.n	800276e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e000      	b.n	8002770 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3718      	adds	r7, #24
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40021000 	.word	0x40021000
 800277c:	40022000 	.word	0x40022000

08002780 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002788:	2300      	movs	r3, #0
 800278a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800278c:	2300      	movs	r3, #0
 800278e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002798:	2b00      	cmp	r3, #0
 800279a:	d041      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027a0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80027a4:	d02a      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80027a6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80027aa:	d824      	bhi.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80027b0:	d008      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80027b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80027b6:	d81e      	bhi.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00a      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80027bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027c0:	d010      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80027c2:	e018      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027c4:	4b86      	ldr	r3, [pc, #536]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	4a85      	ldr	r2, [pc, #532]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027ce:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027d0:	e015      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	3304      	adds	r3, #4
 80027d6:	2100      	movs	r1, #0
 80027d8:	4618      	mov	r0, r3
 80027da:	f000 fabb 	bl	8002d54 <RCCEx_PLLSAI1_Config>
 80027de:	4603      	mov	r3, r0
 80027e0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027e2:	e00c      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3320      	adds	r3, #32
 80027e8:	2100      	movs	r1, #0
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 fba6 	bl	8002f3c <RCCEx_PLLSAI2_Config>
 80027f0:	4603      	mov	r3, r0
 80027f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027f4:	e003      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	74fb      	strb	r3, [r7, #19]
      break;
 80027fa:	e000      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80027fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027fe:	7cfb      	ldrb	r3, [r7, #19]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10b      	bne.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002804:	4b76      	ldr	r3, [pc, #472]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800280a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002812:	4973      	ldr	r1, [pc, #460]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002814:	4313      	orrs	r3, r2
 8002816:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800281a:	e001      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800281c:	7cfb      	ldrb	r3, [r7, #19]
 800281e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d041      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002830:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002834:	d02a      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002836:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800283a:	d824      	bhi.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800283c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002840:	d008      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002842:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002846:	d81e      	bhi.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00a      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800284c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002850:	d010      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002852:	e018      	b.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002854:	4b62      	ldr	r3, [pc, #392]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	4a61      	ldr	r2, [pc, #388]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800285a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800285e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002860:	e015      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3304      	adds	r3, #4
 8002866:	2100      	movs	r1, #0
 8002868:	4618      	mov	r0, r3
 800286a:	f000 fa73 	bl	8002d54 <RCCEx_PLLSAI1_Config>
 800286e:	4603      	mov	r3, r0
 8002870:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002872:	e00c      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3320      	adds	r3, #32
 8002878:	2100      	movs	r1, #0
 800287a:	4618      	mov	r0, r3
 800287c:	f000 fb5e 	bl	8002f3c <RCCEx_PLLSAI2_Config>
 8002880:	4603      	mov	r3, r0
 8002882:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002884:	e003      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	74fb      	strb	r3, [r7, #19]
      break;
 800288a:	e000      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800288c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800288e:	7cfb      	ldrb	r3, [r7, #19]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10b      	bne.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002894:	4b52      	ldr	r3, [pc, #328]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800289a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028a2:	494f      	ldr	r1, [pc, #316]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80028aa:	e001      	b.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028ac:	7cfb      	ldrb	r3, [r7, #19]
 80028ae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 80a0 	beq.w	80029fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028be:	2300      	movs	r3, #0
 80028c0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028c2:	4b47      	ldr	r3, [pc, #284]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80028ce:	2301      	movs	r3, #1
 80028d0:	e000      	b.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80028d2:	2300      	movs	r3, #0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00d      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028d8:	4b41      	ldr	r3, [pc, #260]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028dc:	4a40      	ldr	r2, [pc, #256]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80028e4:	4b3e      	ldr	r3, [pc, #248]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028f0:	2301      	movs	r3, #1
 80028f2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028f4:	4b3b      	ldr	r3, [pc, #236]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a3a      	ldr	r2, [pc, #232]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002900:	f7fe fdea 	bl	80014d8 <HAL_GetTick>
 8002904:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002906:	e009      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002908:	f7fe fde6 	bl	80014d8 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d902      	bls.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	74fb      	strb	r3, [r7, #19]
        break;
 800291a:	e005      	b.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800291c:	4b31      	ldr	r3, [pc, #196]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0ef      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002928:	7cfb      	ldrb	r3, [r7, #19]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d15c      	bne.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800292e:	4b2c      	ldr	r3, [pc, #176]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002930:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002934:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002938:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d01f      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	429a      	cmp	r2, r3
 800294a:	d019      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800294c:	4b24      	ldr	r3, [pc, #144]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800294e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002952:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002956:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002958:	4b21      	ldr	r3, [pc, #132]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800295a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800295e:	4a20      	ldr	r2, [pc, #128]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002960:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002964:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002968:	4b1d      	ldr	r3, [pc, #116]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800296a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800296e:	4a1c      	ldr	r2, [pc, #112]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002970:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002974:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002978:	4a19      	ldr	r2, [pc, #100]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d016      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298a:	f7fe fda5 	bl	80014d8 <HAL_GetTick>
 800298e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002990:	e00b      	b.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002992:	f7fe fda1 	bl	80014d8 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d902      	bls.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	74fb      	strb	r3, [r7, #19]
            break;
 80029a8:	e006      	b.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029aa:	4b0d      	ldr	r3, [pc, #52]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d0ec      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80029b8:	7cfb      	ldrb	r3, [r7, #19]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10c      	bne.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029be:	4b08      	ldr	r3, [pc, #32]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029ce:	4904      	ldr	r1, [pc, #16]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80029d6:	e009      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029d8:	7cfb      	ldrb	r3, [r7, #19]
 80029da:	74bb      	strb	r3, [r7, #18]
 80029dc:	e006      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80029de:	bf00      	nop
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029e8:	7cfb      	ldrb	r3, [r7, #19]
 80029ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029ec:	7c7b      	ldrb	r3, [r7, #17]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d105      	bne.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f2:	4b9e      	ldr	r3, [pc, #632]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f6:	4a9d      	ldr	r2, [pc, #628]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029fc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00a      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a0a:	4b98      	ldr	r3, [pc, #608]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a10:	f023 0203 	bic.w	r2, r3, #3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a18:	4994      	ldr	r1, [pc, #592]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00a      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a2c:	4b8f      	ldr	r3, [pc, #572]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a32:	f023 020c 	bic.w	r2, r3, #12
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a3a:	498c      	ldr	r1, [pc, #560]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0304 	and.w	r3, r3, #4
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00a      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a4e:	4b87      	ldr	r3, [pc, #540]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a54:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5c:	4983      	ldr	r1, [pc, #524]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0308 	and.w	r3, r3, #8
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00a      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a70:	4b7e      	ldr	r3, [pc, #504]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a76:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a7e:	497b      	ldr	r1, [pc, #492]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0310 	and.w	r3, r3, #16
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00a      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a92:	4b76      	ldr	r3, [pc, #472]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aa0:	4972      	ldr	r1, [pc, #456]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0320 	and.w	r3, r3, #32
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00a      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ab4:	4b6d      	ldr	r3, [pc, #436]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ac2:	496a      	ldr	r1, [pc, #424]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00a      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ad6:	4b65      	ldr	r3, [pc, #404]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002adc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae4:	4961      	ldr	r1, [pc, #388]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00a      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002af8:	4b5c      	ldr	r3, [pc, #368]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002afe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b06:	4959      	ldr	r1, [pc, #356]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00a      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b1a:	4b54      	ldr	r3, [pc, #336]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b20:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b28:	4950      	ldr	r1, [pc, #320]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00a      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b3c:	4b4b      	ldr	r3, [pc, #300]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b42:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b4a:	4948      	ldr	r1, [pc, #288]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00a      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b5e:	4b43      	ldr	r3, [pc, #268]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b64:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b6c:	493f      	ldr	r1, [pc, #252]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d028      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b80:	4b3a      	ldr	r3, [pc, #232]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b86:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b8e:	4937      	ldr	r1, [pc, #220]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b9e:	d106      	bne.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ba0:	4b32      	ldr	r3, [pc, #200]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	4a31      	ldr	r2, [pc, #196]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002baa:	60d3      	str	r3, [r2, #12]
 8002bac:	e011      	b.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bb2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002bb6:	d10c      	bne.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3304      	adds	r3, #4
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 f8c8 	bl	8002d54 <RCCEx_PLLSAI1_Config>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002bc8:	7cfb      	ldrb	r3, [r7, #19]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002bce:	7cfb      	ldrb	r3, [r7, #19]
 8002bd0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d028      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002bde:	4b23      	ldr	r3, [pc, #140]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002be4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bec:	491f      	ldr	r1, [pc, #124]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bf8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002bfc:	d106      	bne.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bfe:	4b1b      	ldr	r3, [pc, #108]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	4a1a      	ldr	r2, [pc, #104]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c04:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c08:	60d3      	str	r3, [r2, #12]
 8002c0a:	e011      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c10:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c14:	d10c      	bne.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	3304      	adds	r3, #4
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f000 f899 	bl	8002d54 <RCCEx_PLLSAI1_Config>
 8002c22:	4603      	mov	r3, r0
 8002c24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c26:	7cfb      	ldrb	r3, [r7, #19]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002c2c:	7cfb      	ldrb	r3, [r7, #19]
 8002c2e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d02b      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c42:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c4a:	4908      	ldr	r1, [pc, #32]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c5a:	d109      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c5c:	4b03      	ldr	r3, [pc, #12]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	4a02      	ldr	r2, [pc, #8]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c66:	60d3      	str	r3, [r2, #12]
 8002c68:	e014      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002c6a:	bf00      	nop
 8002c6c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c78:	d10c      	bne.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	2101      	movs	r1, #1
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 f867 	bl	8002d54 <RCCEx_PLLSAI1_Config>
 8002c86:	4603      	mov	r3, r0
 8002c88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c8a:	7cfb      	ldrb	r3, [r7, #19]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002c90:	7cfb      	ldrb	r3, [r7, #19]
 8002c92:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d02f      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ca0:	4b2b      	ldr	r3, [pc, #172]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ca6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002cae:	4928      	ldr	r1, [pc, #160]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002cba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002cbe:	d10d      	bne.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3304      	adds	r3, #4
 8002cc4:	2102      	movs	r1, #2
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 f844 	bl	8002d54 <RCCEx_PLLSAI1_Config>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cd0:	7cfb      	ldrb	r3, [r7, #19]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d014      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002cd6:	7cfb      	ldrb	r3, [r7, #19]
 8002cd8:	74bb      	strb	r3, [r7, #18]
 8002cda:	e011      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ce0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ce4:	d10c      	bne.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	3320      	adds	r3, #32
 8002cea:	2102      	movs	r1, #2
 8002cec:	4618      	mov	r0, r3
 8002cee:	f000 f925 	bl	8002f3c <RCCEx_PLLSAI2_Config>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cf6:	7cfb      	ldrb	r3, [r7, #19]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002cfc:	7cfb      	ldrb	r3, [r7, #19]
 8002cfe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00a      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d0c:	4b10      	ldr	r3, [pc, #64]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d12:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d1a:	490d      	ldr	r1, [pc, #52]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00b      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d2e:	4b08      	ldr	r3, [pc, #32]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d34:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d3e:	4904      	ldr	r1, [pc, #16]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d46:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3718      	adds	r7, #24
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40021000 	.word	0x40021000

08002d54 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d62:	4b75      	ldr	r3, [pc, #468]	@ (8002f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	f003 0303 	and.w	r3, r3, #3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d018      	beq.n	8002da0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d6e:	4b72      	ldr	r3, [pc, #456]	@ (8002f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	f003 0203 	and.w	r2, r3, #3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d10d      	bne.n	8002d9a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
       ||
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d009      	beq.n	8002d9a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d86:	4b6c      	ldr	r3, [pc, #432]	@ (8002f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	091b      	lsrs	r3, r3, #4
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	1c5a      	adds	r2, r3, #1
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
       ||
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d047      	beq.n	8002e2a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	73fb      	strb	r3, [r7, #15]
 8002d9e:	e044      	b.n	8002e2a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b03      	cmp	r3, #3
 8002da6:	d018      	beq.n	8002dda <RCCEx_PLLSAI1_Config+0x86>
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	d825      	bhi.n	8002df8 <RCCEx_PLLSAI1_Config+0xa4>
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d002      	beq.n	8002db6 <RCCEx_PLLSAI1_Config+0x62>
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d009      	beq.n	8002dc8 <RCCEx_PLLSAI1_Config+0x74>
 8002db4:	e020      	b.n	8002df8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002db6:	4b60      	ldr	r3, [pc, #384]	@ (8002f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d11d      	bne.n	8002dfe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dc6:	e01a      	b.n	8002dfe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002dc8:	4b5b      	ldr	r3, [pc, #364]	@ (8002f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d116      	bne.n	8002e02 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dd8:	e013      	b.n	8002e02 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002dda:	4b57      	ldr	r3, [pc, #348]	@ (8002f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d10f      	bne.n	8002e06 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002de6:	4b54      	ldr	r3, [pc, #336]	@ (8002f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d109      	bne.n	8002e06 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002df6:	e006      	b.n	8002e06 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8002dfc:	e004      	b.n	8002e08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dfe:	bf00      	nop
 8002e00:	e002      	b.n	8002e08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e02:	bf00      	nop
 8002e04:	e000      	b.n	8002e08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e06:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10d      	bne.n	8002e2a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e0e:	4b4a      	ldr	r3, [pc, #296]	@ (8002f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6819      	ldr	r1, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	011b      	lsls	r3, r3, #4
 8002e22:	430b      	orrs	r3, r1
 8002e24:	4944      	ldr	r1, [pc, #272]	@ (8002f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d17d      	bne.n	8002f2c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e30:	4b41      	ldr	r3, [pc, #260]	@ (8002f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a40      	ldr	r2, [pc, #256]	@ (8002f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e36:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002e3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e3c:	f7fe fb4c 	bl	80014d8 <HAL_GetTick>
 8002e40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e42:	e009      	b.n	8002e58 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e44:	f7fe fb48 	bl	80014d8 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d902      	bls.n	8002e58 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	73fb      	strb	r3, [r7, #15]
        break;
 8002e56:	e005      	b.n	8002e64 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e58:	4b37      	ldr	r3, [pc, #220]	@ (8002f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1ef      	bne.n	8002e44 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d160      	bne.n	8002f2c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d111      	bne.n	8002e94 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e70:	4b31      	ldr	r3, [pc, #196]	@ (8002f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002e78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	6892      	ldr	r2, [r2, #8]
 8002e80:	0211      	lsls	r1, r2, #8
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	68d2      	ldr	r2, [r2, #12]
 8002e86:	0912      	lsrs	r2, r2, #4
 8002e88:	0452      	lsls	r2, r2, #17
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	492a      	ldr	r1, [pc, #168]	@ (8002f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	610b      	str	r3, [r1, #16]
 8002e92:	e027      	b.n	8002ee4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d112      	bne.n	8002ec0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e9a:	4b27      	ldr	r3, [pc, #156]	@ (8002f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002ea2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	6892      	ldr	r2, [r2, #8]
 8002eaa:	0211      	lsls	r1, r2, #8
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6912      	ldr	r2, [r2, #16]
 8002eb0:	0852      	lsrs	r2, r2, #1
 8002eb2:	3a01      	subs	r2, #1
 8002eb4:	0552      	lsls	r2, r2, #21
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	491f      	ldr	r1, [pc, #124]	@ (8002f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	610b      	str	r3, [r1, #16]
 8002ebe:	e011      	b.n	8002ee4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8002f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002ec8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	6892      	ldr	r2, [r2, #8]
 8002ed0:	0211      	lsls	r1, r2, #8
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	6952      	ldr	r2, [r2, #20]
 8002ed6:	0852      	lsrs	r2, r2, #1
 8002ed8:	3a01      	subs	r2, #1
 8002eda:	0652      	lsls	r2, r2, #25
 8002edc:	430a      	orrs	r2, r1
 8002ede:	4916      	ldr	r1, [pc, #88]	@ (8002f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ee4:	4b14      	ldr	r3, [pc, #80]	@ (8002f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a13      	ldr	r2, [pc, #76]	@ (8002f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002eee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef0:	f7fe faf2 	bl	80014d8 <HAL_GetTick>
 8002ef4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ef6:	e009      	b.n	8002f0c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ef8:	f7fe faee 	bl	80014d8 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d902      	bls.n	8002f0c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	73fb      	strb	r3, [r7, #15]
          break;
 8002f0a:	e005      	b.n	8002f18 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0ef      	beq.n	8002ef8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002f18:	7bfb      	ldrb	r3, [r7, #15]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d106      	bne.n	8002f2c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f1e:	4b06      	ldr	r3, [pc, #24]	@ (8002f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f20:	691a      	ldr	r2, [r3, #16]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	4904      	ldr	r1, [pc, #16]	@ (8002f38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	40021000 	.word	0x40021000

08002f3c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f46:	2300      	movs	r3, #0
 8002f48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f4a:	4b6a      	ldr	r3, [pc, #424]	@ (80030f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	f003 0303 	and.w	r3, r3, #3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d018      	beq.n	8002f88 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002f56:	4b67      	ldr	r3, [pc, #412]	@ (80030f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f003 0203 	and.w	r2, r3, #3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d10d      	bne.n	8002f82 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
       ||
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d009      	beq.n	8002f82 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002f6e:	4b61      	ldr	r3, [pc, #388]	@ (80030f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	091b      	lsrs	r3, r3, #4
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	1c5a      	adds	r2, r3, #1
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
       ||
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d047      	beq.n	8003012 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	73fb      	strb	r3, [r7, #15]
 8002f86:	e044      	b.n	8003012 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2b03      	cmp	r3, #3
 8002f8e:	d018      	beq.n	8002fc2 <RCCEx_PLLSAI2_Config+0x86>
 8002f90:	2b03      	cmp	r3, #3
 8002f92:	d825      	bhi.n	8002fe0 <RCCEx_PLLSAI2_Config+0xa4>
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d002      	beq.n	8002f9e <RCCEx_PLLSAI2_Config+0x62>
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d009      	beq.n	8002fb0 <RCCEx_PLLSAI2_Config+0x74>
 8002f9c:	e020      	b.n	8002fe0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f9e:	4b55      	ldr	r3, [pc, #340]	@ (80030f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d11d      	bne.n	8002fe6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fae:	e01a      	b.n	8002fe6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002fb0:	4b50      	ldr	r3, [pc, #320]	@ (80030f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d116      	bne.n	8002fea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fc0:	e013      	b.n	8002fea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002fc2:	4b4c      	ldr	r3, [pc, #304]	@ (80030f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10f      	bne.n	8002fee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002fce:	4b49      	ldr	r3, [pc, #292]	@ (80030f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d109      	bne.n	8002fee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002fde:	e006      	b.n	8002fee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	73fb      	strb	r3, [r7, #15]
      break;
 8002fe4:	e004      	b.n	8002ff0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fe6:	bf00      	nop
 8002fe8:	e002      	b.n	8002ff0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fea:	bf00      	nop
 8002fec:	e000      	b.n	8002ff0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fee:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ff0:	7bfb      	ldrb	r3, [r7, #15]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10d      	bne.n	8003012 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ff6:	4b3f      	ldr	r3, [pc, #252]	@ (80030f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6819      	ldr	r1, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	3b01      	subs	r3, #1
 8003008:	011b      	lsls	r3, r3, #4
 800300a:	430b      	orrs	r3, r1
 800300c:	4939      	ldr	r1, [pc, #228]	@ (80030f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800300e:	4313      	orrs	r3, r2
 8003010:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003012:	7bfb      	ldrb	r3, [r7, #15]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d167      	bne.n	80030e8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003018:	4b36      	ldr	r3, [pc, #216]	@ (80030f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a35      	ldr	r2, [pc, #212]	@ (80030f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800301e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003022:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003024:	f7fe fa58 	bl	80014d8 <HAL_GetTick>
 8003028:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800302a:	e009      	b.n	8003040 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800302c:	f7fe fa54 	bl	80014d8 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d902      	bls.n	8003040 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	73fb      	strb	r3, [r7, #15]
        break;
 800303e:	e005      	b.n	800304c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003040:	4b2c      	ldr	r3, [pc, #176]	@ (80030f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1ef      	bne.n	800302c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800304c:	7bfb      	ldrb	r3, [r7, #15]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d14a      	bne.n	80030e8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d111      	bne.n	800307c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003058:	4b26      	ldr	r3, [pc, #152]	@ (80030f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003060:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	6892      	ldr	r2, [r2, #8]
 8003068:	0211      	lsls	r1, r2, #8
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	68d2      	ldr	r2, [r2, #12]
 800306e:	0912      	lsrs	r2, r2, #4
 8003070:	0452      	lsls	r2, r2, #17
 8003072:	430a      	orrs	r2, r1
 8003074:	491f      	ldr	r1, [pc, #124]	@ (80030f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003076:	4313      	orrs	r3, r2
 8003078:	614b      	str	r3, [r1, #20]
 800307a:	e011      	b.n	80030a0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800307c:	4b1d      	ldr	r3, [pc, #116]	@ (80030f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003084:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	6892      	ldr	r2, [r2, #8]
 800308c:	0211      	lsls	r1, r2, #8
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6912      	ldr	r2, [r2, #16]
 8003092:	0852      	lsrs	r2, r2, #1
 8003094:	3a01      	subs	r2, #1
 8003096:	0652      	lsls	r2, r2, #25
 8003098:	430a      	orrs	r2, r1
 800309a:	4916      	ldr	r1, [pc, #88]	@ (80030f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800309c:	4313      	orrs	r3, r2
 800309e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80030a0:	4b14      	ldr	r3, [pc, #80]	@ (80030f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a13      	ldr	r2, [pc, #76]	@ (80030f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ac:	f7fe fa14 	bl	80014d8 <HAL_GetTick>
 80030b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030b2:	e009      	b.n	80030c8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80030b4:	f7fe fa10 	bl	80014d8 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d902      	bls.n	80030c8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	73fb      	strb	r3, [r7, #15]
          break;
 80030c6:	e005      	b.n	80030d4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030c8:	4b0a      	ldr	r3, [pc, #40]	@ (80030f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0ef      	beq.n	80030b4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80030d4:	7bfb      	ldrb	r3, [r7, #15]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d106      	bne.n	80030e8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80030da:	4b06      	ldr	r3, [pc, #24]	@ (80030f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030dc:	695a      	ldr	r2, [r3, #20]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	4904      	ldr	r1, [pc, #16]	@ (80030f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80030e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40021000 	.word	0x40021000

080030f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e095      	b.n	8003236 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310e:	2b00      	cmp	r3, #0
 8003110:	d108      	bne.n	8003124 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800311a:	d009      	beq.n	8003130 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	61da      	str	r2, [r3, #28]
 8003122:	e005      	b.n	8003130 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d106      	bne.n	8003150 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7fd fff6 	bl	800113c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2202      	movs	r2, #2
 8003154:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003166:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003170:	d902      	bls.n	8003178 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003172:	2300      	movs	r3, #0
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	e002      	b.n	800317e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003178:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800317c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003186:	d007      	beq.n	8003198 <HAL_SPI_Init+0xa0>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003190:	d002      	beq.n	8003198 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80031a8:	431a      	orrs	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	431a      	orrs	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	695b      	ldr	r3, [r3, #20]
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	431a      	orrs	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031c6:	431a      	orrs	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	69db      	ldr	r3, [r3, #28]
 80031cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031d0:	431a      	orrs	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031da:	ea42 0103 	orr.w	r1, r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	0c1b      	lsrs	r3, r3, #16
 80031f4:	f003 0204 	and.w	r2, r3, #4
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fc:	f003 0310 	and.w	r3, r3, #16
 8003200:	431a      	orrs	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003206:	f003 0308 	and.w	r3, r3, #8
 800320a:	431a      	orrs	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003214:	ea42 0103 	orr.w	r1, r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b088      	sub	sp, #32
 8003242:	af00      	add	r7, sp, #0
 8003244:	60f8      	str	r0, [r7, #12]
 8003246:	60b9      	str	r1, [r7, #8]
 8003248:	603b      	str	r3, [r7, #0]
 800324a:	4613      	mov	r3, r2
 800324c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800324e:	f7fe f943 	bl	80014d8 <HAL_GetTick>
 8003252:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003254:	88fb      	ldrh	r3, [r7, #6]
 8003256:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b01      	cmp	r3, #1
 8003262:	d001      	beq.n	8003268 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003264:	2302      	movs	r3, #2
 8003266:	e15c      	b.n	8003522 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d002      	beq.n	8003274 <HAL_SPI_Transmit+0x36>
 800326e:	88fb      	ldrh	r3, [r7, #6]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e154      	b.n	8003522 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800327e:	2b01      	cmp	r3, #1
 8003280:	d101      	bne.n	8003286 <HAL_SPI_Transmit+0x48>
 8003282:	2302      	movs	r3, #2
 8003284:	e14d      	b.n	8003522 <HAL_SPI_Transmit+0x2e4>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2203      	movs	r2, #3
 8003292:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	68ba      	ldr	r2, [r7, #8]
 80032a0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	88fa      	ldrh	r2, [r7, #6]
 80032a6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	88fa      	ldrh	r2, [r7, #6]
 80032ac:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032d8:	d10f      	bne.n	80032fa <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003304:	2b40      	cmp	r3, #64	@ 0x40
 8003306:	d007      	beq.n	8003318 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003316:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003320:	d952      	bls.n	80033c8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d002      	beq.n	8003330 <HAL_SPI_Transmit+0xf2>
 800332a:	8b7b      	ldrh	r3, [r7, #26]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d145      	bne.n	80033bc <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003334:	881a      	ldrh	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003340:	1c9a      	adds	r2, r3, #2
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800334a:	b29b      	uxth	r3, r3
 800334c:	3b01      	subs	r3, #1
 800334e:	b29a      	uxth	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003354:	e032      	b.n	80033bc <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b02      	cmp	r3, #2
 8003362:	d112      	bne.n	800338a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003368:	881a      	ldrh	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003374:	1c9a      	adds	r2, r3, #2
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800337e:	b29b      	uxth	r3, r3
 8003380:	3b01      	subs	r3, #1
 8003382:	b29a      	uxth	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003388:	e018      	b.n	80033bc <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800338a:	f7fe f8a5 	bl	80014d8 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	429a      	cmp	r2, r3
 8003398:	d803      	bhi.n	80033a2 <HAL_SPI_Transmit+0x164>
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a0:	d102      	bne.n	80033a8 <HAL_SPI_Transmit+0x16a>
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d109      	bne.n	80033bc <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e0b2      	b.n	8003522 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1c7      	bne.n	8003356 <HAL_SPI_Transmit+0x118>
 80033c6:	e083      	b.n	80034d0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d002      	beq.n	80033d6 <HAL_SPI_Transmit+0x198>
 80033d0:	8b7b      	ldrh	r3, [r7, #26]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d177      	bne.n	80034c6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033da:	b29b      	uxth	r3, r3
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d912      	bls.n	8003406 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033e4:	881a      	ldrh	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033f0:	1c9a      	adds	r2, r3, #2
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	3b02      	subs	r3, #2
 80033fe:	b29a      	uxth	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003404:	e05f      	b.n	80034c6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	330c      	adds	r3, #12
 8003410:	7812      	ldrb	r2, [r2, #0]
 8003412:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003418:	1c5a      	adds	r2, r3, #1
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003422:	b29b      	uxth	r3, r3
 8003424:	3b01      	subs	r3, #1
 8003426:	b29a      	uxth	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800342c:	e04b      	b.n	80034c6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b02      	cmp	r3, #2
 800343a:	d12b      	bne.n	8003494 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003440:	b29b      	uxth	r3, r3
 8003442:	2b01      	cmp	r3, #1
 8003444:	d912      	bls.n	800346c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800344a:	881a      	ldrh	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003456:	1c9a      	adds	r2, r3, #2
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003460:	b29b      	uxth	r3, r3
 8003462:	3b02      	subs	r3, #2
 8003464:	b29a      	uxth	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800346a:	e02c      	b.n	80034c6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	330c      	adds	r3, #12
 8003476:	7812      	ldrb	r2, [r2, #0]
 8003478:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800347e:	1c5a      	adds	r2, r3, #1
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003488:	b29b      	uxth	r3, r3
 800348a:	3b01      	subs	r3, #1
 800348c:	b29a      	uxth	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003492:	e018      	b.n	80034c6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003494:	f7fe f820 	bl	80014d8 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d803      	bhi.n	80034ac <HAL_SPI_Transmit+0x26e>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034aa:	d102      	bne.n	80034b2 <HAL_SPI_Transmit+0x274>
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d109      	bne.n	80034c6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e02d      	b.n	8003522 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1ae      	bne.n	800342e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034d0:	69fa      	ldr	r2, [r7, #28]
 80034d2:	6839      	ldr	r1, [r7, #0]
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f000 f947 	bl	8003768 <SPI_EndRxTxTransaction>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d002      	beq.n	80034e6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2220      	movs	r2, #32
 80034e4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10a      	bne.n	8003504 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034ee:	2300      	movs	r3, #0
 80034f0:	617b      	str	r3, [r7, #20]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	617b      	str	r3, [r7, #20]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	617b      	str	r3, [r7, #20]
 8003502:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e000      	b.n	8003522 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003520:	2300      	movs	r3, #0
  }
}
 8003522:	4618      	mov	r0, r3
 8003524:	3720      	adds	r7, #32
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
	...

0800352c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b088      	sub	sp, #32
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	603b      	str	r3, [r7, #0]
 8003538:	4613      	mov	r3, r2
 800353a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800353c:	f7fd ffcc 	bl	80014d8 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003544:	1a9b      	subs	r3, r3, r2
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	4413      	add	r3, r2
 800354a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800354c:	f7fd ffc4 	bl	80014d8 <HAL_GetTick>
 8003550:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003552:	4b39      	ldr	r3, [pc, #228]	@ (8003638 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	015b      	lsls	r3, r3, #5
 8003558:	0d1b      	lsrs	r3, r3, #20
 800355a:	69fa      	ldr	r2, [r7, #28]
 800355c:	fb02 f303 	mul.w	r3, r2, r3
 8003560:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003562:	e054      	b.n	800360e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356a:	d050      	beq.n	800360e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800356c:	f7fd ffb4 	bl	80014d8 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	69fa      	ldr	r2, [r7, #28]
 8003578:	429a      	cmp	r2, r3
 800357a:	d902      	bls.n	8003582 <SPI_WaitFlagStateUntilTimeout+0x56>
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d13d      	bne.n	80035fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003590:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800359a:	d111      	bne.n	80035c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035a4:	d004      	beq.n	80035b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035ae:	d107      	bne.n	80035c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035c8:	d10f      	bne.n	80035ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e017      	b.n	800362e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003604:	2300      	movs	r3, #0
 8003606:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	3b01      	subs	r3, #1
 800360c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	4013      	ands	r3, r2
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	429a      	cmp	r2, r3
 800361c:	bf0c      	ite	eq
 800361e:	2301      	moveq	r3, #1
 8003620:	2300      	movne	r3, #0
 8003622:	b2db      	uxtb	r3, r3
 8003624:	461a      	mov	r2, r3
 8003626:	79fb      	ldrb	r3, [r7, #7]
 8003628:	429a      	cmp	r2, r3
 800362a:	d19b      	bne.n	8003564 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3720      	adds	r7, #32
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	20000008 	.word	0x20000008

0800363c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b08a      	sub	sp, #40	@ 0x28
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
 8003648:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800364a:	2300      	movs	r3, #0
 800364c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800364e:	f7fd ff43 	bl	80014d8 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003656:	1a9b      	subs	r3, r3, r2
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	4413      	add	r3, r2
 800365c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800365e:	f7fd ff3b 	bl	80014d8 <HAL_GetTick>
 8003662:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	330c      	adds	r3, #12
 800366a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800366c:	4b3d      	ldr	r3, [pc, #244]	@ (8003764 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	4613      	mov	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	00da      	lsls	r2, r3, #3
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	0d1b      	lsrs	r3, r3, #20
 800367c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800367e:	fb02 f303 	mul.w	r3, r2, r3
 8003682:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003684:	e060      	b.n	8003748 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800368c:	d107      	bne.n	800369e <SPI_WaitFifoStateUntilTimeout+0x62>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d104      	bne.n	800369e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	b2db      	uxtb	r3, r3
 800369a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800369c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a4:	d050      	beq.n	8003748 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036a6:	f7fd ff17 	bl	80014d8 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	6a3b      	ldr	r3, [r7, #32]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d902      	bls.n	80036bc <SPI_WaitFifoStateUntilTimeout+0x80>
 80036b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d13d      	bne.n	8003738 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80036ca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036d4:	d111      	bne.n	80036fa <SPI_WaitFifoStateUntilTimeout+0xbe>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036de:	d004      	beq.n	80036ea <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036e8:	d107      	bne.n	80036fa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003702:	d10f      	bne.n	8003724 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003722:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e010      	b.n	800375a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800373e:	2300      	movs	r3, #0
 8003740:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	3b01      	subs	r3, #1
 8003746:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689a      	ldr	r2, [r3, #8]
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	4013      	ands	r3, r2
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	429a      	cmp	r2, r3
 8003756:	d196      	bne.n	8003686 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3728      	adds	r7, #40	@ 0x28
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	20000008 	.word	0x20000008

08003768 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af02      	add	r7, sp, #8
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	2200      	movs	r2, #0
 800377c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f7ff ff5b 	bl	800363c <SPI_WaitFifoStateUntilTimeout>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d007      	beq.n	800379c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003790:	f043 0220 	orr.w	r2, r3, #32
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e027      	b.n	80037ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2200      	movs	r2, #0
 80037a4:	2180      	movs	r1, #128	@ 0x80
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f7ff fec0 	bl	800352c <SPI_WaitFlagStateUntilTimeout>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d007      	beq.n	80037c2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037b6:	f043 0220 	orr.w	r2, r3, #32
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e014      	b.n	80037ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f7ff ff34 	bl	800363c <SPI_WaitFifoStateUntilTimeout>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d007      	beq.n	80037ea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037de:	f043 0220 	orr.w	r2, r3, #32
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e000      	b.n	80037ec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e040      	b.n	8003888 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800380a:	2b00      	cmp	r3, #0
 800380c:	d106      	bne.n	800381c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7fd fd68 	bl	80012ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2224      	movs	r2, #36	@ 0x24
 8003820:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0201 	bic.w	r2, r2, #1
 8003830:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003836:	2b00      	cmp	r3, #0
 8003838:	d002      	beq.n	8003840 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 fae0 	bl	8003e00 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f825 	bl	8003890 <UART_SetConfig>
 8003846:	4603      	mov	r3, r0
 8003848:	2b01      	cmp	r3, #1
 800384a:	d101      	bne.n	8003850 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e01b      	b.n	8003888 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800385e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689a      	ldr	r2, [r3, #8]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800386e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0201 	orr.w	r2, r2, #1
 800387e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 fb5f 	bl	8003f44 <UART_CheckIdleState>
 8003886:	4603      	mov	r3, r0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3708      	adds	r7, #8
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003890:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003894:	b08a      	sub	sp, #40	@ 0x28
 8003896:	af00      	add	r7, sp, #0
 8003898:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800389a:	2300      	movs	r3, #0
 800389c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	431a      	orrs	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	431a      	orrs	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	69db      	ldr	r3, [r3, #28]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	4ba4      	ldr	r3, [pc, #656]	@ (8003b50 <UART_SetConfig+0x2c0>)
 80038c0:	4013      	ands	r3, r2
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	6812      	ldr	r2, [r2, #0]
 80038c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80038c8:	430b      	orrs	r3, r1
 80038ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	68da      	ldr	r2, [r3, #12]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a99      	ldr	r2, [pc, #612]	@ (8003b54 <UART_SetConfig+0x2c4>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d004      	beq.n	80038fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038f8:	4313      	orrs	r3, r2
 80038fa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800390c:	430a      	orrs	r2, r1
 800390e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a90      	ldr	r2, [pc, #576]	@ (8003b58 <UART_SetConfig+0x2c8>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d126      	bne.n	8003968 <UART_SetConfig+0xd8>
 800391a:	4b90      	ldr	r3, [pc, #576]	@ (8003b5c <UART_SetConfig+0x2cc>)
 800391c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003920:	f003 0303 	and.w	r3, r3, #3
 8003924:	2b03      	cmp	r3, #3
 8003926:	d81b      	bhi.n	8003960 <UART_SetConfig+0xd0>
 8003928:	a201      	add	r2, pc, #4	@ (adr r2, 8003930 <UART_SetConfig+0xa0>)
 800392a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800392e:	bf00      	nop
 8003930:	08003941 	.word	0x08003941
 8003934:	08003951 	.word	0x08003951
 8003938:	08003949 	.word	0x08003949
 800393c:	08003959 	.word	0x08003959
 8003940:	2301      	movs	r3, #1
 8003942:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003946:	e116      	b.n	8003b76 <UART_SetConfig+0x2e6>
 8003948:	2302      	movs	r3, #2
 800394a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800394e:	e112      	b.n	8003b76 <UART_SetConfig+0x2e6>
 8003950:	2304      	movs	r3, #4
 8003952:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003956:	e10e      	b.n	8003b76 <UART_SetConfig+0x2e6>
 8003958:	2308      	movs	r3, #8
 800395a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800395e:	e10a      	b.n	8003b76 <UART_SetConfig+0x2e6>
 8003960:	2310      	movs	r3, #16
 8003962:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003966:	e106      	b.n	8003b76 <UART_SetConfig+0x2e6>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a7c      	ldr	r2, [pc, #496]	@ (8003b60 <UART_SetConfig+0x2d0>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d138      	bne.n	80039e4 <UART_SetConfig+0x154>
 8003972:	4b7a      	ldr	r3, [pc, #488]	@ (8003b5c <UART_SetConfig+0x2cc>)
 8003974:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003978:	f003 030c 	and.w	r3, r3, #12
 800397c:	2b0c      	cmp	r3, #12
 800397e:	d82d      	bhi.n	80039dc <UART_SetConfig+0x14c>
 8003980:	a201      	add	r2, pc, #4	@ (adr r2, 8003988 <UART_SetConfig+0xf8>)
 8003982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003986:	bf00      	nop
 8003988:	080039bd 	.word	0x080039bd
 800398c:	080039dd 	.word	0x080039dd
 8003990:	080039dd 	.word	0x080039dd
 8003994:	080039dd 	.word	0x080039dd
 8003998:	080039cd 	.word	0x080039cd
 800399c:	080039dd 	.word	0x080039dd
 80039a0:	080039dd 	.word	0x080039dd
 80039a4:	080039dd 	.word	0x080039dd
 80039a8:	080039c5 	.word	0x080039c5
 80039ac:	080039dd 	.word	0x080039dd
 80039b0:	080039dd 	.word	0x080039dd
 80039b4:	080039dd 	.word	0x080039dd
 80039b8:	080039d5 	.word	0x080039d5
 80039bc:	2300      	movs	r3, #0
 80039be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039c2:	e0d8      	b.n	8003b76 <UART_SetConfig+0x2e6>
 80039c4:	2302      	movs	r3, #2
 80039c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039ca:	e0d4      	b.n	8003b76 <UART_SetConfig+0x2e6>
 80039cc:	2304      	movs	r3, #4
 80039ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039d2:	e0d0      	b.n	8003b76 <UART_SetConfig+0x2e6>
 80039d4:	2308      	movs	r3, #8
 80039d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039da:	e0cc      	b.n	8003b76 <UART_SetConfig+0x2e6>
 80039dc:	2310      	movs	r3, #16
 80039de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039e2:	e0c8      	b.n	8003b76 <UART_SetConfig+0x2e6>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a5e      	ldr	r2, [pc, #376]	@ (8003b64 <UART_SetConfig+0x2d4>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d125      	bne.n	8003a3a <UART_SetConfig+0x1aa>
 80039ee:	4b5b      	ldr	r3, [pc, #364]	@ (8003b5c <UART_SetConfig+0x2cc>)
 80039f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039f4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80039f8:	2b30      	cmp	r3, #48	@ 0x30
 80039fa:	d016      	beq.n	8003a2a <UART_SetConfig+0x19a>
 80039fc:	2b30      	cmp	r3, #48	@ 0x30
 80039fe:	d818      	bhi.n	8003a32 <UART_SetConfig+0x1a2>
 8003a00:	2b20      	cmp	r3, #32
 8003a02:	d00a      	beq.n	8003a1a <UART_SetConfig+0x18a>
 8003a04:	2b20      	cmp	r3, #32
 8003a06:	d814      	bhi.n	8003a32 <UART_SetConfig+0x1a2>
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d002      	beq.n	8003a12 <UART_SetConfig+0x182>
 8003a0c:	2b10      	cmp	r3, #16
 8003a0e:	d008      	beq.n	8003a22 <UART_SetConfig+0x192>
 8003a10:	e00f      	b.n	8003a32 <UART_SetConfig+0x1a2>
 8003a12:	2300      	movs	r3, #0
 8003a14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a18:	e0ad      	b.n	8003b76 <UART_SetConfig+0x2e6>
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a20:	e0a9      	b.n	8003b76 <UART_SetConfig+0x2e6>
 8003a22:	2304      	movs	r3, #4
 8003a24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a28:	e0a5      	b.n	8003b76 <UART_SetConfig+0x2e6>
 8003a2a:	2308      	movs	r3, #8
 8003a2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a30:	e0a1      	b.n	8003b76 <UART_SetConfig+0x2e6>
 8003a32:	2310      	movs	r3, #16
 8003a34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a38:	e09d      	b.n	8003b76 <UART_SetConfig+0x2e6>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a4a      	ldr	r2, [pc, #296]	@ (8003b68 <UART_SetConfig+0x2d8>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d125      	bne.n	8003a90 <UART_SetConfig+0x200>
 8003a44:	4b45      	ldr	r3, [pc, #276]	@ (8003b5c <UART_SetConfig+0x2cc>)
 8003a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a4a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003a4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a50:	d016      	beq.n	8003a80 <UART_SetConfig+0x1f0>
 8003a52:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a54:	d818      	bhi.n	8003a88 <UART_SetConfig+0x1f8>
 8003a56:	2b80      	cmp	r3, #128	@ 0x80
 8003a58:	d00a      	beq.n	8003a70 <UART_SetConfig+0x1e0>
 8003a5a:	2b80      	cmp	r3, #128	@ 0x80
 8003a5c:	d814      	bhi.n	8003a88 <UART_SetConfig+0x1f8>
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d002      	beq.n	8003a68 <UART_SetConfig+0x1d8>
 8003a62:	2b40      	cmp	r3, #64	@ 0x40
 8003a64:	d008      	beq.n	8003a78 <UART_SetConfig+0x1e8>
 8003a66:	e00f      	b.n	8003a88 <UART_SetConfig+0x1f8>
 8003a68:	2300      	movs	r3, #0
 8003a6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a6e:	e082      	b.n	8003b76 <UART_SetConfig+0x2e6>
 8003a70:	2302      	movs	r3, #2
 8003a72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a76:	e07e      	b.n	8003b76 <UART_SetConfig+0x2e6>
 8003a78:	2304      	movs	r3, #4
 8003a7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a7e:	e07a      	b.n	8003b76 <UART_SetConfig+0x2e6>
 8003a80:	2308      	movs	r3, #8
 8003a82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a86:	e076      	b.n	8003b76 <UART_SetConfig+0x2e6>
 8003a88:	2310      	movs	r3, #16
 8003a8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a8e:	e072      	b.n	8003b76 <UART_SetConfig+0x2e6>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a35      	ldr	r2, [pc, #212]	@ (8003b6c <UART_SetConfig+0x2dc>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d12a      	bne.n	8003af0 <UART_SetConfig+0x260>
 8003a9a:	4b30      	ldr	r3, [pc, #192]	@ (8003b5c <UART_SetConfig+0x2cc>)
 8003a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aa0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003aa4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003aa8:	d01a      	beq.n	8003ae0 <UART_SetConfig+0x250>
 8003aaa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003aae:	d81b      	bhi.n	8003ae8 <UART_SetConfig+0x258>
 8003ab0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ab4:	d00c      	beq.n	8003ad0 <UART_SetConfig+0x240>
 8003ab6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003aba:	d815      	bhi.n	8003ae8 <UART_SetConfig+0x258>
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <UART_SetConfig+0x238>
 8003ac0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ac4:	d008      	beq.n	8003ad8 <UART_SetConfig+0x248>
 8003ac6:	e00f      	b.n	8003ae8 <UART_SetConfig+0x258>
 8003ac8:	2300      	movs	r3, #0
 8003aca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ace:	e052      	b.n	8003b76 <UART_SetConfig+0x2e6>
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ad6:	e04e      	b.n	8003b76 <UART_SetConfig+0x2e6>
 8003ad8:	2304      	movs	r3, #4
 8003ada:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ade:	e04a      	b.n	8003b76 <UART_SetConfig+0x2e6>
 8003ae0:	2308      	movs	r3, #8
 8003ae2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ae6:	e046      	b.n	8003b76 <UART_SetConfig+0x2e6>
 8003ae8:	2310      	movs	r3, #16
 8003aea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aee:	e042      	b.n	8003b76 <UART_SetConfig+0x2e6>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a17      	ldr	r2, [pc, #92]	@ (8003b54 <UART_SetConfig+0x2c4>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d13a      	bne.n	8003b70 <UART_SetConfig+0x2e0>
 8003afa:	4b18      	ldr	r3, [pc, #96]	@ (8003b5c <UART_SetConfig+0x2cc>)
 8003afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b00:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003b04:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b08:	d01a      	beq.n	8003b40 <UART_SetConfig+0x2b0>
 8003b0a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b0e:	d81b      	bhi.n	8003b48 <UART_SetConfig+0x2b8>
 8003b10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b14:	d00c      	beq.n	8003b30 <UART_SetConfig+0x2a0>
 8003b16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b1a:	d815      	bhi.n	8003b48 <UART_SetConfig+0x2b8>
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <UART_SetConfig+0x298>
 8003b20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b24:	d008      	beq.n	8003b38 <UART_SetConfig+0x2a8>
 8003b26:	e00f      	b.n	8003b48 <UART_SetConfig+0x2b8>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b2e:	e022      	b.n	8003b76 <UART_SetConfig+0x2e6>
 8003b30:	2302      	movs	r3, #2
 8003b32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b36:	e01e      	b.n	8003b76 <UART_SetConfig+0x2e6>
 8003b38:	2304      	movs	r3, #4
 8003b3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b3e:	e01a      	b.n	8003b76 <UART_SetConfig+0x2e6>
 8003b40:	2308      	movs	r3, #8
 8003b42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b46:	e016      	b.n	8003b76 <UART_SetConfig+0x2e6>
 8003b48:	2310      	movs	r3, #16
 8003b4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b4e:	e012      	b.n	8003b76 <UART_SetConfig+0x2e6>
 8003b50:	efff69f3 	.word	0xefff69f3
 8003b54:	40008000 	.word	0x40008000
 8003b58:	40013800 	.word	0x40013800
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	40004400 	.word	0x40004400
 8003b64:	40004800 	.word	0x40004800
 8003b68:	40004c00 	.word	0x40004c00
 8003b6c:	40005000 	.word	0x40005000
 8003b70:	2310      	movs	r3, #16
 8003b72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a9f      	ldr	r2, [pc, #636]	@ (8003df8 <UART_SetConfig+0x568>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d17a      	bne.n	8003c76 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b80:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	d824      	bhi.n	8003bd2 <UART_SetConfig+0x342>
 8003b88:	a201      	add	r2, pc, #4	@ (adr r2, 8003b90 <UART_SetConfig+0x300>)
 8003b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8e:	bf00      	nop
 8003b90:	08003bb5 	.word	0x08003bb5
 8003b94:	08003bd3 	.word	0x08003bd3
 8003b98:	08003bbd 	.word	0x08003bbd
 8003b9c:	08003bd3 	.word	0x08003bd3
 8003ba0:	08003bc3 	.word	0x08003bc3
 8003ba4:	08003bd3 	.word	0x08003bd3
 8003ba8:	08003bd3 	.word	0x08003bd3
 8003bac:	08003bd3 	.word	0x08003bd3
 8003bb0:	08003bcb 	.word	0x08003bcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bb4:	f7fe fd58 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 8003bb8:	61f8      	str	r0, [r7, #28]
        break;
 8003bba:	e010      	b.n	8003bde <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bbc:	4b8f      	ldr	r3, [pc, #572]	@ (8003dfc <UART_SetConfig+0x56c>)
 8003bbe:	61fb      	str	r3, [r7, #28]
        break;
 8003bc0:	e00d      	b.n	8003bde <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bc2:	f7fe fcb9 	bl	8002538 <HAL_RCC_GetSysClockFreq>
 8003bc6:	61f8      	str	r0, [r7, #28]
        break;
 8003bc8:	e009      	b.n	8003bde <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bce:	61fb      	str	r3, [r7, #28]
        break;
 8003bd0:	e005      	b.n	8003bde <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003bdc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 80fb 	beq.w	8003ddc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	4613      	mov	r3, r2
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	4413      	add	r3, r2
 8003bf0:	69fa      	ldr	r2, [r7, #28]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d305      	bcc.n	8003c02 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003bfc:	69fa      	ldr	r2, [r7, #28]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d903      	bls.n	8003c0a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003c08:	e0e8      	b.n	8003ddc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	461c      	mov	r4, r3
 8003c10:	4615      	mov	r5, r2
 8003c12:	f04f 0200 	mov.w	r2, #0
 8003c16:	f04f 0300 	mov.w	r3, #0
 8003c1a:	022b      	lsls	r3, r5, #8
 8003c1c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003c20:	0222      	lsls	r2, r4, #8
 8003c22:	68f9      	ldr	r1, [r7, #12]
 8003c24:	6849      	ldr	r1, [r1, #4]
 8003c26:	0849      	lsrs	r1, r1, #1
 8003c28:	2000      	movs	r0, #0
 8003c2a:	4688      	mov	r8, r1
 8003c2c:	4681      	mov	r9, r0
 8003c2e:	eb12 0a08 	adds.w	sl, r2, r8
 8003c32:	eb43 0b09 	adc.w	fp, r3, r9
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	603b      	str	r3, [r7, #0]
 8003c3e:	607a      	str	r2, [r7, #4]
 8003c40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c44:	4650      	mov	r0, sl
 8003c46:	4659      	mov	r1, fp
 8003c48:	f7fc fabe 	bl	80001c8 <__aeabi_uldivmod>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	460b      	mov	r3, r1
 8003c50:	4613      	mov	r3, r2
 8003c52:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c5a:	d308      	bcc.n	8003c6e <UART_SetConfig+0x3de>
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c62:	d204      	bcs.n	8003c6e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	69ba      	ldr	r2, [r7, #24]
 8003c6a:	60da      	str	r2, [r3, #12]
 8003c6c:	e0b6      	b.n	8003ddc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003c74:	e0b2      	b.n	8003ddc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c7e:	d15e      	bne.n	8003d3e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003c80:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	d828      	bhi.n	8003cda <UART_SetConfig+0x44a>
 8003c88:	a201      	add	r2, pc, #4	@ (adr r2, 8003c90 <UART_SetConfig+0x400>)
 8003c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8e:	bf00      	nop
 8003c90:	08003cb5 	.word	0x08003cb5
 8003c94:	08003cbd 	.word	0x08003cbd
 8003c98:	08003cc5 	.word	0x08003cc5
 8003c9c:	08003cdb 	.word	0x08003cdb
 8003ca0:	08003ccb 	.word	0x08003ccb
 8003ca4:	08003cdb 	.word	0x08003cdb
 8003ca8:	08003cdb 	.word	0x08003cdb
 8003cac:	08003cdb 	.word	0x08003cdb
 8003cb0:	08003cd3 	.word	0x08003cd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cb4:	f7fe fcd8 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 8003cb8:	61f8      	str	r0, [r7, #28]
        break;
 8003cba:	e014      	b.n	8003ce6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cbc:	f7fe fcea 	bl	8002694 <HAL_RCC_GetPCLK2Freq>
 8003cc0:	61f8      	str	r0, [r7, #28]
        break;
 8003cc2:	e010      	b.n	8003ce6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cc4:	4b4d      	ldr	r3, [pc, #308]	@ (8003dfc <UART_SetConfig+0x56c>)
 8003cc6:	61fb      	str	r3, [r7, #28]
        break;
 8003cc8:	e00d      	b.n	8003ce6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cca:	f7fe fc35 	bl	8002538 <HAL_RCC_GetSysClockFreq>
 8003cce:	61f8      	str	r0, [r7, #28]
        break;
 8003cd0:	e009      	b.n	8003ce6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cd6:	61fb      	str	r3, [r7, #28]
        break;
 8003cd8:	e005      	b.n	8003ce6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003ce4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d077      	beq.n	8003ddc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	005a      	lsls	r2, r3, #1
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	085b      	lsrs	r3, r3, #1
 8003cf6:	441a      	add	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d00:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	2b0f      	cmp	r3, #15
 8003d06:	d916      	bls.n	8003d36 <UART_SetConfig+0x4a6>
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d0e:	d212      	bcs.n	8003d36 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	f023 030f 	bic.w	r3, r3, #15
 8003d18:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	085b      	lsrs	r3, r3, #1
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	8afb      	ldrh	r3, [r7, #22]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	8afa      	ldrh	r2, [r7, #22]
 8003d32:	60da      	str	r2, [r3, #12]
 8003d34:	e052      	b.n	8003ddc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003d3c:	e04e      	b.n	8003ddc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d3e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003d42:	2b08      	cmp	r3, #8
 8003d44:	d827      	bhi.n	8003d96 <UART_SetConfig+0x506>
 8003d46:	a201      	add	r2, pc, #4	@ (adr r2, 8003d4c <UART_SetConfig+0x4bc>)
 8003d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4c:	08003d71 	.word	0x08003d71
 8003d50:	08003d79 	.word	0x08003d79
 8003d54:	08003d81 	.word	0x08003d81
 8003d58:	08003d97 	.word	0x08003d97
 8003d5c:	08003d87 	.word	0x08003d87
 8003d60:	08003d97 	.word	0x08003d97
 8003d64:	08003d97 	.word	0x08003d97
 8003d68:	08003d97 	.word	0x08003d97
 8003d6c:	08003d8f 	.word	0x08003d8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d70:	f7fe fc7a 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 8003d74:	61f8      	str	r0, [r7, #28]
        break;
 8003d76:	e014      	b.n	8003da2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d78:	f7fe fc8c 	bl	8002694 <HAL_RCC_GetPCLK2Freq>
 8003d7c:	61f8      	str	r0, [r7, #28]
        break;
 8003d7e:	e010      	b.n	8003da2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d80:	4b1e      	ldr	r3, [pc, #120]	@ (8003dfc <UART_SetConfig+0x56c>)
 8003d82:	61fb      	str	r3, [r7, #28]
        break;
 8003d84:	e00d      	b.n	8003da2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d86:	f7fe fbd7 	bl	8002538 <HAL_RCC_GetSysClockFreq>
 8003d8a:	61f8      	str	r0, [r7, #28]
        break;
 8003d8c:	e009      	b.n	8003da2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d92:	61fb      	str	r3, [r7, #28]
        break;
 8003d94:	e005      	b.n	8003da2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003da0:	bf00      	nop
    }

    if (pclk != 0U)
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d019      	beq.n	8003ddc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	085a      	lsrs	r2, r3, #1
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	441a      	add	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	2b0f      	cmp	r3, #15
 8003dc0:	d909      	bls.n	8003dd6 <UART_SetConfig+0x546>
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dc8:	d205      	bcs.n	8003dd6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	60da      	str	r2, [r3, #12]
 8003dd4:	e002      	b.n	8003ddc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003de8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3728      	adds	r7, #40	@ 0x28
 8003df0:	46bd      	mov	sp, r7
 8003df2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003df6:	bf00      	nop
 8003df8:	40008000 	.word	0x40008000
 8003dfc:	00f42400 	.word	0x00f42400

08003e00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0c:	f003 0308 	and.w	r3, r3, #8
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00a      	beq.n	8003e2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00a      	beq.n	8003e4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00a      	beq.n	8003e6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e72:	f003 0304 	and.w	r3, r3, #4
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00a      	beq.n	8003e90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e94:	f003 0310 	and.w	r3, r3, #16
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00a      	beq.n	8003eb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb6:	f003 0320 	and.w	r3, r3, #32
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00a      	beq.n	8003ed4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d01a      	beq.n	8003f16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003efe:	d10a      	bne.n	8003f16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	430a      	orrs	r2, r1
 8003f36:	605a      	str	r2, [r3, #4]
  }
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b098      	sub	sp, #96	@ 0x60
 8003f48:	af02      	add	r7, sp, #8
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f54:	f7fd fac0 	bl	80014d8 <HAL_GetTick>
 8003f58:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0308 	and.w	r3, r3, #8
 8003f64:	2b08      	cmp	r3, #8
 8003f66:	d12e      	bne.n	8003fc6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f68:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f6c:	9300      	str	r3, [sp, #0]
 8003f6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f70:	2200      	movs	r2, #0
 8003f72:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f88c 	bl	8004094 <UART_WaitOnFlagUntilTimeout>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d021      	beq.n	8003fc6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f8a:	e853 3f00 	ldrex	r3, [r3]
 8003f8e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f96:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fa0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fa2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003fa6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fa8:	e841 2300 	strex	r3, r2, [r1]
 8003fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003fae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1e6      	bne.n	8003f82 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e062      	b.n	800408c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0304 	and.w	r3, r3, #4
 8003fd0:	2b04      	cmp	r3, #4
 8003fd2:	d149      	bne.n	8004068 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fd4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f856 	bl	8004094 <UART_WaitOnFlagUntilTimeout>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d03c      	beq.n	8004068 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff6:	e853 3f00 	ldrex	r3, [r3]
 8003ffa:	623b      	str	r3, [r7, #32]
   return(result);
 8003ffc:	6a3b      	ldr	r3, [r7, #32]
 8003ffe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004002:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	461a      	mov	r2, r3
 800400a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800400c:	633b      	str	r3, [r7, #48]	@ 0x30
 800400e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004010:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004012:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004014:	e841 2300 	strex	r3, r2, [r1]
 8004018:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800401a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1e6      	bne.n	8003fee <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	3308      	adds	r3, #8
 8004026:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	e853 3f00 	ldrex	r3, [r3]
 800402e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0301 	bic.w	r3, r3, #1
 8004036:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	3308      	adds	r3, #8
 800403e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004040:	61fa      	str	r2, [r7, #28]
 8004042:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004044:	69b9      	ldr	r1, [r7, #24]
 8004046:	69fa      	ldr	r2, [r7, #28]
 8004048:	e841 2300 	strex	r3, r2, [r1]
 800404c:	617b      	str	r3, [r7, #20]
   return(result);
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1e5      	bne.n	8004020 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2220      	movs	r2, #32
 8004058:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e011      	b.n	800408c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2220      	movs	r2, #32
 800406c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2220      	movs	r2, #32
 8004072:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3758      	adds	r7, #88	@ 0x58
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	603b      	str	r3, [r7, #0]
 80040a0:	4613      	mov	r3, r2
 80040a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040a4:	e04f      	b.n	8004146 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ac:	d04b      	beq.n	8004146 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ae:	f7fd fa13 	bl	80014d8 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d302      	bcc.n	80040c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e04e      	b.n	8004166 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0304 	and.w	r3, r3, #4
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d037      	beq.n	8004146 <UART_WaitOnFlagUntilTimeout+0xb2>
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	2b80      	cmp	r3, #128	@ 0x80
 80040da:	d034      	beq.n	8004146 <UART_WaitOnFlagUntilTimeout+0xb2>
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	2b40      	cmp	r3, #64	@ 0x40
 80040e0:	d031      	beq.n	8004146 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	69db      	ldr	r3, [r3, #28]
 80040e8:	f003 0308 	and.w	r3, r3, #8
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d110      	bne.n	8004112 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2208      	movs	r2, #8
 80040f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f000 f838 	bl	800416e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2208      	movs	r2, #8
 8004102:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e029      	b.n	8004166 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	69db      	ldr	r3, [r3, #28]
 8004118:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800411c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004120:	d111      	bne.n	8004146 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800412a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f000 f81e 	bl	800416e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2220      	movs	r2, #32
 8004136:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e00f      	b.n	8004166 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	69da      	ldr	r2, [r3, #28]
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	4013      	ands	r3, r2
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	429a      	cmp	r2, r3
 8004154:	bf0c      	ite	eq
 8004156:	2301      	moveq	r3, #1
 8004158:	2300      	movne	r3, #0
 800415a:	b2db      	uxtb	r3, r3
 800415c:	461a      	mov	r2, r3
 800415e:	79fb      	ldrb	r3, [r7, #7]
 8004160:	429a      	cmp	r2, r3
 8004162:	d0a0      	beq.n	80040a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800416e:	b480      	push	{r7}
 8004170:	b095      	sub	sp, #84	@ 0x54
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800417e:	e853 3f00 	ldrex	r3, [r3]
 8004182:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004186:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800418a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	461a      	mov	r2, r3
 8004192:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004194:	643b      	str	r3, [r7, #64]	@ 0x40
 8004196:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004198:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800419a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800419c:	e841 2300 	strex	r3, r2, [r1]
 80041a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80041a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1e6      	bne.n	8004176 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3308      	adds	r3, #8
 80041ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b0:	6a3b      	ldr	r3, [r7, #32]
 80041b2:	e853 3f00 	ldrex	r3, [r3]
 80041b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	f023 0301 	bic.w	r3, r3, #1
 80041be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	3308      	adds	r3, #8
 80041c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041d0:	e841 2300 	strex	r3, r2, [r1]
 80041d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80041d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1e5      	bne.n	80041a8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d118      	bne.n	8004216 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	e853 3f00 	ldrex	r3, [r3]
 80041f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	f023 0310 	bic.w	r3, r3, #16
 80041f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	461a      	mov	r2, r3
 8004200:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004202:	61bb      	str	r3, [r7, #24]
 8004204:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004206:	6979      	ldr	r1, [r7, #20]
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	e841 2300 	strex	r3, r2, [r1]
 800420e:	613b      	str	r3, [r7, #16]
   return(result);
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1e6      	bne.n	80041e4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2220      	movs	r2, #32
 800421a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800422a:	bf00      	nop
 800422c:	3754      	adds	r7, #84	@ 0x54
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <memset>:
 8004236:	4402      	add	r2, r0
 8004238:	4603      	mov	r3, r0
 800423a:	4293      	cmp	r3, r2
 800423c:	d100      	bne.n	8004240 <memset+0xa>
 800423e:	4770      	bx	lr
 8004240:	f803 1b01 	strb.w	r1, [r3], #1
 8004244:	e7f9      	b.n	800423a <memset+0x4>
	...

08004248 <__libc_init_array>:
 8004248:	b570      	push	{r4, r5, r6, lr}
 800424a:	4d0d      	ldr	r5, [pc, #52]	@ (8004280 <__libc_init_array+0x38>)
 800424c:	4c0d      	ldr	r4, [pc, #52]	@ (8004284 <__libc_init_array+0x3c>)
 800424e:	1b64      	subs	r4, r4, r5
 8004250:	10a4      	asrs	r4, r4, #2
 8004252:	2600      	movs	r6, #0
 8004254:	42a6      	cmp	r6, r4
 8004256:	d109      	bne.n	800426c <__libc_init_array+0x24>
 8004258:	4d0b      	ldr	r5, [pc, #44]	@ (8004288 <__libc_init_array+0x40>)
 800425a:	4c0c      	ldr	r4, [pc, #48]	@ (800428c <__libc_init_array+0x44>)
 800425c:	f000 f818 	bl	8004290 <_init>
 8004260:	1b64      	subs	r4, r4, r5
 8004262:	10a4      	asrs	r4, r4, #2
 8004264:	2600      	movs	r6, #0
 8004266:	42a6      	cmp	r6, r4
 8004268:	d105      	bne.n	8004276 <__libc_init_array+0x2e>
 800426a:	bd70      	pop	{r4, r5, r6, pc}
 800426c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004270:	4798      	blx	r3
 8004272:	3601      	adds	r6, #1
 8004274:	e7ee      	b.n	8004254 <__libc_init_array+0xc>
 8004276:	f855 3b04 	ldr.w	r3, [r5], #4
 800427a:	4798      	blx	r3
 800427c:	3601      	adds	r6, #1
 800427e:	e7f2      	b.n	8004266 <__libc_init_array+0x1e>
 8004280:	08004784 	.word	0x08004784
 8004284:	08004784 	.word	0x08004784
 8004288:	08004784 	.word	0x08004784
 800428c:	08004788 	.word	0x08004788

08004290 <_init>:
 8004290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004292:	bf00      	nop
 8004294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004296:	bc08      	pop	{r3}
 8004298:	469e      	mov	lr, r3
 800429a:	4770      	bx	lr

0800429c <_fini>:
 800429c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800429e:	bf00      	nop
 80042a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042a2:	bc08      	pop	{r3}
 80042a4:	469e      	mov	lr, r3
 80042a6:	4770      	bx	lr
