
RC_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093fc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ec0  08009590  08009590  0000a590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a450  0800a450  0000c1dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a450  0800a450  0000b450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a458  0800a458  0000c1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a458  0800a458  0000b458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a45c  0800a45c  0000b45c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800a460  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005c20  200001dc  0800a63c  0000c1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005dfc  0800a63c  0000cdfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019420  00000000  00000000  0000c20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b15  00000000  00000000  0002562c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001758  00000000  00000000  00029148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002a00e  00000000  00000000  0002a8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001ef86  00000000  00000000  000548ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000faa1f  00000000  00000000  00073834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0016e253  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 0000120b  00000000  00000000  0016e296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007124  00000000  00000000  0016f4a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001765c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009574 	.word	0x08009574

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08009574 	.word	0x08009574

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <Paint_NewImage>:
 image   :   Pointer to the image cache
 width   :   The width of the picture
 Height  :   The height of the picture
 Color   :   Whether the picture is inverted
 ******************************************************************************/
void Paint_NewImage(uint8_t *image, uint16_t Width, uint16_t Height, uint16_t Rotate, uint16_t Color) {
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	817b      	strh	r3, [r7, #10]
 8000eaa:	460b      	mov	r3, r1
 8000eac:	813b      	strh	r3, [r7, #8]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	80fb      	strh	r3, [r7, #6]
	Paint.Image = NULL;
 8000eb2:	4b24      	ldr	r3, [pc, #144]	@ (8000f44 <Paint_NewImage+0xac>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
	Paint.Image = image;
 8000eb8:	4a22      	ldr	r2, [pc, #136]	@ (8000f44 <Paint_NewImage+0xac>)
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	6013      	str	r3, [r2, #0]

	Paint.WidthMemory = Width;
 8000ebe:	4a21      	ldr	r2, [pc, #132]	@ (8000f44 <Paint_NewImage+0xac>)
 8000ec0:	897b      	ldrh	r3, [r7, #10]
 8000ec2:	8113      	strh	r3, [r2, #8]
	Paint.HeightMemory = Height;
 8000ec4:	4a1f      	ldr	r2, [pc, #124]	@ (8000f44 <Paint_NewImage+0xac>)
 8000ec6:	893b      	ldrh	r3, [r7, #8]
 8000ec8:	8153      	strh	r3, [r2, #10]
	Paint.Color = Color;
 8000eca:	4a1e      	ldr	r2, [pc, #120]	@ (8000f44 <Paint_NewImage+0xac>)
 8000ecc:	8b3b      	ldrh	r3, [r7, #24]
 8000ece:	8193      	strh	r3, [r2, #12]
	Paint.WidthByte = (Paint.WidthMemory % 8 == 0) ? (Paint.WidthMemory / 8) : (Paint.WidthMemory / 8 + 1);
 8000ed0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f44 <Paint_NewImage+0xac>)
 8000ed2:	891b      	ldrh	r3, [r3, #8]
 8000ed4:	f003 0307 	and.w	r3, r3, #7
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d104      	bne.n	8000ee8 <Paint_NewImage+0x50>
 8000ede:	4b19      	ldr	r3, [pc, #100]	@ (8000f44 <Paint_NewImage+0xac>)
 8000ee0:	891b      	ldrh	r3, [r3, #8]
 8000ee2:	08db      	lsrs	r3, r3, #3
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	e005      	b.n	8000ef4 <Paint_NewImage+0x5c>
 8000ee8:	4b16      	ldr	r3, [pc, #88]	@ (8000f44 <Paint_NewImage+0xac>)
 8000eea:	891b      	ldrh	r3, [r3, #8]
 8000eec:	08db      	lsrs	r3, r3, #3
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	4a13      	ldr	r2, [pc, #76]	@ (8000f44 <Paint_NewImage+0xac>)
 8000ef6:	8253      	strh	r3, [r2, #18]
	Paint.HeightByte = Height;
 8000ef8:	4a12      	ldr	r2, [pc, #72]	@ (8000f44 <Paint_NewImage+0xac>)
 8000efa:	893b      	ldrh	r3, [r7, #8]
 8000efc:	8293      	strh	r3, [r2, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);

	Paint.Rotate = Rotate;
 8000efe:	4a11      	ldr	r2, [pc, #68]	@ (8000f44 <Paint_NewImage+0xac>)
 8000f00:	88fb      	ldrh	r3, [r7, #6]
 8000f02:	81d3      	strh	r3, [r2, #14]
	Paint.Mirror = MIRROR_NONE;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <Paint_NewImage+0xac>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	821a      	strh	r2, [r3, #16]
	Paint.Scale = 2;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f44 <Paint_NewImage+0xac>)
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	82da      	strh	r2, [r3, #22]
	if (Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8000f10:	88fb      	ldrh	r3, [r7, #6]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d002      	beq.n	8000f1c <Paint_NewImage+0x84>
 8000f16:	88fb      	ldrh	r3, [r7, #6]
 8000f18:	2bb4      	cmp	r3, #180	@ 0xb4
 8000f1a:	d106      	bne.n	8000f2a <Paint_NewImage+0x92>
		Paint.Width = Width;
 8000f1c:	4a09      	ldr	r2, [pc, #36]	@ (8000f44 <Paint_NewImage+0xac>)
 8000f1e:	897b      	ldrh	r3, [r7, #10]
 8000f20:	8093      	strh	r3, [r2, #4]
		Paint.Height = Height;
 8000f22:	4a08      	ldr	r2, [pc, #32]	@ (8000f44 <Paint_NewImage+0xac>)
 8000f24:	893b      	ldrh	r3, [r7, #8]
 8000f26:	80d3      	strh	r3, [r2, #6]
 8000f28:	e006      	b.n	8000f38 <Paint_NewImage+0xa0>
	} else {
		Paint.Width = Height;
 8000f2a:	4a06      	ldr	r2, [pc, #24]	@ (8000f44 <Paint_NewImage+0xac>)
 8000f2c:	893b      	ldrh	r3, [r7, #8]
 8000f2e:	8093      	strh	r3, [r2, #4]
		Paint.Height = Width;
 8000f30:	4a04      	ldr	r2, [pc, #16]	@ (8000f44 <Paint_NewImage+0xac>)
 8000f32:	897b      	ldrh	r3, [r7, #10]
 8000f34:	80d3      	strh	r3, [r2, #6]
	}
}
 8000f36:	bf00      	nop
 8000f38:	bf00      	nop
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	200001f8 	.word	0x200001f8

08000f48 <Paint_SelectImage>:
/******************************************************************************
 function: Select Image
 parameter:
 image : Pointer to the image cache
 ******************************************************************************/
void Paint_SelectImage(uint8_t *image) {
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	Paint.Image = image;
 8000f50:	4a04      	ldr	r2, [pc, #16]	@ (8000f64 <Paint_SelectImage+0x1c>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6013      	str	r3, [r2, #0]
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	200001f8 	.word	0x200001f8

08000f68 <Paint_SetPixel>:
 parameter:
 Xpoint : At point X
 Ypoint : At point Y
 Color  : Painted colors
 ******************************************************************************/
void Paint_SetPixel(uint16_t Xpoint, uint16_t Ypoint, uint16_t Color) {
 8000f68:	b480      	push	{r7}
 8000f6a:	b08b      	sub	sp, #44	@ 0x2c
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	80fb      	strh	r3, [r7, #6]
 8000f72:	460b      	mov	r3, r1
 8000f74:	80bb      	strh	r3, [r7, #4]
 8000f76:	4613      	mov	r3, r2
 8000f78:	807b      	strh	r3, [r7, #2]
	if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8000f7a:	4b88      	ldr	r3, [pc, #544]	@ (800119c <Paint_SetPixel+0x234>)
 8000f7c:	889b      	ldrh	r3, [r3, #4]
 8000f7e:	88fa      	ldrh	r2, [r7, #6]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	f200 8145 	bhi.w	8001210 <Paint_SetPixel+0x2a8>
 8000f86:	4b85      	ldr	r3, [pc, #532]	@ (800119c <Paint_SetPixel+0x234>)
 8000f88:	88db      	ldrh	r3, [r3, #6]
 8000f8a:	88ba      	ldrh	r2, [r7, #4]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	f200 813f 	bhi.w	8001210 <Paint_SetPixel+0x2a8>
		//DEBUG("Exceeding display boundaries\r\n");
		return;
	}
	uint16_t X, Y;

	switch (Paint.Rotate) {
 8000f92:	4b82      	ldr	r3, [pc, #520]	@ (800119c <Paint_SetPixel+0x234>)
 8000f94:	89db      	ldrh	r3, [r3, #14]
 8000f96:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8000f9a:	d02b      	beq.n	8000ff4 <Paint_SetPixel+0x8c>
 8000f9c:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8000fa0:	f300 8138 	bgt.w	8001214 <Paint_SetPixel+0x2ac>
 8000fa4:	2bb4      	cmp	r3, #180	@ 0xb4
 8000fa6:	d016      	beq.n	8000fd6 <Paint_SetPixel+0x6e>
 8000fa8:	2bb4      	cmp	r3, #180	@ 0xb4
 8000faa:	f300 8133 	bgt.w	8001214 <Paint_SetPixel+0x2ac>
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d002      	beq.n	8000fb8 <Paint_SetPixel+0x50>
 8000fb2:	2b5a      	cmp	r3, #90	@ 0x5a
 8000fb4:	d005      	beq.n	8000fc2 <Paint_SetPixel+0x5a>
	case 270:
		X = Ypoint;
		Y = Paint.HeightMemory - Xpoint - 1;
		break;
	default:
		return;
 8000fb6:	e12d      	b.n	8001214 <Paint_SetPixel+0x2ac>
		X = Xpoint;
 8000fb8:	88fb      	ldrh	r3, [r7, #6]
 8000fba:	84fb      	strh	r3, [r7, #38]	@ 0x26
		Y = Ypoint;
 8000fbc:	88bb      	ldrh	r3, [r7, #4]
 8000fbe:	84bb      	strh	r3, [r7, #36]	@ 0x24
		break;
 8000fc0:	e022      	b.n	8001008 <Paint_SetPixel+0xa0>
		X = Paint.WidthMemory - Ypoint - 1;
 8000fc2:	4b76      	ldr	r3, [pc, #472]	@ (800119c <Paint_SetPixel+0x234>)
 8000fc4:	891a      	ldrh	r2, [r3, #8]
 8000fc6:	88bb      	ldrh	r3, [r7, #4]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	84fb      	strh	r3, [r7, #38]	@ 0x26
		Y = Xpoint;
 8000fd0:	88fb      	ldrh	r3, [r7, #6]
 8000fd2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		break;
 8000fd4:	e018      	b.n	8001008 <Paint_SetPixel+0xa0>
		X = Paint.WidthMemory - Xpoint - 1;
 8000fd6:	4b71      	ldr	r3, [pc, #452]	@ (800119c <Paint_SetPixel+0x234>)
 8000fd8:	891a      	ldrh	r2, [r3, #8]
 8000fda:	88fb      	ldrh	r3, [r7, #6]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	84fb      	strh	r3, [r7, #38]	@ 0x26
		Y = Paint.HeightMemory - Ypoint - 1;
 8000fe4:	4b6d      	ldr	r3, [pc, #436]	@ (800119c <Paint_SetPixel+0x234>)
 8000fe6:	895a      	ldrh	r2, [r3, #10]
 8000fe8:	88bb      	ldrh	r3, [r7, #4]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		break;
 8000ff2:	e009      	b.n	8001008 <Paint_SetPixel+0xa0>
		X = Ypoint;
 8000ff4:	88bb      	ldrh	r3, [r7, #4]
 8000ff6:	84fb      	strh	r3, [r7, #38]	@ 0x26
		Y = Paint.HeightMemory - Xpoint - 1;
 8000ff8:	4b68      	ldr	r3, [pc, #416]	@ (800119c <Paint_SetPixel+0x234>)
 8000ffa:	895a      	ldrh	r2, [r3, #10]
 8000ffc:	88fb      	ldrh	r3, [r7, #6]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	b29b      	uxth	r3, r3
 8001002:	3b01      	subs	r3, #1
 8001004:	84bb      	strh	r3, [r7, #36]	@ 0x24
		break;
 8001006:	bf00      	nop
	}

	switch (Paint.Mirror) {
 8001008:	4b64      	ldr	r3, [pc, #400]	@ (800119c <Paint_SetPixel+0x234>)
 800100a:	8a1b      	ldrh	r3, [r3, #16]
 800100c:	2b03      	cmp	r3, #3
 800100e:	f200 8103 	bhi.w	8001218 <Paint_SetPixel+0x2b0>
 8001012:	a201      	add	r2, pc, #4	@ (adr r2, 8001018 <Paint_SetPixel+0xb0>)
 8001014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001018:	08001067 	.word	0x08001067
 800101c:	08001029 	.word	0x08001029
 8001020:	08001039 	.word	0x08001039
 8001024:	08001049 	.word	0x08001049
	case MIRROR_NONE:
		break;
	case MIRROR_HORIZONTAL:
		X = Paint.WidthMemory - X - 1;
 8001028:	4b5c      	ldr	r3, [pc, #368]	@ (800119c <Paint_SetPixel+0x234>)
 800102a:	891a      	ldrh	r2, [r3, #8]
 800102c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	b29b      	uxth	r3, r3
 8001032:	3b01      	subs	r3, #1
 8001034:	84fb      	strh	r3, [r7, #38]	@ 0x26
		break;
 8001036:	e017      	b.n	8001068 <Paint_SetPixel+0x100>
	case MIRROR_VERTICAL:
		Y = Paint.HeightMemory - Y - 1;
 8001038:	4b58      	ldr	r3, [pc, #352]	@ (800119c <Paint_SetPixel+0x234>)
 800103a:	895a      	ldrh	r2, [r3, #10]
 800103c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	b29b      	uxth	r3, r3
 8001042:	3b01      	subs	r3, #1
 8001044:	84bb      	strh	r3, [r7, #36]	@ 0x24
		break;
 8001046:	e00f      	b.n	8001068 <Paint_SetPixel+0x100>
	case MIRROR_ORIGIN:
		X = Paint.WidthMemory - X - 1;
 8001048:	4b54      	ldr	r3, [pc, #336]	@ (800119c <Paint_SetPixel+0x234>)
 800104a:	891a      	ldrh	r2, [r3, #8]
 800104c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	b29b      	uxth	r3, r3
 8001052:	3b01      	subs	r3, #1
 8001054:	84fb      	strh	r3, [r7, #38]	@ 0x26
		Y = Paint.HeightMemory - Y - 1;
 8001056:	4b51      	ldr	r3, [pc, #324]	@ (800119c <Paint_SetPixel+0x234>)
 8001058:	895a      	ldrh	r2, [r3, #10]
 800105a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	b29b      	uxth	r3, r3
 8001060:	3b01      	subs	r3, #1
 8001062:	84bb      	strh	r3, [r7, #36]	@ 0x24
		break;
 8001064:	e000      	b.n	8001068 <Paint_SetPixel+0x100>
		break;
 8001066:	bf00      	nop
	default:
		return;
	}

	if (X > Paint.WidthMemory || Y > Paint.HeightMemory) {
 8001068:	4b4c      	ldr	r3, [pc, #304]	@ (800119c <Paint_SetPixel+0x234>)
 800106a:	891b      	ldrh	r3, [r3, #8]
 800106c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800106e:	429a      	cmp	r2, r3
 8001070:	f200 80d4 	bhi.w	800121c <Paint_SetPixel+0x2b4>
 8001074:	4b49      	ldr	r3, [pc, #292]	@ (800119c <Paint_SetPixel+0x234>)
 8001076:	895b      	ldrh	r3, [r3, #10]
 8001078:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800107a:	429a      	cmp	r2, r3
 800107c:	f200 80ce 	bhi.w	800121c <Paint_SetPixel+0x2b4>
		//DEBUG("Exceeding display boundaries\r\n");
		return;
	}
	if (Paint.Scale == 2) {
 8001080:	4b46      	ldr	r3, [pc, #280]	@ (800119c <Paint_SetPixel+0x234>)
 8001082:	8adb      	ldrh	r3, [r3, #22]
 8001084:	2b02      	cmp	r3, #2
 8001086:	d139      	bne.n	80010fc <Paint_SetPixel+0x194>
		uint32_t Addr = X / 8 + Y * Paint.WidthByte;
 8001088:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800108a:	08db      	lsrs	r3, r3, #3
 800108c:	b29b      	uxth	r3, r3
 800108e:	4619      	mov	r1, r3
 8001090:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001092:	4a42      	ldr	r2, [pc, #264]	@ (800119c <Paint_SetPixel+0x234>)
 8001094:	8a52      	ldrh	r2, [r2, #18]
 8001096:	fb02 f303 	mul.w	r3, r2, r3
 800109a:	440b      	add	r3, r1
 800109c:	613b      	str	r3, [r7, #16]
		uint8_t Rdata = Paint.Image[Addr];
 800109e:	4b3f      	ldr	r3, [pc, #252]	@ (800119c <Paint_SetPixel+0x234>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	4413      	add	r3, r2
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	73fb      	strb	r3, [r7, #15]
		if (Color == BLACK)
 80010aa:	887b      	ldrh	r3, [r7, #2]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d113      	bne.n	80010d8 <Paint_SetPixel+0x170>
			Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 80010b0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	2280      	movs	r2, #128	@ 0x80
 80010b8:	fa42 f303 	asr.w	r3, r2, r3
 80010bc:	b25b      	sxtb	r3, r3
 80010be:	43db      	mvns	r3, r3
 80010c0:	b25a      	sxtb	r2, r3
 80010c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c6:	4013      	ands	r3, r2
 80010c8:	b259      	sxtb	r1, r3
 80010ca:	4b34      	ldr	r3, [pc, #208]	@ (800119c <Paint_SetPixel+0x234>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	4413      	add	r3, r2
 80010d2:	b2ca      	uxtb	r2, r1
 80010d4:	701a      	strb	r2, [r3, #0]
 80010d6:	e0a2      	b.n	800121e <Paint_SetPixel+0x2b6>
		else
			Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 80010d8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	2280      	movs	r2, #128	@ 0x80
 80010e0:	fa42 f303 	asr.w	r3, r2, r3
 80010e4:	b25a      	sxtb	r2, r3
 80010e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	b259      	sxtb	r1, r3
 80010ee:	4b2b      	ldr	r3, [pc, #172]	@ (800119c <Paint_SetPixel+0x234>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	4413      	add	r3, r2
 80010f6:	b2ca      	uxtb	r2, r1
 80010f8:	701a      	strb	r2, [r3, #0]
 80010fa:	e090      	b.n	800121e <Paint_SetPixel+0x2b6>
	} else if (Paint.Scale == 4) {
 80010fc:	4b27      	ldr	r3, [pc, #156]	@ (800119c <Paint_SetPixel+0x234>)
 80010fe:	8adb      	ldrh	r3, [r3, #22]
 8001100:	2b04      	cmp	r3, #4
 8001102:	d14d      	bne.n	80011a0 <Paint_SetPixel+0x238>
		uint16_t Width = (Paint.WidthMemory % 4 == 0) ? (Paint.WidthMemory / 4) : (Paint.WidthMemory / 4 + 1);
 8001104:	4b25      	ldr	r3, [pc, #148]	@ (800119c <Paint_SetPixel+0x234>)
 8001106:	891b      	ldrh	r3, [r3, #8]
 8001108:	f003 0303 	and.w	r3, r3, #3
 800110c:	b29b      	uxth	r3, r3
 800110e:	2b00      	cmp	r3, #0
 8001110:	d104      	bne.n	800111c <Paint_SetPixel+0x1b4>
 8001112:	4b22      	ldr	r3, [pc, #136]	@ (800119c <Paint_SetPixel+0x234>)
 8001114:	891b      	ldrh	r3, [r3, #8]
 8001116:	089b      	lsrs	r3, r3, #2
 8001118:	b29b      	uxth	r3, r3
 800111a:	e005      	b.n	8001128 <Paint_SetPixel+0x1c0>
 800111c:	4b1f      	ldr	r3, [pc, #124]	@ (800119c <Paint_SetPixel+0x234>)
 800111e:	891b      	ldrh	r3, [r3, #8]
 8001120:	089b      	lsrs	r3, r3, #2
 8001122:	b29b      	uxth	r3, r3
 8001124:	3301      	adds	r3, #1
 8001126:	b29b      	uxth	r3, r3
 8001128:	83bb      	strh	r3, [r7, #28]
		uint32_t Addr = X / 4 + Y * Width;
 800112a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800112c:	089b      	lsrs	r3, r3, #2
 800112e:	b29b      	uxth	r3, r3
 8001130:	4619      	mov	r1, r3
 8001132:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001134:	8bba      	ldrh	r2, [r7, #28]
 8001136:	fb02 f303 	mul.w	r3, r2, r3
 800113a:	440b      	add	r3, r1
 800113c:	61bb      	str	r3, [r7, #24]
		Color = Color % 4; //Guaranteed color scale is 4  --- 0~3
 800113e:	887b      	ldrh	r3, [r7, #2]
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	807b      	strh	r3, [r7, #2]
		uint8_t Rdata = Paint.Image[Addr];
 8001146:	4b15      	ldr	r3, [pc, #84]	@ (800119c <Paint_SetPixel+0x234>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	4413      	add	r3, r2
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	75fb      	strb	r3, [r7, #23]

		Rdata = Rdata & (~(0xC0 >> ((X % 4) * 2)));
 8001152:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	22c0      	movs	r2, #192	@ 0xc0
 800115c:	fa42 f303 	asr.w	r3, r2, r3
 8001160:	b25b      	sxtb	r3, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	b25a      	sxtb	r2, r3
 8001166:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800116a:	4013      	ands	r3, r2
 800116c:	b25b      	sxtb	r3, r3
 800116e:	75fb      	strb	r3, [r7, #23]
		Paint.Image[Addr] = Rdata | (((Color << 6) & 0xC0) >> ((X % 4) * 2));
 8001170:	887b      	ldrh	r3, [r7, #2]
 8001172:	019b      	lsls	r3, r3, #6
 8001174:	b2da      	uxtb	r2, r3
 8001176:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001178:	f003 0303 	and.w	r3, r3, #3
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	fa42 f303 	asr.w	r3, r2, r3
 8001182:	b25a      	sxtb	r2, r3
 8001184:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001188:	4313      	orrs	r3, r2
 800118a:	b259      	sxtb	r1, r3
 800118c:	4b03      	ldr	r3, [pc, #12]	@ (800119c <Paint_SetPixel+0x234>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	4413      	add	r3, r2
 8001194:	b2ca      	uxtb	r2, r1
 8001196:	701a      	strb	r2, [r3, #0]
 8001198:	e041      	b.n	800121e <Paint_SetPixel+0x2b6>
 800119a:	bf00      	nop
 800119c:	200001f8 	.word	0x200001f8
	} else if (Paint.Scale == 7) {
 80011a0:	4b21      	ldr	r3, [pc, #132]	@ (8001228 <Paint_SetPixel+0x2c0>)
 80011a2:	8adb      	ldrh	r3, [r3, #22]
 80011a4:	2b07      	cmp	r3, #7
 80011a6:	d13a      	bne.n	800121e <Paint_SetPixel+0x2b6>
		uint32_t Addr = X / 2 + Y * Paint.WidthByte;
 80011a8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80011aa:	085b      	lsrs	r3, r3, #1
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	4619      	mov	r1, r3
 80011b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80011b2:	4a1d      	ldr	r2, [pc, #116]	@ (8001228 <Paint_SetPixel+0x2c0>)
 80011b4:	8a52      	ldrh	r2, [r2, #18]
 80011b6:	fb02 f303 	mul.w	r3, r2, r3
 80011ba:	440b      	add	r3, r1
 80011bc:	623b      	str	r3, [r7, #32]
		uint8_t Rdata = Paint.Image[Addr];
 80011be:	4b1a      	ldr	r3, [pc, #104]	@ (8001228 <Paint_SetPixel+0x2c0>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	6a3b      	ldr	r3, [r7, #32]
 80011c4:	4413      	add	r3, r2
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	77fb      	strb	r3, [r7, #31]
		Rdata = Rdata & (~(0xF0 >> ((X % 2) * 4))); //Clear first, then set value
 80011ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	22f0      	movs	r2, #240	@ 0xf0
 80011d4:	fa42 f303 	asr.w	r3, r2, r3
 80011d8:	b25b      	sxtb	r3, r3
 80011da:	43db      	mvns	r3, r3
 80011dc:	b25a      	sxtb	r2, r3
 80011de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80011e2:	4013      	ands	r3, r2
 80011e4:	b25b      	sxtb	r3, r3
 80011e6:	77fb      	strb	r3, [r7, #31]
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2) * 4));
 80011e8:	887b      	ldrh	r3, [r7, #2]
 80011ea:	011a      	lsls	r2, r3, #4
 80011ec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	fa42 f303 	asr.w	r3, r2, r3
 80011f8:	b25a      	sxtb	r2, r3
 80011fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80011fe:	4313      	orrs	r3, r2
 8001200:	b259      	sxtb	r1, r3
 8001202:	4b09      	ldr	r3, [pc, #36]	@ (8001228 <Paint_SetPixel+0x2c0>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	6a3b      	ldr	r3, [r7, #32]
 8001208:	4413      	add	r3, r2
 800120a:	b2ca      	uxtb	r2, r1
 800120c:	701a      	strb	r2, [r3, #0]
 800120e:	e006      	b.n	800121e <Paint_SetPixel+0x2b6>
		return;
 8001210:	bf00      	nop
 8001212:	e004      	b.n	800121e <Paint_SetPixel+0x2b6>
		return;
 8001214:	bf00      	nop
 8001216:	e002      	b.n	800121e <Paint_SetPixel+0x2b6>
		return;
 8001218:	bf00      	nop
 800121a:	e000      	b.n	800121e <Paint_SetPixel+0x2b6>
		return;
 800121c:	bf00      	nop
		//printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
	}
}
 800121e:	372c      	adds	r7, #44	@ 0x2c
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	200001f8 	.word	0x200001f8

0800122c <Paint_DrawChar>:
 Acsii_Char       ：To display the English characters
 Font             ：A structure pointer that displays a character size
 Color_Foreground : Select the foreground color
 Color_Background : Select the background color
 ******************************************************************************/
void Paint_DrawChar(uint16_t Xpoint, uint16_t Ypoint, const char Acsii_Char, sFONT *Font, uint16_t Color_Foreground, uint16_t Color_Background) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b088      	sub	sp, #32
 8001230:	af00      	add	r7, sp, #0
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	4603      	mov	r3, r0
 8001236:	81fb      	strh	r3, [r7, #14]
 8001238:	460b      	mov	r3, r1
 800123a:	81bb      	strh	r3, [r7, #12]
 800123c:	4613      	mov	r3, r2
 800123e:	72fb      	strb	r3, [r7, #11]
	uint16_t Page, Column;

	if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8001240:	4b4c      	ldr	r3, [pc, #304]	@ (8001374 <Paint_DrawChar+0x148>)
 8001242:	889b      	ldrh	r3, [r3, #4]
 8001244:	89fa      	ldrh	r2, [r7, #14]
 8001246:	429a      	cmp	r2, r3
 8001248:	f200 808f 	bhi.w	800136a <Paint_DrawChar+0x13e>
 800124c:	4b49      	ldr	r3, [pc, #292]	@ (8001374 <Paint_DrawChar+0x148>)
 800124e:	88db      	ldrh	r3, [r3, #6]
 8001250:	89ba      	ldrh	r2, [r7, #12]
 8001252:	429a      	cmp	r2, r3
 8001254:	f200 8089 	bhi.w	800136a <Paint_DrawChar+0x13e>
		//DEBUG("Paint_DrawChar Input exceeds the normal display range\r\n");
		return;
	}

	uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8001258:	7afb      	ldrb	r3, [r7, #11]
 800125a:	3b20      	subs	r3, #32
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	88d2      	ldrh	r2, [r2, #6]
 8001260:	fb02 f303 	mul.w	r3, r2, r3
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	8892      	ldrh	r2, [r2, #4]
 8001268:	08d2      	lsrs	r2, r2, #3
 800126a:	b292      	uxth	r2, r2
 800126c:	4611      	mov	r1, r2
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	8892      	ldrh	r2, [r2, #4]
 8001272:	f002 0207 	and.w	r2, r2, #7
 8001276:	b292      	uxth	r2, r2
 8001278:	2a00      	cmp	r2, #0
 800127a:	bf14      	ite	ne
 800127c:	2201      	movne	r2, #1
 800127e:	2200      	moveq	r2, #0
 8001280:	b2d2      	uxtb	r2, r2
 8001282:	440a      	add	r2, r1
 8001284:	fb02 f303 	mul.w	r3, r2, r3
 8001288:	617b      	str	r3, [r7, #20]
	const unsigned char *ptr = &Font->table[Char_Offset];
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	4413      	add	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]

	for (Page = 0; Page < Font->Height; Page++) {
 8001294:	2300      	movs	r3, #0
 8001296:	83fb      	strh	r3, [r7, #30]
 8001298:	e061      	b.n	800135e <Paint_DrawChar+0x132>
		for (Column = 0; Column < Font->Width; Column++) {
 800129a:	2300      	movs	r3, #0
 800129c:	83bb      	strh	r3, [r7, #28]
 800129e:	e04c      	b.n	800133a <Paint_DrawChar+0x10e>

			//To determine whether the font background color and screen background color is consistent
			if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 80012a0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80012a2:	2bff      	cmp	r3, #255	@ 0xff
 80012a4:	d118      	bne.n	80012d8 <Paint_DrawChar+0xac>
				if (*ptr & (0x80 >> (Column % 8)))
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	4619      	mov	r1, r3
 80012ac:	8bbb      	ldrh	r3, [r7, #28]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	2280      	movs	r2, #128	@ 0x80
 80012b4:	fa42 f303 	asr.w	r3, r2, r3
 80012b8:	400b      	ands	r3, r1
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d031      	beq.n	8001322 <Paint_DrawChar+0xf6>
					Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 80012be:	89fa      	ldrh	r2, [r7, #14]
 80012c0:	8bbb      	ldrh	r3, [r7, #28]
 80012c2:	4413      	add	r3, r2
 80012c4:	b298      	uxth	r0, r3
 80012c6:	89ba      	ldrh	r2, [r7, #12]
 80012c8:	8bfb      	ldrh	r3, [r7, #30]
 80012ca:	4413      	add	r3, r2
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80012d0:	4619      	mov	r1, r3
 80012d2:	f7ff fe49 	bl	8000f68 <Paint_SetPixel>
 80012d6:	e024      	b.n	8001322 <Paint_DrawChar+0xf6>
				// Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
			} else {
				if (*ptr & (0x80 >> (Column % 8))) {
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	4619      	mov	r1, r3
 80012de:	8bbb      	ldrh	r3, [r7, #28]
 80012e0:	f003 0307 	and.w	r3, r3, #7
 80012e4:	2280      	movs	r2, #128	@ 0x80
 80012e6:	fa42 f303 	asr.w	r3, r2, r3
 80012ea:	400b      	ands	r3, r1
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d00c      	beq.n	800130a <Paint_DrawChar+0xde>
					Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 80012f0:	89fa      	ldrh	r2, [r7, #14]
 80012f2:	8bbb      	ldrh	r3, [r7, #28]
 80012f4:	4413      	add	r3, r2
 80012f6:	b298      	uxth	r0, r3
 80012f8:	89ba      	ldrh	r2, [r7, #12]
 80012fa:	8bfb      	ldrh	r3, [r7, #30]
 80012fc:	4413      	add	r3, r2
 80012fe:	b29b      	uxth	r3, r3
 8001300:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001302:	4619      	mov	r1, r3
 8001304:	f7ff fe30 	bl	8000f68 <Paint_SetPixel>
 8001308:	e00b      	b.n	8001322 <Paint_DrawChar+0xf6>
					// Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
				} else {
					Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 800130a:	89fa      	ldrh	r2, [r7, #14]
 800130c:	8bbb      	ldrh	r3, [r7, #28]
 800130e:	4413      	add	r3, r2
 8001310:	b298      	uxth	r0, r3
 8001312:	89ba      	ldrh	r2, [r7, #12]
 8001314:	8bfb      	ldrh	r3, [r7, #30]
 8001316:	4413      	add	r3, r2
 8001318:	b29b      	uxth	r3, r3
 800131a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800131c:	4619      	mov	r1, r3
 800131e:	f7ff fe23 	bl	8000f68 <Paint_SetPixel>
					// Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
				}
			}
			//One pixel is 8 bits
			if (Column % 8 == 7)
 8001322:	8bbb      	ldrh	r3, [r7, #28]
 8001324:	f003 0307 	and.w	r3, r3, #7
 8001328:	b29b      	uxth	r3, r3
 800132a:	2b07      	cmp	r3, #7
 800132c:	d102      	bne.n	8001334 <Paint_DrawChar+0x108>
				ptr++;
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	3301      	adds	r3, #1
 8001332:	61bb      	str	r3, [r7, #24]
		for (Column = 0; Column < Font->Width; Column++) {
 8001334:	8bbb      	ldrh	r3, [r7, #28]
 8001336:	3301      	adds	r3, #1
 8001338:	83bb      	strh	r3, [r7, #28]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	889b      	ldrh	r3, [r3, #4]
 800133e:	8bba      	ldrh	r2, [r7, #28]
 8001340:	429a      	cmp	r2, r3
 8001342:	d3ad      	bcc.n	80012a0 <Paint_DrawChar+0x74>
		} // Write a line
		if (Font->Width % 8 != 0)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	889b      	ldrh	r3, [r3, #4]
 8001348:	f003 0307 	and.w	r3, r3, #7
 800134c:	b29b      	uxth	r3, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	d002      	beq.n	8001358 <Paint_DrawChar+0x12c>
			ptr++;
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	3301      	adds	r3, #1
 8001356:	61bb      	str	r3, [r7, #24]
	for (Page = 0; Page < Font->Height; Page++) {
 8001358:	8bfb      	ldrh	r3, [r7, #30]
 800135a:	3301      	adds	r3, #1
 800135c:	83fb      	strh	r3, [r7, #30]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	88db      	ldrh	r3, [r3, #6]
 8001362:	8bfa      	ldrh	r2, [r7, #30]
 8001364:	429a      	cmp	r2, r3
 8001366:	d398      	bcc.n	800129a <Paint_DrawChar+0x6e>
 8001368:	e000      	b.n	800136c <Paint_DrawChar+0x140>
		return;
 800136a:	bf00      	nop
	} // Write all
}
 800136c:	3720      	adds	r7, #32
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	200001f8 	.word	0x200001f8

08001378 <Paint_DrawString_EN>:
 pString          ：The first address of the English string to be displayed
 Font             ：A structure pointer that displays a character size
 Color_Foreground : Select the foreground color
 Color_Background : Select the background color
 ******************************************************************************/
void Paint_DrawString_EN(uint16_t Xstart, uint16_t Ystart, const char *pString, sFONT *Font, uint16_t Color_Foreground, uint16_t Color_Background) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af02      	add	r7, sp, #8
 800137e:	60ba      	str	r2, [r7, #8]
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	4603      	mov	r3, r0
 8001384:	81fb      	strh	r3, [r7, #14]
 8001386:	460b      	mov	r3, r1
 8001388:	81bb      	strh	r3, [r7, #12]
	uint16_t Xpoint = Xstart;
 800138a:	89fb      	ldrh	r3, [r7, #14]
 800138c:	82fb      	strh	r3, [r7, #22]
	uint16_t Ypoint = Ystart;
 800138e:	89bb      	ldrh	r3, [r7, #12]
 8001390:	82bb      	strh	r3, [r7, #20]

	if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8001392:	4b21      	ldr	r3, [pc, #132]	@ (8001418 <Paint_DrawString_EN+0xa0>)
 8001394:	889b      	ldrh	r3, [r3, #4]
 8001396:	89fa      	ldrh	r2, [r7, #14]
 8001398:	429a      	cmp	r2, r3
 800139a:	d838      	bhi.n	800140e <Paint_DrawString_EN+0x96>
 800139c:	4b1e      	ldr	r3, [pc, #120]	@ (8001418 <Paint_DrawString_EN+0xa0>)
 800139e:	88db      	ldrh	r3, [r3, #6]
 80013a0:	89ba      	ldrh	r2, [r7, #12]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d833      	bhi.n	800140e <Paint_DrawString_EN+0x96>
		//DEBUG("Paint_DrawString_EN Input exceeds the normal display range\r\n");
		return;
	}

	while (*pString != '\0') {
 80013a6:	e02d      	b.n	8001404 <Paint_DrawString_EN+0x8c>
		//if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
		if ((Xpoint + Font->Width) > Paint.Width) {
 80013a8:	8afb      	ldrh	r3, [r7, #22]
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	8892      	ldrh	r2, [r2, #4]
 80013ae:	4413      	add	r3, r2
 80013b0:	4a19      	ldr	r2, [pc, #100]	@ (8001418 <Paint_DrawString_EN+0xa0>)
 80013b2:	8892      	ldrh	r2, [r2, #4]
 80013b4:	4293      	cmp	r3, r2
 80013b6:	dd06      	ble.n	80013c6 <Paint_DrawString_EN+0x4e>
			Xpoint = Xstart;
 80013b8:	89fb      	ldrh	r3, [r7, #14]
 80013ba:	82fb      	strh	r3, [r7, #22]
			Ypoint += Font->Height;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	88da      	ldrh	r2, [r3, #6]
 80013c0:	8abb      	ldrh	r3, [r7, #20]
 80013c2:	4413      	add	r3, r2
 80013c4:	82bb      	strh	r3, [r7, #20]
		}

		// If the Y direction is full, reposition to(Xstart, Ystart)
		if ((Ypoint + Font->Height) > Paint.Height) {
 80013c6:	8abb      	ldrh	r3, [r7, #20]
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	88d2      	ldrh	r2, [r2, #6]
 80013cc:	4413      	add	r3, r2
 80013ce:	4a12      	ldr	r2, [pc, #72]	@ (8001418 <Paint_DrawString_EN+0xa0>)
 80013d0:	88d2      	ldrh	r2, [r2, #6]
 80013d2:	4293      	cmp	r3, r2
 80013d4:	dd03      	ble.n	80013de <Paint_DrawString_EN+0x66>
			Xpoint = Xstart;
 80013d6:	89fb      	ldrh	r3, [r7, #14]
 80013d8:	82fb      	strh	r3, [r7, #22]
			Ypoint = Ystart;
 80013da:	89bb      	ldrh	r3, [r7, #12]
 80013dc:	82bb      	strh	r3, [r7, #20]
		}
		Paint_DrawChar(Xpoint, Ypoint, *pString, Font, Color_Foreground, Color_Background);
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	781a      	ldrb	r2, [r3, #0]
 80013e2:	8ab9      	ldrh	r1, [r7, #20]
 80013e4:	8af8      	ldrh	r0, [r7, #22]
 80013e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80013e8:	9301      	str	r3, [sp, #4]
 80013ea:	8c3b      	ldrh	r3, [r7, #32]
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f7ff ff1c 	bl	800122c <Paint_DrawChar>

		//The next character of the address
		pString++;
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	3301      	adds	r3, #1
 80013f8:	60bb      	str	r3, [r7, #8]

		//The next word of the abscissa increases the font of the broadband
		Xpoint += Font->Width;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	889a      	ldrh	r2, [r3, #4]
 80013fe:	8afb      	ldrh	r3, [r7, #22]
 8001400:	4413      	add	r3, r2
 8001402:	82fb      	strh	r3, [r7, #22]
	while (*pString != '\0') {
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d1cd      	bne.n	80013a8 <Paint_DrawString_EN+0x30>
 800140c:	e000      	b.n	8001410 <Paint_DrawString_EN+0x98>
		return;
 800140e:	bf00      	nop
	}
}
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200001f8 	.word	0x200001f8

0800141c <Paint_DrawBitMapXY>:
			Paint.Image[Addr] = (unsigned char) image_buffer[Addr];
		}
	}
}

void Paint_DrawBitMapXY(const unsigned char *image_buffer, uint16_t Xstart, uint16_t Ystart, uint16_t Width, uint16_t Height) {
 800141c:	b480      	push	{r7}
 800141e:	b089      	sub	sp, #36	@ 0x24
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	4608      	mov	r0, r1
 8001426:	4611      	mov	r1, r2
 8001428:	461a      	mov	r2, r3
 800142a:	4603      	mov	r3, r0
 800142c:	817b      	strh	r3, [r7, #10]
 800142e:	460b      	mov	r3, r1
 8001430:	813b      	strh	r3, [r7, #8]
 8001432:	4613      	mov	r3, r2
 8001434:	80fb      	strh	r3, [r7, #6]
	uint16_t x, y;
	uint32_t Addr_buff = 0, Addr_image = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	61bb      	str	r3, [r7, #24]
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
	Width = (Width % 8 == 0) ? (Width / 8) : (Width / 8 + 1);
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	f003 0307 	and.w	r3, r3, #7
 8001444:	b29b      	uxth	r3, r3
 8001446:	2b00      	cmp	r3, #0
 8001448:	d103      	bne.n	8001452 <Paint_DrawBitMapXY+0x36>
 800144a:	88fb      	ldrh	r3, [r7, #6]
 800144c:	08db      	lsrs	r3, r3, #3
 800144e:	b29b      	uxth	r3, r3
 8001450:	e004      	b.n	800145c <Paint_DrawBitMapXY+0x40>
 8001452:	88fb      	ldrh	r3, [r7, #6]
 8001454:	08db      	lsrs	r3, r3, #3
 8001456:	b29b      	uxth	r3, r3
 8001458:	3301      	adds	r3, #1
 800145a:	b29b      	uxth	r3, r3
 800145c:	80fb      	strh	r3, [r7, #6]
	Xstart = (Xstart % 8 == 0) ? (Xstart / 8) : (Xstart / 8 + 1);
 800145e:	897b      	ldrh	r3, [r7, #10]
 8001460:	f003 0307 	and.w	r3, r3, #7
 8001464:	b29b      	uxth	r3, r3
 8001466:	2b00      	cmp	r3, #0
 8001468:	d103      	bne.n	8001472 <Paint_DrawBitMapXY+0x56>
 800146a:	897b      	ldrh	r3, [r7, #10]
 800146c:	08db      	lsrs	r3, r3, #3
 800146e:	b29b      	uxth	r3, r3
 8001470:	e004      	b.n	800147c <Paint_DrawBitMapXY+0x60>
 8001472:	897b      	ldrh	r3, [r7, #10]
 8001474:	08db      	lsrs	r3, r3, #3
 8001476:	b29b      	uxth	r3, r3
 8001478:	3301      	adds	r3, #1
 800147a:	b29b      	uxth	r3, r3
 800147c:	817b      	strh	r3, [r7, #10]
	for (y = 0; y < Height; y++) {
 800147e:	2300      	movs	r3, #0
 8001480:	83bb      	strh	r3, [r7, #28]
 8001482:	e028      	b.n	80014d6 <Paint_DrawBitMapXY+0xba>
		for (x = 0; x < Width; x++) { //8 pixel =  1 byte
 8001484:	2300      	movs	r3, #0
 8001486:	83fb      	strh	r3, [r7, #30]
 8001488:	e01e      	b.n	80014c8 <Paint_DrawBitMapXY+0xac>
			Addr_image = x + y * Width;
 800148a:	8bfa      	ldrh	r2, [r7, #30]
 800148c:	8bbb      	ldrh	r3, [r7, #28]
 800148e:	88f9      	ldrh	r1, [r7, #6]
 8001490:	fb01 f303 	mul.w	r3, r1, r3
 8001494:	4413      	add	r3, r2
 8001496:	617b      	str	r3, [r7, #20]
			Addr_buff = (x + Xstart) + (y + Ystart) * Paint.WidthByte;
 8001498:	8bfa      	ldrh	r2, [r7, #30]
 800149a:	897b      	ldrh	r3, [r7, #10]
 800149c:	441a      	add	r2, r3
 800149e:	8bb9      	ldrh	r1, [r7, #28]
 80014a0:	893b      	ldrh	r3, [r7, #8]
 80014a2:	440b      	add	r3, r1
 80014a4:	4911      	ldr	r1, [pc, #68]	@ (80014ec <Paint_DrawBitMapXY+0xd0>)
 80014a6:	8a49      	ldrh	r1, [r1, #18]
 80014a8:	fb01 f303 	mul.w	r3, r1, r3
 80014ac:	4413      	add	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
			Paint.Image[Addr_buff] = (unsigned char) image_buffer[Addr_image];
 80014b0:	68fa      	ldr	r2, [r7, #12]
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	441a      	add	r2, r3
 80014b6:	4b0d      	ldr	r3, [pc, #52]	@ (80014ec <Paint_DrawBitMapXY+0xd0>)
 80014b8:	6819      	ldr	r1, [r3, #0]
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	440b      	add	r3, r1
 80014be:	7812      	ldrb	r2, [r2, #0]
 80014c0:	701a      	strb	r2, [r3, #0]
		for (x = 0; x < Width; x++) { //8 pixel =  1 byte
 80014c2:	8bfb      	ldrh	r3, [r7, #30]
 80014c4:	3301      	adds	r3, #1
 80014c6:	83fb      	strh	r3, [r7, #30]
 80014c8:	8bfa      	ldrh	r2, [r7, #30]
 80014ca:	88fb      	ldrh	r3, [r7, #6]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d3dc      	bcc.n	800148a <Paint_DrawBitMapXY+0x6e>
	for (y = 0; y < Height; y++) {
 80014d0:	8bbb      	ldrh	r3, [r7, #28]
 80014d2:	3301      	adds	r3, #1
 80014d4:	83bb      	strh	r3, [r7, #28]
 80014d6:	8bba      	ldrh	r2, [r7, #28]
 80014d8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80014da:	429a      	cmp	r2, r3
 80014dc:	d3d2      	bcc.n	8001484 <Paint_DrawBitMapXY+0x68>
		}
	}
}
 80014de:	bf00      	nop
 80014e0:	bf00      	nop
 80014e2:	3724      	adds	r7, #36	@ 0x24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	200001f8 	.word	0x200001f8

080014f0 <RESET_HIG>:
#ifndef SRC_SSD1680_C_
#define SRC_SSD1680_C_

#include "main.h"

static void RESET_HIG() {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_SET);
 80014f4:	2201      	movs	r2, #1
 80014f6:	2108      	movs	r1, #8
 80014f8:	4802      	ldr	r0, [pc, #8]	@ (8001504 <RESET_HIG+0x14>)
 80014fa:	f001 fdf3 	bl	80030e4 <HAL_GPIO_WritePin>
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	48000400 	.word	0x48000400

08001508 <RESET_LOW>:

static void RESET_LOW() {
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_RESET);
 800150c:	2200      	movs	r2, #0
 800150e:	2108      	movs	r1, #8
 8001510:	4802      	ldr	r0, [pc, #8]	@ (800151c <RESET_LOW+0x14>)
 8001512:	f001 fde7 	bl	80030e4 <HAL_GPIO_WritePin>
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	48000400 	.word	0x48000400

08001520 <CS_HIG>:

static void CS_HIG() {
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_SET);
 8001524:	2201      	movs	r2, #1
 8001526:	2110      	movs	r1, #16
 8001528:	4802      	ldr	r0, [pc, #8]	@ (8001534 <CS_HIG+0x14>)
 800152a:	f001 fddb 	bl	80030e4 <HAL_GPIO_WritePin>
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	48000400 	.word	0x48000400

08001538 <CS_LOW>:

static void CS_LOW() {
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_RESET);
 800153c:	2200      	movs	r2, #0
 800153e:	2110      	movs	r1, #16
 8001540:	4802      	ldr	r0, [pc, #8]	@ (800154c <CS_LOW+0x14>)
 8001542:	f001 fdcf 	bl	80030e4 <HAL_GPIO_WritePin>
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	48000400 	.word	0x48000400

08001550 <DC_HIG>:

static void DC_HIG() {
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EPD_DC_GPIO_Port, EPD_DC_Pin, GPIO_PIN_SET);
 8001554:	2201      	movs	r2, #1
 8001556:	2120      	movs	r1, #32
 8001558:	4802      	ldr	r0, [pc, #8]	@ (8001564 <DC_HIG+0x14>)
 800155a:	f001 fdc3 	bl	80030e4 <HAL_GPIO_WritePin>
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	48000400 	.word	0x48000400

08001568 <DC_LOW>:

static void DC_LOW() {
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EPD_DC_GPIO_Port, EPD_DC_Pin, GPIO_PIN_RESET);
 800156c:	2200      	movs	r2, #0
 800156e:	2120      	movs	r1, #32
 8001570:	4802      	ldr	r0, [pc, #8]	@ (800157c <DC_LOW+0x14>)
 8001572:	f001 fdb7 	bl	80030e4 <HAL_GPIO_WritePin>
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	48000400 	.word	0x48000400

08001580 <BUSY_READ>:

static uint8_t BUSY_READ() {
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(EPD_BUSY_GPIO_Port, EPD_BUSY_Pin);
 8001584:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001588:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800158c:	f001 fd92 	bl	80030b4 <HAL_GPIO_ReadPin>
 8001590:	4603      	mov	r3, r0
}
 8001592:	4618      	mov	r0, r3
 8001594:	bd80      	pop	{r7, pc}

08001596 <Delay_ms>:

static void Delay_ms(uint16_t ms) {
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	4603      	mov	r3, r0
 800159e:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(ms);
 80015a0:	88fb      	ldrh	r3, [r7, #6]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f001 f8c0 	bl	8002728 <HAL_Delay>
}
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <SPI_WriteByte>:

extern SPI_HandleTypeDef hspi1;
static void SPI_WriteByte(uint8_t value) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &value, 1, 1000);
 80015ba:	1df9      	adds	r1, r7, #7
 80015bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015c0:	2201      	movs	r2, #1
 80015c2:	4803      	ldr	r0, [pc, #12]	@ (80015d0 <SPI_WriteByte+0x20>)
 80015c4:	f003 fa9b 	bl	8004afe <HAL_SPI_Transmit>
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20005aa0 	.word	0x20005aa0

080015d4 <EPD_Reset>:

static void EPD_Reset(void) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
	RESET_HIG();
 80015d8:	f7ff ff8a 	bl	80014f0 <RESET_HIG>
	HAL_Delay(20);
 80015dc:	2014      	movs	r0, #20
 80015de:	f001 f8a3 	bl	8002728 <HAL_Delay>
	RESET_LOW();
 80015e2:	f7ff ff91 	bl	8001508 <RESET_LOW>
	HAL_Delay(2);
 80015e6:	2002      	movs	r0, #2
 80015e8:	f001 f89e 	bl	8002728 <HAL_Delay>
	RESET_HIG();
 80015ec:	f7ff ff80 	bl	80014f0 <RESET_HIG>
	HAL_Delay(20);
 80015f0:	2014      	movs	r0, #20
 80015f2:	f001 f899 	bl	8002728 <HAL_Delay>
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}

080015fa <EPD_SendCommand>:

static void EPD_SendCommand(uint8_t Reg) {
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	4603      	mov	r3, r0
 8001602:	71fb      	strb	r3, [r7, #7]
	DC_LOW();
 8001604:	f7ff ffb0 	bl	8001568 <DC_LOW>
	CS_LOW();
 8001608:	f7ff ff96 	bl	8001538 <CS_LOW>
	SPI_WriteByte(Reg);
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff ffce 	bl	80015b0 <SPI_WriteByte>
	CS_HIG();
 8001614:	f7ff ff84 	bl	8001520 <CS_HIG>
}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <EPD_SendData>:

static void EPD_SendData(uint8_t Data) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
	DC_HIG();
 800162a:	f7ff ff91 	bl	8001550 <DC_HIG>
	CS_LOW();
 800162e:	f7ff ff83 	bl	8001538 <CS_LOW>
	SPI_WriteByte(Data);
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ffbb 	bl	80015b0 <SPI_WriteByte>
	CS_HIG();
 800163a:	f7ff ff71 	bl	8001520 <CS_HIG>
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <EPD_ReadBusy>:

static void EPD_ReadBusy(void) {
 8001646:	b580      	push	{r7, lr}
 8001648:	af00      	add	r7, sp, #0
	while (1) {	 //=1 BUSY
		if (BUSY_READ() == 0)
 800164a:	f7ff ff99 	bl	8001580 <BUSY_READ>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <EPD_ReadBusy+0x16>
			break;
		Delay_ms(10);
 8001654:	200a      	movs	r0, #10
 8001656:	f7ff ff9e 	bl	8001596 <Delay_ms>
		if (BUSY_READ() == 0)
 800165a:	e7f6      	b.n	800164a <EPD_ReadBusy+0x4>
			break;
 800165c:	bf00      	nop
	}
	HAL_Delay(10);
 800165e:	200a      	movs	r0, #10
 8001660:	f001 f862 	bl	8002728 <HAL_Delay>
}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}

08001668 <EPD_SetWindows>:

static void EPD_SetWindows(uint16_t Xstart, uint16_t Ystart, uint16_t Xend, uint16_t Yend) {
 8001668:	b590      	push	{r4, r7, lr}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4604      	mov	r4, r0
 8001670:	4608      	mov	r0, r1
 8001672:	4611      	mov	r1, r2
 8001674:	461a      	mov	r2, r3
 8001676:	4623      	mov	r3, r4
 8001678:	80fb      	strh	r3, [r7, #6]
 800167a:	4603      	mov	r3, r0
 800167c:	80bb      	strh	r3, [r7, #4]
 800167e:	460b      	mov	r3, r1
 8001680:	807b      	strh	r3, [r7, #2]
 8001682:	4613      	mov	r3, r2
 8001684:	803b      	strh	r3, [r7, #0]
	EPD_SendCommand(0x44); // SET_RAM_X_ADDRESS_START_END_POSITION
 8001686:	2044      	movs	r0, #68	@ 0x44
 8001688:	f7ff ffb7 	bl	80015fa <EPD_SendCommand>
	EPD_SendData((Xstart >> 3) & 0xFF);
 800168c:	88fb      	ldrh	r3, [r7, #6]
 800168e:	08db      	lsrs	r3, r3, #3
 8001690:	b29b      	uxth	r3, r3
 8001692:	b2db      	uxtb	r3, r3
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ffc3 	bl	8001620 <EPD_SendData>
	EPD_SendData((Xend >> 3) & 0xFF);
 800169a:	887b      	ldrh	r3, [r7, #2]
 800169c:	08db      	lsrs	r3, r3, #3
 800169e:	b29b      	uxth	r3, r3
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff ffbc 	bl	8001620 <EPD_SendData>

	EPD_SendCommand(0x45); // SET_RAM_Y_ADDRESS_START_END_POSITION
 80016a8:	2045      	movs	r0, #69	@ 0x45
 80016aa:	f7ff ffa6 	bl	80015fa <EPD_SendCommand>
	EPD_SendData(Ystart & 0xFF);
 80016ae:	88bb      	ldrh	r3, [r7, #4]
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff ffb4 	bl	8001620 <EPD_SendData>
	EPD_SendData((Ystart >> 8) & 0xFF);
 80016b8:	88bb      	ldrh	r3, [r7, #4]
 80016ba:	0a1b      	lsrs	r3, r3, #8
 80016bc:	b29b      	uxth	r3, r3
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff ffad 	bl	8001620 <EPD_SendData>
	EPD_SendData(Yend & 0xFF);
 80016c6:	883b      	ldrh	r3, [r7, #0]
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff ffa8 	bl	8001620 <EPD_SendData>
	EPD_SendData((Yend >> 8) & 0xFF);
 80016d0:	883b      	ldrh	r3, [r7, #0]
 80016d2:	0a1b      	lsrs	r3, r3, #8
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ffa1 	bl	8001620 <EPD_SendData>
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd90      	pop	{r4, r7, pc}

080016e6 <EPD_SetCursor>:

static void EPD_SetCursor(uint8_t Xstart, uint16_t Ystart) {
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	4603      	mov	r3, r0
 80016ee:	460a      	mov	r2, r1
 80016f0:	71fb      	strb	r3, [r7, #7]
 80016f2:	4613      	mov	r3, r2
 80016f4:	80bb      	strh	r3, [r7, #4]
	EPD_SendCommand(0x4E); // SET_RAM_X_ADDRESS_COUNTER
 80016f6:	204e      	movs	r0, #78	@ 0x4e
 80016f8:	f7ff ff7f 	bl	80015fa <EPD_SendCommand>
	EPD_SendData(Xstart & 0xFF);
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff ff8e 	bl	8001620 <EPD_SendData>

	EPD_SendCommand(0x4F); // SET_RAM_Y_ADDRESS_COUNTER
 8001704:	204f      	movs	r0, #79	@ 0x4f
 8001706:	f7ff ff78 	bl	80015fa <EPD_SendCommand>
	EPD_SendData(Ystart & 0xFF);
 800170a:	88bb      	ldrh	r3, [r7, #4]
 800170c:	b2db      	uxtb	r3, r3
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff ff86 	bl	8001620 <EPD_SendData>
	EPD_SendData((Ystart >> 8) & 0xFF);
 8001714:	88bb      	ldrh	r3, [r7, #4]
 8001716:	0a1b      	lsrs	r3, r3, #8
 8001718:	b29b      	uxth	r3, r3
 800171a:	b2db      	uxtb	r3, r3
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ff7f 	bl	8001620 <EPD_SendData>
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <EPD_TurnOnDisplay>:

static void EPD_TurnOnDisplay(void) {
 800172a:	b580      	push	{r7, lr}
 800172c:	af00      	add	r7, sp, #0
	EPD_SendCommand(0x18);
 800172e:	2018      	movs	r0, #24
 8001730:	f7ff ff63 	bl	80015fa <EPD_SendCommand>
	EPD_SendData(0X80);
 8001734:	2080      	movs	r0, #128	@ 0x80
 8001736:	f7ff ff73 	bl	8001620 <EPD_SendData>
	EPD_SendCommand(0x22);
 800173a:	2022      	movs	r0, #34	@ 0x22
 800173c:	f7ff ff5d 	bl	80015fa <EPD_SendCommand>
	EPD_SendData(0XF7);
 8001740:	20f7      	movs	r0, #247	@ 0xf7
 8001742:	f7ff ff6d 	bl	8001620 <EPD_SendData>
	EPD_SendCommand(0x20); // Activate Display Update Sequence
 8001746:	2020      	movs	r0, #32
 8001748:	f7ff ff57 	bl	80015fa <EPD_SendCommand>
	EPD_ReadBusy();
 800174c:	f7ff ff7b 	bl	8001646 <EPD_ReadBusy>
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}

08001754 <EPD_Init>:

void EPD_Init(uint16_t Width, uint16_t Height) {
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	460a      	mov	r2, r1
 800175e:	80fb      	strh	r3, [r7, #6]
 8001760:	4613      	mov	r3, r2
 8001762:	80bb      	strh	r3, [r7, #4]
	EPD_Reset();
 8001764:	f7ff ff36 	bl	80015d4 <EPD_Reset>

	EPD_ReadBusy();
 8001768:	f7ff ff6d 	bl	8001646 <EPD_ReadBusy>
	EPD_SendCommand(0x12);  //SWRESET
 800176c:	2012      	movs	r0, #18
 800176e:	f7ff ff44 	bl	80015fa <EPD_SendCommand>
	EPD_ReadBusy();
 8001772:	f7ff ff68 	bl	8001646 <EPD_ReadBusy>

	EPD_SendCommand(0x01); //Driver output control
 8001776:	2001      	movs	r0, #1
 8001778:	f7ff ff3f 	bl	80015fa <EPD_SendCommand>
	EPD_SendData(Height - 1); //(EPD_WIDTH -1) & 0xff
 800177c:	88bb      	ldrh	r3, [r7, #4]
 800177e:	b2db      	uxtb	r3, r3
 8001780:	3b01      	subs	r3, #1
 8001782:	b2db      	uxtb	r3, r3
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ff4b 	bl	8001620 <EPD_SendData>
	EPD_SendData(((Height - 1) >> 8) & 0x01); //(EPD_WIDTH -1) & 0x100
 800178a:	88bb      	ldrh	r3, [r7, #4]
 800178c:	3b01      	subs	r3, #1
 800178e:	121b      	asrs	r3, r3, #8
 8001790:	b2db      	uxtb	r3, r3
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	b2db      	uxtb	r3, r3
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ff41 	bl	8001620 <EPD_SendData>
	EPD_SendData(0x00); // 0x01 TB/ 0x02 SM/ 0x04 GD
 800179e:	2000      	movs	r0, #0
 80017a0:	f7ff ff3e 	bl	8001620 <EPD_SendData>
	 G295 ROW295 ROW294 ROW295 ROW147*/

	/* 0x04 GD: Selects the 1st output Gate
	 This bit is made to match the GATE layout connection on the panel. It defines the first scanning line. */

	EPD_SendCommand(0x11); //data entry mode
 80017a4:	2011      	movs	r0, #17
 80017a6:	f7ff ff28 	bl	80015fa <EPD_SendCommand>
	EPD_SendData(0x03); //0x04 Am / 0x03 ID[1:0]
 80017aa:	2003      	movs	r0, #3
 80017ac:	f7ff ff38 	bl	8001620 <EPD_SendData>
	 the RAM. When AM = “0”, the address counter is updated in the X direction. When AM = “1”, the
	 address counter is updated in the Y direction. When window addresses are selected, data are written
	 to the RAM area specified by the window addresses in the manner specified with ID[1:0] and AM
	 bits. */

	EPD_SetWindows(0, 0, Width - 1, Height - 1);
 80017b0:	88fb      	ldrh	r3, [r7, #6]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	88bb      	ldrh	r3, [r7, #4]
 80017b8:	3b01      	subs	r3, #1
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	2100      	movs	r1, #0
 80017be:	2000      	movs	r0, #0
 80017c0:	f7ff ff52 	bl	8001668 <EPD_SetWindows>
	EPD_SetCursor(0, 0);
 80017c4:	2100      	movs	r1, #0
 80017c6:	2000      	movs	r0, #0
 80017c8:	f7ff ff8d 	bl	80016e6 <EPD_SetCursor>

	EPD_SendCommand(0x3C); //BorderWavefrom
 80017cc:	203c      	movs	r0, #60	@ 0x3c
 80017ce:	f7ff ff14 	bl	80015fa <EPD_SendCommand>
	EPD_SendData(0x05);
 80017d2:	2005      	movs	r0, #5
 80017d4:	f7ff ff24 	bl	8001620 <EPD_SendData>

	EPD_SendCommand(0x21); //  Display update control
 80017d8:	2021      	movs	r0, #33	@ 0x21
 80017da:	f7ff ff0e 	bl	80015fa <EPD_SendCommand>
	EPD_SendData(0x00);
 80017de:	2000      	movs	r0, #0
 80017e0:	f7ff ff1e 	bl	8001620 <EPD_SendData>
	EPD_SendData(0x80);
 80017e4:	2080      	movs	r0, #128	@ 0x80
 80017e6:	f7ff ff1b 	bl	8001620 <EPD_SendData>

	EPD_ReadBusy();
 80017ea:	f7ff ff2c 	bl	8001646 <EPD_ReadBusy>
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <EPD_Display>:
		}
	}
	EPD_TurnOnDisplay();
}

void EPD_Display(const uint8_t *blackImage, const uint8_t *redImage, uint16_t Width, uint16_t Height) {
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b086      	sub	sp, #24
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	60f8      	str	r0, [r7, #12]
 80017fe:	60b9      	str	r1, [r7, #8]
 8001800:	4611      	mov	r1, r2
 8001802:	461a      	mov	r2, r3
 8001804:	460b      	mov	r3, r1
 8001806:	80fb      	strh	r3, [r7, #6]
 8001808:	4613      	mov	r3, r2
 800180a:	80bb      	strh	r3, [r7, #4]
	Width = (Width % 8 == 0) ? (Width / 8) : (Width / 8 + 1);
 800180c:	88fb      	ldrh	r3, [r7, #6]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	b29b      	uxth	r3, r3
 8001814:	2b00      	cmp	r3, #0
 8001816:	d103      	bne.n	8001820 <EPD_Display+0x2a>
 8001818:	88fb      	ldrh	r3, [r7, #6]
 800181a:	08db      	lsrs	r3, r3, #3
 800181c:	b29b      	uxth	r3, r3
 800181e:	e004      	b.n	800182a <EPD_Display+0x34>
 8001820:	88fb      	ldrh	r3, [r7, #6]
 8001822:	08db      	lsrs	r3, r3, #3
 8001824:	b29b      	uxth	r3, r3
 8001826:	3301      	adds	r3, #1
 8001828:	b29b      	uxth	r3, r3
 800182a:	80fb      	strh	r3, [r7, #6]

	if (blackImage != NULL) {
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d023      	beq.n	800187a <EPD_Display+0x84>
		EPD_SendCommand(0x24);
 8001832:	2024      	movs	r0, #36	@ 0x24
 8001834:	f7ff fee1 	bl	80015fa <EPD_SendCommand>
		for (uint16_t j = 0; j < Height; j++) {
 8001838:	2300      	movs	r3, #0
 800183a:	82fb      	strh	r3, [r7, #22]
 800183c:	e019      	b.n	8001872 <EPD_Display+0x7c>
			for (uint16_t i = 0; i < Width; i++) {
 800183e:	2300      	movs	r3, #0
 8001840:	82bb      	strh	r3, [r7, #20]
 8001842:	e00f      	b.n	8001864 <EPD_Display+0x6e>
				EPD_SendData(blackImage[i + j * Width]);
 8001844:	8aba      	ldrh	r2, [r7, #20]
 8001846:	8afb      	ldrh	r3, [r7, #22]
 8001848:	88f9      	ldrh	r1, [r7, #6]
 800184a:	fb01 f303 	mul.w	r3, r1, r3
 800184e:	4413      	add	r3, r2
 8001850:	461a      	mov	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	4413      	add	r3, r2
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff fee1 	bl	8001620 <EPD_SendData>
			for (uint16_t i = 0; i < Width; i++) {
 800185e:	8abb      	ldrh	r3, [r7, #20]
 8001860:	3301      	adds	r3, #1
 8001862:	82bb      	strh	r3, [r7, #20]
 8001864:	8aba      	ldrh	r2, [r7, #20]
 8001866:	88fb      	ldrh	r3, [r7, #6]
 8001868:	429a      	cmp	r2, r3
 800186a:	d3eb      	bcc.n	8001844 <EPD_Display+0x4e>
		for (uint16_t j = 0; j < Height; j++) {
 800186c:	8afb      	ldrh	r3, [r7, #22]
 800186e:	3301      	adds	r3, #1
 8001870:	82fb      	strh	r3, [r7, #22]
 8001872:	8afa      	ldrh	r2, [r7, #22]
 8001874:	88bb      	ldrh	r3, [r7, #4]
 8001876:	429a      	cmp	r2, r3
 8001878:	d3e1      	bcc.n	800183e <EPD_Display+0x48>
			}
		}
	}
	if (redImage != NULL) {
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d023      	beq.n	80018c8 <EPD_Display+0xd2>
		EPD_SendCommand(0x26);
 8001880:	2026      	movs	r0, #38	@ 0x26
 8001882:	f7ff feba 	bl	80015fa <EPD_SendCommand>
		for (uint16_t j = 0; j < Height; j++) {
 8001886:	2300      	movs	r3, #0
 8001888:	827b      	strh	r3, [r7, #18]
 800188a:	e019      	b.n	80018c0 <EPD_Display+0xca>
			for (uint16_t i = 0; i < Width; i++) {
 800188c:	2300      	movs	r3, #0
 800188e:	823b      	strh	r3, [r7, #16]
 8001890:	e00f      	b.n	80018b2 <EPD_Display+0xbc>
				EPD_SendData(redImage[i + j * Width]);
 8001892:	8a3a      	ldrh	r2, [r7, #16]
 8001894:	8a7b      	ldrh	r3, [r7, #18]
 8001896:	88f9      	ldrh	r1, [r7, #6]
 8001898:	fb01 f303 	mul.w	r3, r1, r3
 800189c:	4413      	add	r3, r2
 800189e:	461a      	mov	r2, r3
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	4413      	add	r3, r2
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff feba 	bl	8001620 <EPD_SendData>
			for (uint16_t i = 0; i < Width; i++) {
 80018ac:	8a3b      	ldrh	r3, [r7, #16]
 80018ae:	3301      	adds	r3, #1
 80018b0:	823b      	strh	r3, [r7, #16]
 80018b2:	8a3a      	ldrh	r2, [r7, #16]
 80018b4:	88fb      	ldrh	r3, [r7, #6]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d3eb      	bcc.n	8001892 <EPD_Display+0x9c>
		for (uint16_t j = 0; j < Height; j++) {
 80018ba:	8a7b      	ldrh	r3, [r7, #18]
 80018bc:	3301      	adds	r3, #1
 80018be:	827b      	strh	r3, [r7, #18]
 80018c0:	8a7a      	ldrh	r2, [r7, #18]
 80018c2:	88bb      	ldrh	r3, [r7, #4]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d3e1      	bcc.n	800188c <EPD_Display+0x96>
			}
		}
	}
	EPD_TurnOnDisplay();
 80018c8:	f7ff ff2f 	bl	800172a <EPD_TurnOnDisplay>
}
 80018cc:	bf00      	nop
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <EPD_Sleep>:

void EPD_Sleep() {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
	EPD_SendCommand(0x10); //enter deep sleep
 80018d8:	2010      	movs	r0, #16
 80018da:	f7ff fe8e 	bl	80015fa <EPD_SendCommand>
	EPD_SendData(0x01);
 80018de:	2001      	movs	r0, #1
 80018e0:	f7ff fe9e 	bl	8001620 <EPD_SendData>
	HAL_Delay(100);
 80018e4:	2064      	movs	r0, #100	@ 0x64
 80018e6:	f000 ff1f 	bl	8002728 <HAL_Delay>
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
	...

080018f0 <demo_V11>:
void demo_V11();
void demo_V22();

extern unsigned char gImage_logo248x46[1488]; //248x46

void demo_V11() {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
    static uint8_t BlackImage[120/8 * 250];
    static uint8_t RedImage[120/8 * 250];

    int width_bytes = 128 / 8;
 80018f6:	2310      	movs	r3, #16
 80018f8:	60fb      	str	r3, [r7, #12]

    EPD_Init(120, 250);
 80018fa:	21fa      	movs	r1, #250	@ 0xfa
 80018fc:	2078      	movs	r0, #120	@ 0x78
 80018fe:	f7ff ff29 	bl	8001754 <EPD_Init>
    HAL_Delay(300);
 8001902:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001906:	f000 ff0f 	bl	8002728 <HAL_Delay>

    // 1. Wyczyść oba bufory na biało (bit 1 = biały)
    memset(BlackImage, 0xFF, sizeof(BlackImage));
 800190a:	f640 62a6 	movw	r2, #3750	@ 0xea6
 800190e:	21ff      	movs	r1, #255	@ 0xff
 8001910:	481f      	ldr	r0, [pc, #124]	@ (8001990 <demo_V11+0xa0>)
 8001912:	f005 ffa1 	bl	8007858 <memset>


    // 2. Prostokąt 2: czarny (128x100) od wiersza 100 do 199
    for (int y = 50; y < 100; y++) {
 8001916:	2332      	movs	r3, #50	@ 0x32
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	e00f      	b.n	800193c <demo_V11+0x4c>
        int offset = y * width_bytes;
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	fb02 f303 	mul.w	r3, r2, r3
 8001924:	607b      	str	r3, [r7, #4]
        memset(&BlackImage[offset], 0x00, width_bytes);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a19      	ldr	r2, [pc, #100]	@ (8001990 <demo_V11+0xa0>)
 800192a:	4413      	add	r3, r2
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	2100      	movs	r1, #0
 8001930:	4618      	mov	r0, r3
 8001932:	f005 ff91 	bl	8007858 <memset>
    for (int y = 50; y < 100; y++) {
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	3301      	adds	r3, #1
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	2b63      	cmp	r3, #99	@ 0x63
 8001940:	ddec      	ble.n	800191c <demo_V11+0x2c>
    }

    // 3. Prostokąt 3: czerwony (128x96) od wiersza 200 do 295
    for (int y = 200; y < 296; y++) {
 8001942:	23c8      	movs	r3, #200	@ 0xc8
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	e00f      	b.n	8001968 <demo_V11+0x78>
        int offset = y * width_bytes;
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	fb02 f303 	mul.w	r3, r2, r3
 8001950:	60bb      	str	r3, [r7, #8]
        memset(&BlackImage[offset], 0x00, width_bytes);
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	4a0e      	ldr	r2, [pc, #56]	@ (8001990 <demo_V11+0xa0>)
 8001956:	4413      	add	r3, r2
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	2100      	movs	r1, #0
 800195c:	4618      	mov	r0, r3
 800195e:	f005 ff7b 	bl	8007858 <memset>
    for (int y = 200; y < 296; y++) {
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	3301      	adds	r3, #1
 8001966:	613b      	str	r3, [r7, #16]
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	f5b3 7f94 	cmp.w	r3, #296	@ 0x128
 800196e:	dbeb      	blt.n	8001948 <demo_V11+0x58>
    }

    // 5. Wyświetl
    EPD_Display(BlackImage, RedImage, 120, 250);
 8001970:	23fa      	movs	r3, #250	@ 0xfa
 8001972:	2278      	movs	r2, #120	@ 0x78
 8001974:	4907      	ldr	r1, [pc, #28]	@ (8001994 <demo_V11+0xa4>)
 8001976:	4806      	ldr	r0, [pc, #24]	@ (8001990 <demo_V11+0xa0>)
 8001978:	f7ff ff3d 	bl	80017f6 <EPD_Display>
    HAL_Delay(3000);
 800197c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001980:	f000 fed2 	bl	8002728 <HAL_Delay>

    EPD_Sleep();
 8001984:	f7ff ffa6 	bl	80018d4 <EPD_Sleep>
}
 8001988:	bf00      	nop
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000210 	.word	0x20000210
 8001994:	200010b8 	.word	0x200010b8

08001998 <demo_V22>:

void demo_V22(){
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af02      	add	r7, sp, #8

    static uint8_t BlackImage[120/8 * 250];
    static uint8_t RedImage[120/8 * 250];

    EPD_Init(120, 250);
 800199e:	21fa      	movs	r1, #250	@ 0xfa
 80019a0:	2078      	movs	r0, #120	@ 0x78
 80019a2:	f7ff fed7 	bl	8001754 <EPD_Init>
    HAL_Delay(300);
 80019a6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80019aa:	f000 febd 	bl	8002728 <HAL_Delay>

    memset(BlackImage, 0xFF, sizeof(BlackImage));
 80019ae:	f640 62a6 	movw	r2, #3750	@ 0xea6
 80019b2:	21ff      	movs	r1, #255	@ 0xff
 80019b4:	4812      	ldr	r0, [pc, #72]	@ (8001a00 <demo_V22+0x68>)
 80019b6:	f005 ff4f 	bl	8007858 <memset>

    Paint_NewImage(BlackImage, 120, 250, 0, WHITE);
 80019ba:	23ff      	movs	r3, #255	@ 0xff
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	2300      	movs	r3, #0
 80019c0:	22fa      	movs	r2, #250	@ 0xfa
 80019c2:	2178      	movs	r1, #120	@ 0x78
 80019c4:	480e      	ldr	r0, [pc, #56]	@ (8001a00 <demo_V22+0x68>)
 80019c6:	f7ff fa67 	bl	8000e98 <Paint_NewImage>
    Paint_SelectImage(BlackImage);
 80019ca:	480d      	ldr	r0, [pc, #52]	@ (8001a00 <demo_V22+0x68>)
 80019cc:	f7ff fabc 	bl	8000f48 <Paint_SelectImage>
    Paint_DrawBitMapXY(gImage_logo248x46,0,40,46,100);
 80019d0:	2364      	movs	r3, #100	@ 0x64
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	232e      	movs	r3, #46	@ 0x2e
 80019d6:	2228      	movs	r2, #40	@ 0x28
 80019d8:	2100      	movs	r1, #0
 80019da:	480a      	ldr	r0, [pc, #40]	@ (8001a04 <demo_V22+0x6c>)
 80019dc:	f7ff fd1e 	bl	800141c <Paint_DrawBitMapXY>
    // 5. Wyświetl
    EPD_Display(BlackImage, RedImage, 120, 250);
 80019e0:	23fa      	movs	r3, #250	@ 0xfa
 80019e2:	2278      	movs	r2, #120	@ 0x78
 80019e4:	4908      	ldr	r1, [pc, #32]	@ (8001a08 <demo_V22+0x70>)
 80019e6:	4806      	ldr	r0, [pc, #24]	@ (8001a00 <demo_V22+0x68>)
 80019e8:	f7ff ff05 	bl	80017f6 <EPD_Display>
    HAL_Delay(3000);
 80019ec:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80019f0:	f000 fe9a 	bl	8002728 <HAL_Delay>

    EPD_Sleep();
 80019f4:	f7ff ff6e 	bl	80018d4 <EPD_Sleep>
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20001f60 	.word	0x20001f60
 8001a04:	08009ac8 	.word	0x08009ac8
 8001a08:	20002e08 	.word	0x20002e08

08001a0c <demo4>:
    HAL_Delay(3000);

    EPD_Sleep();
}

void demo4(const char * txt){
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af02      	add	r7, sp, #8
 8001a12:	6078      	str	r0, [r7, #4]

	    uint16_t x_temp_title_text = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	81fb      	strh	r3, [r7, #14]
	    uint16_t y_temp_title_text = 5;
 8001a18:	2305      	movs	r3, #5
 8001a1a:	81bb      	strh	r3, [r7, #12]

	    static uint8_t BlackImage[120/8 * 250];
	    static uint8_t RedImage[120/8 * 250];

	    int width_bytes = 128 / 8;
 8001a1c:	2310      	movs	r3, #16
 8001a1e:	60bb      	str	r3, [r7, #8]

	    EPD_Init(120, 250);
 8001a20:	21fa      	movs	r1, #250	@ 0xfa
 8001a22:	2078      	movs	r0, #120	@ 0x78
 8001a24:	f7ff fe96 	bl	8001754 <EPD_Init>
	    HAL_Delay(300);
 8001a28:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001a2c:	f000 fe7c 	bl	8002728 <HAL_Delay>

	    // 1. Wyczyść oba bufory na biało (bit 1 = biały)
	    memset(BlackImage, 0xFF, sizeof(BlackImage));
 8001a30:	f640 62a6 	movw	r2, #3750	@ 0xea6
 8001a34:	21ff      	movs	r1, #255	@ 0xff
 8001a36:	4816      	ldr	r0, [pc, #88]	@ (8001a90 <demo4+0x84>)
 8001a38:	f005 ff0e 	bl	8007858 <memset>

	    // 4. Teraz wczytaj tekst do BlackImage i RedImage za pomocą Paint:
	    Paint_NewImage(BlackImage, 120, 250, 0, WHITE);
 8001a3c:	23ff      	movs	r3, #255	@ 0xff
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	2300      	movs	r3, #0
 8001a42:	22fa      	movs	r2, #250	@ 0xfa
 8001a44:	2178      	movs	r1, #120	@ 0x78
 8001a46:	4812      	ldr	r0, [pc, #72]	@ (8001a90 <demo4+0x84>)
 8001a48:	f7ff fa26 	bl	8000e98 <Paint_NewImage>
	    Paint_SelectImage(BlackImage);
 8001a4c:	4810      	ldr	r0, [pc, #64]	@ (8001a90 <demo4+0x84>)
 8001a4e:	f7ff fa7b 	bl	8000f48 <Paint_SelectImage>

	    Paint_DrawString_EN(x_temp_title_text, y_temp_title_text, txt, &Font12, BLACK, WHITE);
 8001a52:	89b9      	ldrh	r1, [r7, #12]
 8001a54:	89f8      	ldrh	r0, [r7, #14]
 8001a56:	23ff      	movs	r3, #255	@ 0xff
 8001a58:	9301      	str	r3, [sp, #4]
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a94 <demo4+0x88>)
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	f7ff fc89 	bl	8001378 <Paint_DrawString_EN>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a66:	b672      	cpsid	i
}
 8001a68:	bf00      	nop

	    // 5. Wyświetl
	    __disable_irq();
	    EPD_Display(BlackImage, RedImage, 120, 250);
 8001a6a:	23fa      	movs	r3, #250	@ 0xfa
 8001a6c:	2278      	movs	r2, #120	@ 0x78
 8001a6e:	490a      	ldr	r1, [pc, #40]	@ (8001a98 <demo4+0x8c>)
 8001a70:	4807      	ldr	r0, [pc, #28]	@ (8001a90 <demo4+0x84>)
 8001a72:	f7ff fec0 	bl	80017f6 <EPD_Display>
  __ASM volatile ("cpsie i" : : : "memory");
 8001a76:	b662      	cpsie	i
}
 8001a78:	bf00      	nop
	    __enable_irq();

	    HAL_Delay(3000);
 8001a7a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001a7e:	f000 fe53 	bl	8002728 <HAL_Delay>


	    EPD_Sleep();
 8001a82:	f7ff ff27 	bl	80018d4 <EPD_Sleep>
}
 8001a86:	bf00      	nop
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20003cb0 	.word	0x20003cb0
 8001a94:	20000000 	.word	0x20000000
 8001a98:	20004b58 	.word	0x20004b58

08001a9c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b088      	sub	sp, #32
 8001aa0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa2:	f107 030c 	add.w	r3, r7, #12
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	609a      	str	r2, [r3, #8]
 8001aae:	60da      	str	r2, [r3, #12]
 8001ab0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab2:	4b38      	ldr	r3, [pc, #224]	@ (8001b94 <MX_GPIO_Init+0xf8>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab6:	4a37      	ldr	r2, [pc, #220]	@ (8001b94 <MX_GPIO_Init+0xf8>)
 8001ab8:	f043 0304 	orr.w	r3, r3, #4
 8001abc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001abe:	4b35      	ldr	r3, [pc, #212]	@ (8001b94 <MX_GPIO_Init+0xf8>)
 8001ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ac2:	f003 0304 	and.w	r3, r3, #4
 8001ac6:	60bb      	str	r3, [r7, #8]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aca:	4b32      	ldr	r3, [pc, #200]	@ (8001b94 <MX_GPIO_Init+0xf8>)
 8001acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ace:	4a31      	ldr	r2, [pc, #196]	@ (8001b94 <MX_GPIO_Init+0xf8>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ad6:	4b2f      	ldr	r3, [pc, #188]	@ (8001b94 <MX_GPIO_Init+0xf8>)
 8001ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	607b      	str	r3, [r7, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae2:	4b2c      	ldr	r3, [pc, #176]	@ (8001b94 <MX_GPIO_Init+0xf8>)
 8001ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae6:	4a2b      	ldr	r2, [pc, #172]	@ (8001b94 <MX_GPIO_Init+0xf8>)
 8001ae8:	f043 0302 	orr.w	r3, r3, #2
 8001aec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aee:	4b29      	ldr	r3, [pc, #164]	@ (8001b94 <MX_GPIO_Init+0xf8>)
 8001af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	603b      	str	r3, [r7, #0]
 8001af8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT_GPIO_Port, DHT_Pin, GPIO_PIN_RESET);
 8001afa:	2200      	movs	r2, #0
 8001afc:	2110      	movs	r1, #16
 8001afe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b02:	f001 faef 	bl	80030e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EPD_RST_Pin|EPD_DC_Pin, GPIO_PIN_RESET);
 8001b06:	2200      	movs	r2, #0
 8001b08:	2128      	movs	r1, #40	@ 0x28
 8001b0a:	4823      	ldr	r0, [pc, #140]	@ (8001b98 <MX_GPIO_Init+0xfc>)
 8001b0c:	f001 faea 	bl	80030e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_SET);
 8001b10:	2201      	movs	r2, #1
 8001b12:	2110      	movs	r1, #16
 8001b14:	4820      	ldr	r0, [pc, #128]	@ (8001b98 <MX_GPIO_Init+0xfc>)
 8001b16:	f001 fae5 	bl	80030e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DHT_Pin;
 8001b1a:	2310      	movs	r3, #16
 8001b1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DHT_GPIO_Port, &GPIO_InitStruct);
 8001b2a:	f107 030c 	add.w	r3, r7, #12
 8001b2e:	4619      	mov	r1, r3
 8001b30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b34:	f001 f914 	bl	8002d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EPD_BUSY_Pin;
 8001b38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EPD_BUSY_GPIO_Port, &GPIO_InitStruct);
 8001b46:	f107 030c 	add.w	r3, r7, #12
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b50:	f001 f906 	bl	8002d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EPD_RST_Pin;
 8001b54:	2308      	movs	r3, #8
 8001b56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b60:	2300      	movs	r3, #0
 8001b62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EPD_RST_GPIO_Port, &GPIO_InitStruct);
 8001b64:	f107 030c 	add.w	r3, r7, #12
 8001b68:	4619      	mov	r1, r3
 8001b6a:	480b      	ldr	r0, [pc, #44]	@ (8001b98 <MX_GPIO_Init+0xfc>)
 8001b6c:	f001 f8f8 	bl	8002d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = EPD_CS_Pin|EPD_DC_Pin;
 8001b70:	2330      	movs	r3, #48	@ 0x30
 8001b72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b74:	2301      	movs	r3, #1
 8001b76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b80:	f107 030c 	add.w	r3, r7, #12
 8001b84:	4619      	mov	r1, r3
 8001b86:	4804      	ldr	r0, [pc, #16]	@ (8001b98 <MX_GPIO_Init+0xfc>)
 8001b88:	f001 f8ea 	bl	8002d60 <HAL_GPIO_Init>

}
 8001b8c:	bf00      	nop
 8001b8e:	3720      	adds	r7, #32
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40021000 	.word	0x40021000
 8001b98:	48000400 	.word	0x48000400

08001b9c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001ba0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c10 <MX_I2C3_Init+0x74>)
 8001ba2:	4a1c      	ldr	r2, [pc, #112]	@ (8001c14 <MX_I2C3_Init+0x78>)
 8001ba4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10D19CE4;
 8001ba6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c10 <MX_I2C3_Init+0x74>)
 8001ba8:	4a1b      	ldr	r2, [pc, #108]	@ (8001c18 <MX_I2C3_Init+0x7c>)
 8001baa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001bac:	4b18      	ldr	r3, [pc, #96]	@ (8001c10 <MX_I2C3_Init+0x74>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bb2:	4b17      	ldr	r3, [pc, #92]	@ (8001c10 <MX_I2C3_Init+0x74>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bb8:	4b15      	ldr	r3, [pc, #84]	@ (8001c10 <MX_I2C3_Init+0x74>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001bbe:	4b14      	ldr	r3, [pc, #80]	@ (8001c10 <MX_I2C3_Init+0x74>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001bc4:	4b12      	ldr	r3, [pc, #72]	@ (8001c10 <MX_I2C3_Init+0x74>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bca:	4b11      	ldr	r3, [pc, #68]	@ (8001c10 <MX_I2C3_Init+0x74>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001c10 <MX_I2C3_Init+0x74>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001bd6:	480e      	ldr	r0, [pc, #56]	@ (8001c10 <MX_I2C3_Init+0x74>)
 8001bd8:	f001 fa9c 	bl	8003114 <HAL_I2C_Init>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001be2:	f000 f9bf 	bl	8001f64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001be6:	2100      	movs	r1, #0
 8001be8:	4809      	ldr	r0, [pc, #36]	@ (8001c10 <MX_I2C3_Init+0x74>)
 8001bea:	f001 fb2e 	bl	800324a <HAL_I2CEx_ConfigAnalogFilter>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001bf4:	f000 f9b6 	bl	8001f64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	4805      	ldr	r0, [pc, #20]	@ (8001c10 <MX_I2C3_Init+0x74>)
 8001bfc:	f001 fb70 	bl	80032e0 <HAL_I2CEx_ConfigDigitalFilter>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001c06:	f000 f9ad 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20005a00 	.word	0x20005a00
 8001c14:	40005c00 	.word	0x40005c00
 8001c18:	10d19ce4 	.word	0x10d19ce4

08001c1c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b0ac      	sub	sp, #176	@ 0xb0
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
 8001c32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	2288      	movs	r2, #136	@ 0x88
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f005 fe0b 	bl	8007858 <memset>
  if(i2cHandle->Instance==I2C3)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a21      	ldr	r2, [pc, #132]	@ (8001ccc <HAL_I2C_MspInit+0xb0>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d13b      	bne.n	8001cc4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001c4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c50:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001c52:	2300      	movs	r3, #0
 8001c54:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c56:	f107 0314 	add.w	r3, r7, #20
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f002 f9f0 	bl	8004040 <HAL_RCCEx_PeriphCLKConfig>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001c66:	f000 f97d 	bl	8001f64 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c6a:	4b19      	ldr	r3, [pc, #100]	@ (8001cd0 <HAL_I2C_MspInit+0xb4>)
 8001c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c6e:	4a18      	ldr	r2, [pc, #96]	@ (8001cd0 <HAL_I2C_MspInit+0xb4>)
 8001c70:	f043 0304 	orr.w	r3, r3, #4
 8001c74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c76:	4b16      	ldr	r3, [pc, #88]	@ (8001cd0 <HAL_I2C_MspInit+0xb4>)
 8001c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c82:	2303      	movs	r3, #3
 8001c84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c88:	2312      	movs	r3, #18
 8001c8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c94:	2303      	movs	r3, #3
 8001c96:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c9a:	2304      	movs	r3, #4
 8001c9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ca0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	480b      	ldr	r0, [pc, #44]	@ (8001cd4 <HAL_I2C_MspInit+0xb8>)
 8001ca8:	f001 f85a 	bl	8002d60 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001cac:	4b08      	ldr	r3, [pc, #32]	@ (8001cd0 <HAL_I2C_MspInit+0xb4>)
 8001cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb0:	4a07      	ldr	r2, [pc, #28]	@ (8001cd0 <HAL_I2C_MspInit+0xb4>)
 8001cb2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001cb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cb8:	4b05      	ldr	r3, [pc, #20]	@ (8001cd0 <HAL_I2C_MspInit+0xb4>)
 8001cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cbc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001cc4:	bf00      	nop
 8001cc6:	37b0      	adds	r7, #176	@ 0xb0
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40005c00 	.word	0x40005c00
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	48000800 	.word	0x48000800

08001cd8 <_write>:
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
int _write(int file, char* ptr, int len){
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart4, ptr, len, 50);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	2332      	movs	r3, #50	@ 0x32
 8001cea:	68b9      	ldr	r1, [r7, #8]
 8001cec:	4803      	ldr	r0, [pc, #12]	@ (8001cfc <_write+0x24>)
 8001cee:	f003 fbb5 	bl	800545c <HAL_UART_Transmit>
	return len;
 8001cf2:	687b      	ldr	r3, [r7, #4]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20005b54 	.word	0x20005b54

08001d00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d04:	f000 fc94 	bl	8002630 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d08:	f000 f852 	bl	8001db0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d0c:	f7ff fec6 	bl	8001a9c <MX_GPIO_Init>
  MX_SPI1_Init();
 8001d10:	f000 f934 	bl	8001f7c <MX_SPI1_Init>
  MX_I2C3_Init();
 8001d14:	f7ff ff42 	bl	8001b9c <MX_I2C3_Init>
  MX_UART4_Init();
 8001d18:	f000 fb2a 	bl	8002370 <MX_UART4_Init>
  MX_TIM6_Init();
 8001d1c:	f000 fad2 	bl	80022c4 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8001d20:	f000 fb56 	bl	80023d0 <MX_USART2_UART_Init>

  HAL_UART_Receive_IT(&huart4, &rxData, 1);
 8001d24:	2201      	movs	r2, #1
 8001d26:	4919      	ldr	r1, [pc, #100]	@ (8001d8c <main+0x8c>)
 8001d28:	4819      	ldr	r0, [pc, #100]	@ (8001d90 <main+0x90>)
 8001d2a:	f003 fc21 	bl	8005570 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN 2 */
  //SGP40_Init(&hi2c3);
  printf("Menu.\r\n");
 8001d2e:	4819      	ldr	r0, [pc, #100]	@ (8001d94 <main+0x94>)
 8001d30:	f005 fcb2 	bl	8007698 <puts>
  HAL_Delay(1000);
 8001d34:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d38:	f000 fcf6 	bl	8002728 <HAL_Delay>
  printf("Wybierz opcje: 0-obraz, 1-ksztalty, 2-tekst do demo\r\n");
 8001d3c:	4816      	ldr	r0, [pc, #88]	@ (8001d98 <main+0x98>)
 8001d3e:	f005 fcab 	bl	8007698 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      if(flag_demo_V22)
 8001d42:	4b16      	ldr	r3, [pc, #88]	@ (8001d9c <main+0x9c>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d004      	beq.n	8001d56 <main+0x56>
      {
          demo_V22();
 8001d4c:	f7ff fe24 	bl	8001998 <demo_V22>
          flag_demo_V22 = 0;
 8001d50:	4b12      	ldr	r3, [pc, #72]	@ (8001d9c <main+0x9c>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	701a      	strb	r2, [r3, #0]
      }

      if(flag_demo_V11)
 8001d56:	4b12      	ldr	r3, [pc, #72]	@ (8001da0 <main+0xa0>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d004      	beq.n	8001d6a <main+0x6a>
      {
          demo_V11();
 8001d60:	f7ff fdc6 	bl	80018f0 <demo_V11>
          flag_demo_V11 = 0;
 8001d64:	4b0e      	ldr	r3, [pc, #56]	@ (8001da0 <main+0xa0>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	701a      	strb	r2, [r3, #0]
      }

      if(flag_demo4)
 8001d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001da4 <main+0xa4>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0e6      	beq.n	8001d42 <main+0x42>
      {
    	  printf("Odebrano tekst: %s\r\n", txt);
 8001d74:	490c      	ldr	r1, [pc, #48]	@ (8001da8 <main+0xa8>)
 8001d76:	480d      	ldr	r0, [pc, #52]	@ (8001dac <main+0xac>)
 8001d78:	f005 fc26 	bl	80075c8 <iprintf>
          demo4(txt);
 8001d7c:	480a      	ldr	r0, [pc, #40]	@ (8001da8 <main+0xa8>)
 8001d7e:	f7ff fe45 	bl	8001a0c <demo4>
          flag_demo4 = 0;
 8001d82:	4b08      	ldr	r3, [pc, #32]	@ (8001da4 <main+0xa4>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]
      if(flag_demo_V22)
 8001d88:	e7db      	b.n	8001d42 <main+0x42>
 8001d8a:	bf00      	nop
 8001d8c:	20005a54 	.word	0x20005a54
 8001d90:	20005b54 	.word	0x20005b54
 8001d94:	08009590 	.word	0x08009590
 8001d98:	08009598 	.word	0x08009598
 8001d9c:	20005a9c 	.word	0x20005a9c
 8001da0:	20005a9d 	.word	0x20005a9d
 8001da4:	20005a9e 	.word	0x20005a9e
 8001da8:	20005a58 	.word	0x20005a58
 8001dac:	080095d0 	.word	0x080095d0

08001db0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b096      	sub	sp, #88	@ 0x58
 8001db4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001db6:	f107 0314 	add.w	r3, r7, #20
 8001dba:	2244      	movs	r2, #68	@ 0x44
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f005 fd4a 	bl	8007858 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dc4:	463b      	mov	r3, r7
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	605a      	str	r2, [r3, #4]
 8001dcc:	609a      	str	r2, [r3, #8]
 8001dce:	60da      	str	r2, [r3, #12]
 8001dd0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001dd2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001dd6:	f001 fadd 	bl	8003394 <HAL_PWREx_ControlVoltageScaling>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001de0:	f000 f8c0 	bl	8001f64 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001de4:	2302      	movs	r3, #2
 8001de6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001de8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dee:	2310      	movs	r3, #16
 8001df0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001df2:	2302      	movs	r3, #2
 8001df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001df6:	2302      	movs	r3, #2
 8001df8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001dfe:	230a      	movs	r3, #10
 8001e00:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001e02:	2307      	movs	r3, #7
 8001e04:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001e06:	2302      	movs	r3, #2
 8001e08:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e0e:	f107 0314 	add.w	r3, r7, #20
 8001e12:	4618      	mov	r0, r3
 8001e14:	f001 fb14 	bl	8003440 <HAL_RCC_OscConfig>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001e1e:	f000 f8a1 	bl	8001f64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e22:	230f      	movs	r3, #15
 8001e24:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e26:	2303      	movs	r3, #3
 8001e28:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e32:	2300      	movs	r3, #0
 8001e34:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001e36:	463b      	mov	r3, r7
 8001e38:	2104      	movs	r1, #4
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f001 fedc 	bl	8003bf8 <HAL_RCC_ClockConfig>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001e46:	f000 f88d 	bl	8001f64 <Error_Handler>
  }
}
 8001e4a:	bf00      	nop
 8001e4c:	3758      	adds	r7, #88	@ 0x58
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
	...

08001e54 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
    if(huart == &huart4)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a35      	ldr	r2, [pc, #212]	@ (8001f34 <HAL_UART_RxCpltCallback+0xe0>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d162      	bne.n	8001f2a <HAL_UART_RxCpltCallback+0xd6>
    {
    	printf("UART4: Odebrano: %c\r\n", rxData);
 8001e64:	4b34      	ldr	r3, [pc, #208]	@ (8001f38 <HAL_UART_RxCpltCallback+0xe4>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4834      	ldr	r0, [pc, #208]	@ (8001f3c <HAL_UART_RxCpltCallback+0xe8>)
 8001e6c:	f005 fbac 	bl	80075c8 <iprintf>
        if(mode == 0)
 8001e70:	4b33      	ldr	r3, [pc, #204]	@ (8001f40 <HAL_UART_RxCpltCallback+0xec>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d123      	bne.n	8001ec0 <HAL_UART_RxCpltCallback+0x6c>
        {
            switch(rxData)
 8001e78:	4b2f      	ldr	r3, [pc, #188]	@ (8001f38 <HAL_UART_RxCpltCallback+0xe4>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b32      	cmp	r3, #50	@ 0x32
 8001e7e:	d00e      	beq.n	8001e9e <HAL_UART_RxCpltCallback+0x4a>
 8001e80:	2b32      	cmp	r3, #50	@ 0x32
 8001e82:	dc19      	bgt.n	8001eb8 <HAL_UART_RxCpltCallback+0x64>
 8001e84:	2b30      	cmp	r3, #48	@ 0x30
 8001e86:	d002      	beq.n	8001e8e <HAL_UART_RxCpltCallback+0x3a>
 8001e88:	2b31      	cmp	r3, #49	@ 0x31
 8001e8a:	d004      	beq.n	8001e96 <HAL_UART_RxCpltCallback+0x42>
 8001e8c:	e014      	b.n	8001eb8 <HAL_UART_RxCpltCallback+0x64>
            {
                case '0':
                    flag_demo_V22 = 1;
 8001e8e:	4b2d      	ldr	r3, [pc, #180]	@ (8001f44 <HAL_UART_RxCpltCallback+0xf0>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	701a      	strb	r2, [r3, #0]
                    break;
 8001e94:	e044      	b.n	8001f20 <HAL_UART_RxCpltCallback+0xcc>
                case '1':
                    flag_demo_V11 = 1;
 8001e96:	4b2c      	ldr	r3, [pc, #176]	@ (8001f48 <HAL_UART_RxCpltCallback+0xf4>)
 8001e98:	2201      	movs	r2, #1
 8001e9a:	701a      	strb	r2, [r3, #0]
                    break;
 8001e9c:	e040      	b.n	8001f20 <HAL_UART_RxCpltCallback+0xcc>
                case '2':
                    mode = 1;
 8001e9e:	4b28      	ldr	r3, [pc, #160]	@ (8001f40 <HAL_UART_RxCpltCallback+0xec>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	701a      	strb	r2, [r3, #0]
                    txtIndex = 0;
 8001ea4:	4b29      	ldr	r3, [pc, #164]	@ (8001f4c <HAL_UART_RxCpltCallback+0xf8>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	801a      	strh	r2, [r3, #0]
                    waiting_for_first_char = 1; // pierwszy znak ignorujemy
 8001eaa:	4b29      	ldr	r3, [pc, #164]	@ (8001f50 <HAL_UART_RxCpltCallback+0xfc>)
 8001eac:	2201      	movs	r2, #1
 8001eae:	701a      	strb	r2, [r3, #0]
                    printf("Opcja 2 - wprowadź tekst:\r\n");
 8001eb0:	4828      	ldr	r0, [pc, #160]	@ (8001f54 <HAL_UART_RxCpltCallback+0x100>)
 8001eb2:	f005 fbf1 	bl	8007698 <puts>
                    break;
 8001eb6:	e033      	b.n	8001f20 <HAL_UART_RxCpltCallback+0xcc>
                	printf("Tryb tekstu - wpisz tekst i zakończ (Enter)\r\n");
					mode = 1;
                default:
                    printf("Nieznana opcja\r\n");
 8001eb8:	4827      	ldr	r0, [pc, #156]	@ (8001f58 <HAL_UART_RxCpltCallback+0x104>)
 8001eba:	f005 fbed 	bl	8007698 <puts>
                    break;
 8001ebe:	e02f      	b.n	8001f20 <HAL_UART_RxCpltCallback+0xcc>
            }
        }
        else if(mode == 1)
 8001ec0:	4b1f      	ldr	r3, [pc, #124]	@ (8001f40 <HAL_UART_RxCpltCallback+0xec>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d12b      	bne.n	8001f20 <HAL_UART_RxCpltCallback+0xcc>
        {
            if(waiting_for_first_char)
 8001ec8:	4b21      	ldr	r3, [pc, #132]	@ (8001f50 <HAL_UART_RxCpltCallback+0xfc>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <HAL_UART_RxCpltCallback+0x84>
            {
                waiting_for_first_char = 0; // pierwszy znak pomijamy
 8001ed0:	4b1f      	ldr	r3, [pc, #124]	@ (8001f50 <HAL_UART_RxCpltCallback+0xfc>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	701a      	strb	r2, [r3, #0]
 8001ed6:	e023      	b.n	8001f20 <HAL_UART_RxCpltCallback+0xcc>
            }
            else
            {
                if(rxData == '\r' || rxData == '\n') // koniec tekstu
 8001ed8:	4b17      	ldr	r3, [pc, #92]	@ (8001f38 <HAL_UART_RxCpltCallback+0xe4>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b0d      	cmp	r3, #13
 8001ede:	d003      	beq.n	8001ee8 <HAL_UART_RxCpltCallback+0x94>
 8001ee0:	4b15      	ldr	r3, [pc, #84]	@ (8001f38 <HAL_UART_RxCpltCallback+0xe4>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b0a      	cmp	r3, #10
 8001ee6:	d10c      	bne.n	8001f02 <HAL_UART_RxCpltCallback+0xae>
                {
                    txt[txtIndex] = '\0';
 8001ee8:	4b18      	ldr	r3, [pc, #96]	@ (8001f4c <HAL_UART_RxCpltCallback+0xf8>)
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	461a      	mov	r2, r3
 8001eee:	4b1b      	ldr	r3, [pc, #108]	@ (8001f5c <HAL_UART_RxCpltCallback+0x108>)
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	5499      	strb	r1, [r3, r2]
                    flag_demo4 = 1;
 8001ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f60 <HAL_UART_RxCpltCallback+0x10c>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	701a      	strb	r2, [r3, #0]
                    mode = 0;
 8001efa:	4b11      	ldr	r3, [pc, #68]	@ (8001f40 <HAL_UART_RxCpltCallback+0xec>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	701a      	strb	r2, [r3, #0]
 8001f00:	e00e      	b.n	8001f20 <HAL_UART_RxCpltCallback+0xcc>
                }
                else
                {
                    if(txtIndex < sizeof(txt) - 1)
 8001f02:	4b12      	ldr	r3, [pc, #72]	@ (8001f4c <HAL_UART_RxCpltCallback+0xf8>)
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	2b3e      	cmp	r3, #62	@ 0x3e
 8001f08:	d80a      	bhi.n	8001f20 <HAL_UART_RxCpltCallback+0xcc>
                        txt[txtIndex++] = rxData;
 8001f0a:	4b10      	ldr	r3, [pc, #64]	@ (8001f4c <HAL_UART_RxCpltCallback+0xf8>)
 8001f0c:	881b      	ldrh	r3, [r3, #0]
 8001f0e:	1c5a      	adds	r2, r3, #1
 8001f10:	b291      	uxth	r1, r2
 8001f12:	4a0e      	ldr	r2, [pc, #56]	@ (8001f4c <HAL_UART_RxCpltCallback+0xf8>)
 8001f14:	8011      	strh	r1, [r2, #0]
 8001f16:	461a      	mov	r2, r3
 8001f18:	4b07      	ldr	r3, [pc, #28]	@ (8001f38 <HAL_UART_RxCpltCallback+0xe4>)
 8001f1a:	7819      	ldrb	r1, [r3, #0]
 8001f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f5c <HAL_UART_RxCpltCallback+0x108>)
 8001f1e:	5499      	strb	r1, [r3, r2]
                }
            }
        }

        HAL_UART_Receive_IT(&huart4, &rxData, 1);
 8001f20:	2201      	movs	r2, #1
 8001f22:	4905      	ldr	r1, [pc, #20]	@ (8001f38 <HAL_UART_RxCpltCallback+0xe4>)
 8001f24:	4803      	ldr	r0, [pc, #12]	@ (8001f34 <HAL_UART_RxCpltCallback+0xe0>)
 8001f26:	f003 fb23 	bl	8005570 <HAL_UART_Receive_IT>
    }
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	20005b54 	.word	0x20005b54
 8001f38:	20005a54 	.word	0x20005a54
 8001f3c:	080095e8 	.word	0x080095e8
 8001f40:	20005a9a 	.word	0x20005a9a
 8001f44:	20005a9c 	.word	0x20005a9c
 8001f48:	20005a9d 	.word	0x20005a9d
 8001f4c:	20005a98 	.word	0x20005a98
 8001f50:	20005a9b 	.word	0x20005a9b
 8001f54:	08009600 	.word	0x08009600
 8001f58:	0800961c 	.word	0x0800961c
 8001f5c:	20005a58 	.word	0x20005a58
 8001f60:	20005a9e 	.word	0x20005a9e

08001f64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	printf("Błąd inicjalizacji zegara/systemu!\r\n");
 8001f68:	4803      	ldr	r0, [pc, #12]	@ (8001f78 <Error_Handler+0x14>)
 8001f6a:	f005 fb95 	bl	8007698 <puts>
  __ASM volatile ("cpsid i" : : : "memory");
 8001f6e:	b672      	cpsid	i
}
 8001f70:	bf00      	nop
  __disable_irq();
  while (1)
 8001f72:	bf00      	nop
 8001f74:	e7fd      	b.n	8001f72 <Error_Handler+0xe>
 8001f76:	bf00      	nop
 8001f78:	0800962c 	.word	0x0800962c

08001f7c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001f80:	4b1b      	ldr	r3, [pc, #108]	@ (8001ff0 <MX_SPI1_Init+0x74>)
 8001f82:	4a1c      	ldr	r2, [pc, #112]	@ (8001ff4 <MX_SPI1_Init+0x78>)
 8001f84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f86:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff0 <MX_SPI1_Init+0x74>)
 8001f88:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f8e:	4b18      	ldr	r3, [pc, #96]	@ (8001ff0 <MX_SPI1_Init+0x74>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f94:	4b16      	ldr	r3, [pc, #88]	@ (8001ff0 <MX_SPI1_Init+0x74>)
 8001f96:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001f9a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f9c:	4b14      	ldr	r3, [pc, #80]	@ (8001ff0 <MX_SPI1_Init+0x74>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fa2:	4b13      	ldr	r3, [pc, #76]	@ (8001ff0 <MX_SPI1_Init+0x74>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001fa8:	4b11      	ldr	r3, [pc, #68]	@ (8001ff0 <MX_SPI1_Init+0x74>)
 8001faa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff0 <MX_SPI1_Init+0x74>)
 8001fb2:	2228      	movs	r2, #40	@ 0x28
 8001fb4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff0 <MX_SPI1_Init+0x74>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff0 <MX_SPI1_Init+0x74>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff0 <MX_SPI1_Init+0x74>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001fc8:	4b09      	ldr	r3, [pc, #36]	@ (8001ff0 <MX_SPI1_Init+0x74>)
 8001fca:	2207      	movs	r2, #7
 8001fcc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001fce:	4b08      	ldr	r3, [pc, #32]	@ (8001ff0 <MX_SPI1_Init+0x74>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001fd4:	4b06      	ldr	r3, [pc, #24]	@ (8001ff0 <MX_SPI1_Init+0x74>)
 8001fd6:	2208      	movs	r2, #8
 8001fd8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fda:	4805      	ldr	r0, [pc, #20]	@ (8001ff0 <MX_SPI1_Init+0x74>)
 8001fdc:	f002 fcec 	bl	80049b8 <HAL_SPI_Init>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001fe6:	f7ff ffbd 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20005aa0 	.word	0x20005aa0
 8001ff4:	40013000 	.word	0x40013000

08001ff8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08a      	sub	sp, #40	@ 0x28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002000:	f107 0314 	add.w	r3, r7, #20
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	60da      	str	r2, [r3, #12]
 800200e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a17      	ldr	r2, [pc, #92]	@ (8002074 <HAL_SPI_MspInit+0x7c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d128      	bne.n	800206c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800201a:	4b17      	ldr	r3, [pc, #92]	@ (8002078 <HAL_SPI_MspInit+0x80>)
 800201c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800201e:	4a16      	ldr	r2, [pc, #88]	@ (8002078 <HAL_SPI_MspInit+0x80>)
 8002020:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002024:	6613      	str	r3, [r2, #96]	@ 0x60
 8002026:	4b14      	ldr	r3, [pc, #80]	@ (8002078 <HAL_SPI_MspInit+0x80>)
 8002028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800202a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800202e:	613b      	str	r3, [r7, #16]
 8002030:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002032:	4b11      	ldr	r3, [pc, #68]	@ (8002078 <HAL_SPI_MspInit+0x80>)
 8002034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002036:	4a10      	ldr	r2, [pc, #64]	@ (8002078 <HAL_SPI_MspInit+0x80>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800203e:	4b0e      	ldr	r3, [pc, #56]	@ (8002078 <HAL_SPI_MspInit+0x80>)
 8002040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800204a:	23a0      	movs	r3, #160	@ 0xa0
 800204c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204e:	2302      	movs	r3, #2
 8002050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002052:	2300      	movs	r3, #0
 8002054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002056:	2302      	movs	r3, #2
 8002058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800205a:	2305      	movs	r3, #5
 800205c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205e:	f107 0314 	add.w	r3, r7, #20
 8002062:	4619      	mov	r1, r3
 8002064:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002068:	f000 fe7a 	bl	8002d60 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800206c:	bf00      	nop
 800206e:	3728      	adds	r7, #40	@ 0x28
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40013000 	.word	0x40013000
 8002078:	40021000 	.word	0x40021000

0800207c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002082:	4b0f      	ldr	r3, [pc, #60]	@ (80020c0 <HAL_MspInit+0x44>)
 8002084:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002086:	4a0e      	ldr	r2, [pc, #56]	@ (80020c0 <HAL_MspInit+0x44>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	6613      	str	r3, [r2, #96]	@ 0x60
 800208e:	4b0c      	ldr	r3, [pc, #48]	@ (80020c0 <HAL_MspInit+0x44>)
 8002090:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	607b      	str	r3, [r7, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800209a:	4b09      	ldr	r3, [pc, #36]	@ (80020c0 <HAL_MspInit+0x44>)
 800209c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209e:	4a08      	ldr	r2, [pc, #32]	@ (80020c0 <HAL_MspInit+0x44>)
 80020a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80020a6:	4b06      	ldr	r3, [pc, #24]	@ (80020c0 <HAL_MspInit+0x44>)
 80020a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ae:	603b      	str	r3, [r7, #0]
 80020b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	40021000 	.word	0x40021000

080020c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020c8:	bf00      	nop
 80020ca:	e7fd      	b.n	80020c8 <NMI_Handler+0x4>

080020cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020d0:	bf00      	nop
 80020d2:	e7fd      	b.n	80020d0 <HardFault_Handler+0x4>

080020d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020d8:	bf00      	nop
 80020da:	e7fd      	b.n	80020d8 <MemManage_Handler+0x4>

080020dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020e0:	bf00      	nop
 80020e2:	e7fd      	b.n	80020e0 <BusFault_Handler+0x4>

080020e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020e8:	bf00      	nop
 80020ea:	e7fd      	b.n	80020e8 <UsageFault_Handler+0x4>

080020ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020f0:	bf00      	nop
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020fa:	b480      	push	{r7}
 80020fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800211a:	f000 fae5 	bl	80026e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002128:	4802      	ldr	r0, [pc, #8]	@ (8002134 <UART4_IRQHandler+0x10>)
 800212a:	f003 fa6d 	bl	8005608 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20005b54 	.word	0x20005b54

08002138 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800213c:	4802      	ldr	r0, [pc, #8]	@ (8002148 <DMA2_Channel5_IRQHandler+0x10>)
 800213e:	f000 fd60 	bl	8002c02 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	20005c64 	.word	0x20005c64

0800214c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  return 1;
 8002150:	2301      	movs	r3, #1
}
 8002152:	4618      	mov	r0, r3
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <_kill>:

int _kill(int pid, int sig)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002166:	f005 fbc9 	bl	80078fc <__errno>
 800216a:	4603      	mov	r3, r0
 800216c:	2216      	movs	r2, #22
 800216e:	601a      	str	r2, [r3, #0]
  return -1;
 8002170:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002174:	4618      	mov	r0, r3
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <_exit>:

void _exit (int status)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002184:	f04f 31ff 	mov.w	r1, #4294967295
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f7ff ffe7 	bl	800215c <_kill>
  while (1) {}    /* Make sure we hang here */
 800218e:	bf00      	nop
 8002190:	e7fd      	b.n	800218e <_exit+0x12>

08002192 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b086      	sub	sp, #24
 8002196:	af00      	add	r7, sp, #0
 8002198:	60f8      	str	r0, [r7, #12]
 800219a:	60b9      	str	r1, [r7, #8]
 800219c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
 80021a2:	e00a      	b.n	80021ba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021a4:	f3af 8000 	nop.w
 80021a8:	4601      	mov	r1, r0
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	1c5a      	adds	r2, r3, #1
 80021ae:	60ba      	str	r2, [r7, #8]
 80021b0:	b2ca      	uxtb	r2, r1
 80021b2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	3301      	adds	r3, #1
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	429a      	cmp	r2, r3
 80021c0:	dbf0      	blt.n	80021a4 <_read+0x12>
  }

  return len;
 80021c2:	687b      	ldr	r3, [r7, #4]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3718      	adds	r7, #24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <_close>:
  }
  return len;
}

int _close(int file)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021d8:	4618      	mov	r0, r3
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021f4:	605a      	str	r2, [r3, #4]
  return 0;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <_isatty>:

int _isatty(int file)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800220c:	2301      	movs	r3, #1
}
 800220e:	4618      	mov	r0, r3
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800221a:	b480      	push	{r7}
 800221c:	b085      	sub	sp, #20
 800221e:	af00      	add	r7, sp, #0
 8002220:	60f8      	str	r0, [r7, #12]
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800223c:	4a14      	ldr	r2, [pc, #80]	@ (8002290 <_sbrk+0x5c>)
 800223e:	4b15      	ldr	r3, [pc, #84]	@ (8002294 <_sbrk+0x60>)
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002248:	4b13      	ldr	r3, [pc, #76]	@ (8002298 <_sbrk+0x64>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d102      	bne.n	8002256 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002250:	4b11      	ldr	r3, [pc, #68]	@ (8002298 <_sbrk+0x64>)
 8002252:	4a12      	ldr	r2, [pc, #72]	@ (800229c <_sbrk+0x68>)
 8002254:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002256:	4b10      	ldr	r3, [pc, #64]	@ (8002298 <_sbrk+0x64>)
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4413      	add	r3, r2
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	429a      	cmp	r2, r3
 8002262:	d207      	bcs.n	8002274 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002264:	f005 fb4a 	bl	80078fc <__errno>
 8002268:	4603      	mov	r3, r0
 800226a:	220c      	movs	r2, #12
 800226c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800226e:	f04f 33ff 	mov.w	r3, #4294967295
 8002272:	e009      	b.n	8002288 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002274:	4b08      	ldr	r3, [pc, #32]	@ (8002298 <_sbrk+0x64>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800227a:	4b07      	ldr	r3, [pc, #28]	@ (8002298 <_sbrk+0x64>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4413      	add	r3, r2
 8002282:	4a05      	ldr	r2, [pc, #20]	@ (8002298 <_sbrk+0x64>)
 8002284:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002286:	68fb      	ldr	r3, [r7, #12]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	20018000 	.word	0x20018000
 8002294:	00000400 	.word	0x00000400
 8002298:	20005b04 	.word	0x20005b04
 800229c:	20005e00 	.word	0x20005e00

080022a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80022a4:	4b06      	ldr	r3, [pc, #24]	@ (80022c0 <SystemInit+0x20>)
 80022a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022aa:	4a05      	ldr	r2, [pc, #20]	@ (80022c0 <SystemInit+0x20>)
 80022ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ca:	1d3b      	adds	r3, r7, #4
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80022d4:	4b14      	ldr	r3, [pc, #80]	@ (8002328 <MX_TIM6_Init+0x64>)
 80022d6:	4a15      	ldr	r2, [pc, #84]	@ (800232c <MX_TIM6_Init+0x68>)
 80022d8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80022da:	4b13      	ldr	r3, [pc, #76]	@ (8002328 <MX_TIM6_Init+0x64>)
 80022dc:	2200      	movs	r2, #0
 80022de:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e0:	4b11      	ldr	r3, [pc, #68]	@ (8002328 <MX_TIM6_Init+0x64>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80022e6:	4b10      	ldr	r3, [pc, #64]	@ (8002328 <MX_TIM6_Init+0x64>)
 80022e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022ec:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002328 <MX_TIM6_Init+0x64>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80022f4:	480c      	ldr	r0, [pc, #48]	@ (8002328 <MX_TIM6_Init+0x64>)
 80022f6:	f002 fedd 	bl	80050b4 <HAL_TIM_Base_Init>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002300:	f7ff fe30 	bl	8001f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002304:	2300      	movs	r3, #0
 8002306:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002308:	2300      	movs	r3, #0
 800230a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800230c:	1d3b      	adds	r3, r7, #4
 800230e:	4619      	mov	r1, r3
 8002310:	4805      	ldr	r0, [pc, #20]	@ (8002328 <MX_TIM6_Init+0x64>)
 8002312:	f002 ffcd 	bl	80052b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800231c:	f7ff fe22 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002320:	bf00      	nop
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	20005b08 	.word	0x20005b08
 800232c:	40001000 	.word	0x40001000

08002330 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a0a      	ldr	r2, [pc, #40]	@ (8002368 <HAL_TIM_Base_MspInit+0x38>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d10b      	bne.n	800235a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002342:	4b0a      	ldr	r3, [pc, #40]	@ (800236c <HAL_TIM_Base_MspInit+0x3c>)
 8002344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002346:	4a09      	ldr	r2, [pc, #36]	@ (800236c <HAL_TIM_Base_MspInit+0x3c>)
 8002348:	f043 0310 	orr.w	r3, r3, #16
 800234c:	6593      	str	r3, [r2, #88]	@ 0x58
 800234e:	4b07      	ldr	r3, [pc, #28]	@ (800236c <HAL_TIM_Base_MspInit+0x3c>)
 8002350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002352:	f003 0310 	and.w	r3, r3, #16
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800235a:	bf00      	nop
 800235c:	3714      	adds	r7, #20
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	40001000 	.word	0x40001000
 800236c:	40021000 	.word	0x40021000

08002370 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_uart4_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002374:	4b14      	ldr	r3, [pc, #80]	@ (80023c8 <MX_UART4_Init+0x58>)
 8002376:	4a15      	ldr	r2, [pc, #84]	@ (80023cc <MX_UART4_Init+0x5c>)
 8002378:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800237a:	4b13      	ldr	r3, [pc, #76]	@ (80023c8 <MX_UART4_Init+0x58>)
 800237c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002380:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002382:	4b11      	ldr	r3, [pc, #68]	@ (80023c8 <MX_UART4_Init+0x58>)
 8002384:	2200      	movs	r2, #0
 8002386:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002388:	4b0f      	ldr	r3, [pc, #60]	@ (80023c8 <MX_UART4_Init+0x58>)
 800238a:	2200      	movs	r2, #0
 800238c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800238e:	4b0e      	ldr	r3, [pc, #56]	@ (80023c8 <MX_UART4_Init+0x58>)
 8002390:	2200      	movs	r2, #0
 8002392:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002394:	4b0c      	ldr	r3, [pc, #48]	@ (80023c8 <MX_UART4_Init+0x58>)
 8002396:	220c      	movs	r2, #12
 8002398:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800239a:	4b0b      	ldr	r3, [pc, #44]	@ (80023c8 <MX_UART4_Init+0x58>)
 800239c:	2200      	movs	r2, #0
 800239e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80023a0:	4b09      	ldr	r3, [pc, #36]	@ (80023c8 <MX_UART4_Init+0x58>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023a6:	4b08      	ldr	r3, [pc, #32]	@ (80023c8 <MX_UART4_Init+0x58>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023ac:	4b06      	ldr	r3, [pc, #24]	@ (80023c8 <MX_UART4_Init+0x58>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80023b2:	4805      	ldr	r0, [pc, #20]	@ (80023c8 <MX_UART4_Init+0x58>)
 80023b4:	f003 f804 	bl	80053c0 <HAL_UART_Init>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80023be:	f7ff fdd1 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20005b54 	.word	0x20005b54
 80023cc:	40004c00 	.word	0x40004c00

080023d0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023d4:	4b14      	ldr	r3, [pc, #80]	@ (8002428 <MX_USART2_UART_Init+0x58>)
 80023d6:	4a15      	ldr	r2, [pc, #84]	@ (800242c <MX_USART2_UART_Init+0x5c>)
 80023d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80023da:	4b13      	ldr	r3, [pc, #76]	@ (8002428 <MX_USART2_UART_Init+0x58>)
 80023dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80023e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023e2:	4b11      	ldr	r3, [pc, #68]	@ (8002428 <MX_USART2_UART_Init+0x58>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002428 <MX_USART2_UART_Init+0x58>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002428 <MX_USART2_UART_Init+0x58>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002428 <MX_USART2_UART_Init+0x58>)
 80023f6:	220c      	movs	r2, #12
 80023f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002428 <MX_USART2_UART_Init+0x58>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002400:	4b09      	ldr	r3, [pc, #36]	@ (8002428 <MX_USART2_UART_Init+0x58>)
 8002402:	2200      	movs	r2, #0
 8002404:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002406:	4b08      	ldr	r3, [pc, #32]	@ (8002428 <MX_USART2_UART_Init+0x58>)
 8002408:	2200      	movs	r2, #0
 800240a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800240c:	4b06      	ldr	r3, [pc, #24]	@ (8002428 <MX_USART2_UART_Init+0x58>)
 800240e:	2200      	movs	r2, #0
 8002410:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002412:	4805      	ldr	r0, [pc, #20]	@ (8002428 <MX_USART2_UART_Init+0x58>)
 8002414:	f002 ffd4 	bl	80053c0 <HAL_UART_Init>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800241e:	f7ff fda1 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20005bdc 	.word	0x20005bdc
 800242c:	40004400 	.word	0x40004400

08002430 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b0ae      	sub	sp, #184	@ 0xb8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002438:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	605a      	str	r2, [r3, #4]
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	60da      	str	r2, [r3, #12]
 8002446:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002448:	f107 031c 	add.w	r3, r7, #28
 800244c:	2288      	movs	r2, #136	@ 0x88
 800244e:	2100      	movs	r1, #0
 8002450:	4618      	mov	r0, r3
 8002452:	f005 fa01 	bl	8007858 <memset>
  if(uartHandle->Instance==UART4)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a5b      	ldr	r2, [pc, #364]	@ (80025c8 <HAL_UART_MspInit+0x198>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d16d      	bne.n	800253c <HAL_UART_MspInit+0x10c>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002460:	2308      	movs	r3, #8
 8002462:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002464:	2300      	movs	r3, #0
 8002466:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002468:	f107 031c 	add.w	r3, r7, #28
 800246c:	4618      	mov	r0, r3
 800246e:	f001 fde7 	bl	8004040 <HAL_RCCEx_PeriphCLKConfig>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002478:	f7ff fd74 	bl	8001f64 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800247c:	4b53      	ldr	r3, [pc, #332]	@ (80025cc <HAL_UART_MspInit+0x19c>)
 800247e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002480:	4a52      	ldr	r2, [pc, #328]	@ (80025cc <HAL_UART_MspInit+0x19c>)
 8002482:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002486:	6593      	str	r3, [r2, #88]	@ 0x58
 8002488:	4b50      	ldr	r3, [pc, #320]	@ (80025cc <HAL_UART_MspInit+0x19c>)
 800248a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800248c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002490:	61bb      	str	r3, [r7, #24]
 8002492:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002494:	4b4d      	ldr	r3, [pc, #308]	@ (80025cc <HAL_UART_MspInit+0x19c>)
 8002496:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002498:	4a4c      	ldr	r2, [pc, #304]	@ (80025cc <HAL_UART_MspInit+0x19c>)
 800249a:	f043 0301 	orr.w	r3, r3, #1
 800249e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024a0:	4b4a      	ldr	r3, [pc, #296]	@ (80025cc <HAL_UART_MspInit+0x19c>)
 80024a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	617b      	str	r3, [r7, #20]
 80024aa:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024ac:	2303      	movs	r3, #3
 80024ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b2:	2302      	movs	r3, #2
 80024b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024be:	2303      	movs	r3, #3
 80024c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80024c4:	2308      	movs	r3, #8
 80024c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ca:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80024ce:	4619      	mov	r1, r3
 80024d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024d4:	f000 fc44 	bl	8002d60 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel5;
 80024d8:	4b3d      	ldr	r3, [pc, #244]	@ (80025d0 <HAL_UART_MspInit+0x1a0>)
 80024da:	4a3e      	ldr	r2, [pc, #248]	@ (80025d4 <HAL_UART_MspInit+0x1a4>)
 80024dc:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_2;
 80024de:	4b3c      	ldr	r3, [pc, #240]	@ (80025d0 <HAL_UART_MspInit+0x1a0>)
 80024e0:	2202      	movs	r2, #2
 80024e2:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024e4:	4b3a      	ldr	r3, [pc, #232]	@ (80025d0 <HAL_UART_MspInit+0x1a0>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024ea:	4b39      	ldr	r3, [pc, #228]	@ (80025d0 <HAL_UART_MspInit+0x1a0>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024f0:	4b37      	ldr	r3, [pc, #220]	@ (80025d0 <HAL_UART_MspInit+0x1a0>)
 80024f2:	2280      	movs	r2, #128	@ 0x80
 80024f4:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024f6:	4b36      	ldr	r3, [pc, #216]	@ (80025d0 <HAL_UART_MspInit+0x1a0>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024fc:	4b34      	ldr	r3, [pc, #208]	@ (80025d0 <HAL_UART_MspInit+0x1a0>)
 80024fe:	2200      	movs	r2, #0
 8002500:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8002502:	4b33      	ldr	r3, [pc, #204]	@ (80025d0 <HAL_UART_MspInit+0x1a0>)
 8002504:	2200      	movs	r2, #0
 8002506:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002508:	4b31      	ldr	r3, [pc, #196]	@ (80025d0 <HAL_UART_MspInit+0x1a0>)
 800250a:	2200      	movs	r2, #0
 800250c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800250e:	4830      	ldr	r0, [pc, #192]	@ (80025d0 <HAL_UART_MspInit+0x1a0>)
 8002510:	f000 fa40 	bl	8002994 <HAL_DMA_Init>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 800251a:	f7ff fd23 	bl	8001f64 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a2b      	ldr	r2, [pc, #172]	@ (80025d0 <HAL_UART_MspInit+0x1a0>)
 8002522:	675a      	str	r2, [r3, #116]	@ 0x74
 8002524:	4a2a      	ldr	r2, [pc, #168]	@ (80025d0 <HAL_UART_MspInit+0x1a0>)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6293      	str	r3, [r2, #40]	@ 0x28

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800252a:	2200      	movs	r2, #0
 800252c:	2100      	movs	r1, #0
 800252e:	2034      	movs	r0, #52	@ 0x34
 8002530:	f000 f9f9 	bl	8002926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002534:	2034      	movs	r0, #52	@ 0x34
 8002536:	f000 fa12 	bl	800295e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800253a:	e040      	b.n	80025be <HAL_UART_MspInit+0x18e>
  else if(uartHandle->Instance==USART2)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a25      	ldr	r2, [pc, #148]	@ (80025d8 <HAL_UART_MspInit+0x1a8>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d13b      	bne.n	80025be <HAL_UART_MspInit+0x18e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002546:	2302      	movs	r3, #2
 8002548:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800254a:	2300      	movs	r3, #0
 800254c:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800254e:	f107 031c 	add.w	r3, r7, #28
 8002552:	4618      	mov	r0, r3
 8002554:	f001 fd74 	bl	8004040 <HAL_RCCEx_PeriphCLKConfig>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <HAL_UART_MspInit+0x132>
      Error_Handler();
 800255e:	f7ff fd01 	bl	8001f64 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002562:	4b1a      	ldr	r3, [pc, #104]	@ (80025cc <HAL_UART_MspInit+0x19c>)
 8002564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002566:	4a19      	ldr	r2, [pc, #100]	@ (80025cc <HAL_UART_MspInit+0x19c>)
 8002568:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800256c:	6593      	str	r3, [r2, #88]	@ 0x58
 800256e:	4b17      	ldr	r3, [pc, #92]	@ (80025cc <HAL_UART_MspInit+0x19c>)
 8002570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002576:	613b      	str	r3, [r7, #16]
 8002578:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800257a:	4b14      	ldr	r3, [pc, #80]	@ (80025cc <HAL_UART_MspInit+0x19c>)
 800257c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800257e:	4a13      	ldr	r2, [pc, #76]	@ (80025cc <HAL_UART_MspInit+0x19c>)
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002586:	4b11      	ldr	r3, [pc, #68]	@ (80025cc <HAL_UART_MspInit+0x19c>)
 8002588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002592:	230c      	movs	r3, #12
 8002594:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002598:	2302      	movs	r3, #2
 800259a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259e:	2300      	movs	r3, #0
 80025a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a4:	2303      	movs	r3, #3
 80025a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025aa:	2307      	movs	r3, #7
 80025ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80025b4:	4619      	mov	r1, r3
 80025b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025ba:	f000 fbd1 	bl	8002d60 <HAL_GPIO_Init>
}
 80025be:	bf00      	nop
 80025c0:	37b8      	adds	r7, #184	@ 0xb8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40004c00 	.word	0x40004c00
 80025cc:	40021000 	.word	0x40021000
 80025d0:	20005c64 	.word	0x20005c64
 80025d4:	40020458 	.word	0x40020458
 80025d8:	40004400 	.word	0x40004400

080025dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80025dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002614 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80025e0:	f7ff fe5e 	bl	80022a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025e4:	480c      	ldr	r0, [pc, #48]	@ (8002618 <LoopForever+0x6>)
  ldr r1, =_edata
 80025e6:	490d      	ldr	r1, [pc, #52]	@ (800261c <LoopForever+0xa>)
  ldr r2, =_sidata
 80025e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002620 <LoopForever+0xe>)
  movs r3, #0
 80025ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025ec:	e002      	b.n	80025f4 <LoopCopyDataInit>

080025ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025f2:	3304      	adds	r3, #4

080025f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025f8:	d3f9      	bcc.n	80025ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002624 <LoopForever+0x12>)
  ldr r4, =_ebss
 80025fc:	4c0a      	ldr	r4, [pc, #40]	@ (8002628 <LoopForever+0x16>)
  movs r3, #0
 80025fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002600:	e001      	b.n	8002606 <LoopFillZerobss>

08002602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002604:	3204      	adds	r2, #4

08002606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002608:	d3fb      	bcc.n	8002602 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800260a:	f005 f97d 	bl	8007908 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800260e:	f7ff fb77 	bl	8001d00 <main>

08002612 <LoopForever>:

LoopForever:
    b LoopForever
 8002612:	e7fe      	b.n	8002612 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002614:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800261c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002620:	0800a460 	.word	0x0800a460
  ldr r2, =_sbss
 8002624:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002628:	20005dfc 	.word	0x20005dfc

0800262c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800262c:	e7fe      	b.n	800262c <ADC1_2_IRQHandler>
	...

08002630 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002636:	2300      	movs	r3, #0
 8002638:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800263a:	4b0c      	ldr	r3, [pc, #48]	@ (800266c <HAL_Init+0x3c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a0b      	ldr	r2, [pc, #44]	@ (800266c <HAL_Init+0x3c>)
 8002640:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002644:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002646:	2003      	movs	r0, #3
 8002648:	f000 f962 	bl	8002910 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800264c:	2000      	movs	r0, #0
 800264e:	f000 f80f 	bl	8002670 <HAL_InitTick>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d002      	beq.n	800265e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	71fb      	strb	r3, [r7, #7]
 800265c:	e001      	b.n	8002662 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800265e:	f7ff fd0d 	bl	800207c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002662:	79fb      	ldrb	r3, [r7, #7]
}
 8002664:	4618      	mov	r0, r3
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40022000 	.word	0x40022000

08002670 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002678:	2300      	movs	r3, #0
 800267a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800267c:	4b17      	ldr	r3, [pc, #92]	@ (80026dc <HAL_InitTick+0x6c>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d023      	beq.n	80026cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002684:	4b16      	ldr	r3, [pc, #88]	@ (80026e0 <HAL_InitTick+0x70>)
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	4b14      	ldr	r3, [pc, #80]	@ (80026dc <HAL_InitTick+0x6c>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	4619      	mov	r1, r3
 800268e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002692:	fbb3 f3f1 	udiv	r3, r3, r1
 8002696:	fbb2 f3f3 	udiv	r3, r2, r3
 800269a:	4618      	mov	r0, r3
 800269c:	f000 f96d 	bl	800297a <HAL_SYSTICK_Config>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10f      	bne.n	80026c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b0f      	cmp	r3, #15
 80026aa:	d809      	bhi.n	80026c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026ac:	2200      	movs	r2, #0
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	f04f 30ff 	mov.w	r0, #4294967295
 80026b4:	f000 f937 	bl	8002926 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026b8:	4a0a      	ldr	r2, [pc, #40]	@ (80026e4 <HAL_InitTick+0x74>)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	e007      	b.n	80026d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	73fb      	strb	r3, [r7, #15]
 80026c4:	e004      	b.n	80026d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	73fb      	strb	r3, [r7, #15]
 80026ca:	e001      	b.n	80026d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20000010 	.word	0x20000010
 80026e0:	20000008 	.word	0x20000008
 80026e4:	2000000c 	.word	0x2000000c

080026e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026ec:	4b06      	ldr	r3, [pc, #24]	@ (8002708 <HAL_IncTick+0x20>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	461a      	mov	r2, r3
 80026f2:	4b06      	ldr	r3, [pc, #24]	@ (800270c <HAL_IncTick+0x24>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4413      	add	r3, r2
 80026f8:	4a04      	ldr	r2, [pc, #16]	@ (800270c <HAL_IncTick+0x24>)
 80026fa:	6013      	str	r3, [r2, #0]
}
 80026fc:	bf00      	nop
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	20000010 	.word	0x20000010
 800270c:	20005cac 	.word	0x20005cac

08002710 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  return uwTick;
 8002714:	4b03      	ldr	r3, [pc, #12]	@ (8002724 <HAL_GetTick+0x14>)
 8002716:	681b      	ldr	r3, [r3, #0]
}
 8002718:	4618      	mov	r0, r3
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	20005cac 	.word	0x20005cac

08002728 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002730:	f7ff ffee 	bl	8002710 <HAL_GetTick>
 8002734:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002740:	d005      	beq.n	800274e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002742:	4b0a      	ldr	r3, [pc, #40]	@ (800276c <HAL_Delay+0x44>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	461a      	mov	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4413      	add	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800274e:	bf00      	nop
 8002750:	f7ff ffde 	bl	8002710 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	429a      	cmp	r2, r3
 800275e:	d8f7      	bhi.n	8002750 <HAL_Delay+0x28>
  {
  }
}
 8002760:	bf00      	nop
 8002762:	bf00      	nop
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	20000010 	.word	0x20000010

08002770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002780:	4b0c      	ldr	r3, [pc, #48]	@ (80027b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002786:	68ba      	ldr	r2, [r7, #8]
 8002788:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800278c:	4013      	ands	r3, r2
 800278e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002798:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800279c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027a2:	4a04      	ldr	r2, [pc, #16]	@ (80027b4 <__NVIC_SetPriorityGrouping+0x44>)
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	60d3      	str	r3, [r2, #12]
}
 80027a8:	bf00      	nop
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	e000ed00 	.word	0xe000ed00

080027b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027bc:	4b04      	ldr	r3, [pc, #16]	@ (80027d0 <__NVIC_GetPriorityGrouping+0x18>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	0a1b      	lsrs	r3, r3, #8
 80027c2:	f003 0307 	and.w	r3, r3, #7
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	e000ed00 	.word	0xe000ed00

080027d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	db0b      	blt.n	80027fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027e6:	79fb      	ldrb	r3, [r7, #7]
 80027e8:	f003 021f 	and.w	r2, r3, #31
 80027ec:	4907      	ldr	r1, [pc, #28]	@ (800280c <__NVIC_EnableIRQ+0x38>)
 80027ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f2:	095b      	lsrs	r3, r3, #5
 80027f4:	2001      	movs	r0, #1
 80027f6:	fa00 f202 	lsl.w	r2, r0, r2
 80027fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	e000e100 	.word	0xe000e100

08002810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	6039      	str	r1, [r7, #0]
 800281a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800281c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002820:	2b00      	cmp	r3, #0
 8002822:	db0a      	blt.n	800283a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	b2da      	uxtb	r2, r3
 8002828:	490c      	ldr	r1, [pc, #48]	@ (800285c <__NVIC_SetPriority+0x4c>)
 800282a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282e:	0112      	lsls	r2, r2, #4
 8002830:	b2d2      	uxtb	r2, r2
 8002832:	440b      	add	r3, r1
 8002834:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002838:	e00a      	b.n	8002850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	b2da      	uxtb	r2, r3
 800283e:	4908      	ldr	r1, [pc, #32]	@ (8002860 <__NVIC_SetPriority+0x50>)
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	3b04      	subs	r3, #4
 8002848:	0112      	lsls	r2, r2, #4
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	440b      	add	r3, r1
 800284e:	761a      	strb	r2, [r3, #24]
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	e000e100 	.word	0xe000e100
 8002860:	e000ed00 	.word	0xe000ed00

08002864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002864:	b480      	push	{r7}
 8002866:	b089      	sub	sp, #36	@ 0x24
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	f1c3 0307 	rsb	r3, r3, #7
 800287e:	2b04      	cmp	r3, #4
 8002880:	bf28      	it	cs
 8002882:	2304      	movcs	r3, #4
 8002884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	3304      	adds	r3, #4
 800288a:	2b06      	cmp	r3, #6
 800288c:	d902      	bls.n	8002894 <NVIC_EncodePriority+0x30>
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	3b03      	subs	r3, #3
 8002892:	e000      	b.n	8002896 <NVIC_EncodePriority+0x32>
 8002894:	2300      	movs	r3, #0
 8002896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002898:	f04f 32ff 	mov.w	r2, #4294967295
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	43da      	mvns	r2, r3
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	401a      	ands	r2, r3
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028ac:	f04f 31ff 	mov.w	r1, #4294967295
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	fa01 f303 	lsl.w	r3, r1, r3
 80028b6:	43d9      	mvns	r1, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028bc:	4313      	orrs	r3, r2
         );
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3724      	adds	r7, #36	@ 0x24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
	...

080028cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028dc:	d301      	bcc.n	80028e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028de:	2301      	movs	r3, #1
 80028e0:	e00f      	b.n	8002902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028e2:	4a0a      	ldr	r2, [pc, #40]	@ (800290c <SysTick_Config+0x40>)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	3b01      	subs	r3, #1
 80028e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028ea:	210f      	movs	r1, #15
 80028ec:	f04f 30ff 	mov.w	r0, #4294967295
 80028f0:	f7ff ff8e 	bl	8002810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028f4:	4b05      	ldr	r3, [pc, #20]	@ (800290c <SysTick_Config+0x40>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028fa:	4b04      	ldr	r3, [pc, #16]	@ (800290c <SysTick_Config+0x40>)
 80028fc:	2207      	movs	r2, #7
 80028fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	e000e010 	.word	0xe000e010

08002910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f7ff ff29 	bl	8002770 <__NVIC_SetPriorityGrouping>
}
 800291e:	bf00      	nop
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b086      	sub	sp, #24
 800292a:	af00      	add	r7, sp, #0
 800292c:	4603      	mov	r3, r0
 800292e:	60b9      	str	r1, [r7, #8]
 8002930:	607a      	str	r2, [r7, #4]
 8002932:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002938:	f7ff ff3e 	bl	80027b8 <__NVIC_GetPriorityGrouping>
 800293c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	68b9      	ldr	r1, [r7, #8]
 8002942:	6978      	ldr	r0, [r7, #20]
 8002944:	f7ff ff8e 	bl	8002864 <NVIC_EncodePriority>
 8002948:	4602      	mov	r2, r0
 800294a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800294e:	4611      	mov	r1, r2
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff ff5d 	bl	8002810 <__NVIC_SetPriority>
}
 8002956:	bf00      	nop
 8002958:	3718      	adds	r7, #24
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b082      	sub	sp, #8
 8002962:	af00      	add	r7, sp, #0
 8002964:	4603      	mov	r3, r0
 8002966:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff ff31 	bl	80027d4 <__NVIC_EnableIRQ>
}
 8002972:	bf00      	nop
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7ff ffa2 	bl	80028cc <SysTick_Config>
 8002988:	4603      	mov	r3, r0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
	...

08002994 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e098      	b.n	8002ad8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	461a      	mov	r2, r3
 80029ac:	4b4d      	ldr	r3, [pc, #308]	@ (8002ae4 <HAL_DMA_Init+0x150>)
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d80f      	bhi.n	80029d2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	461a      	mov	r2, r3
 80029b8:	4b4b      	ldr	r3, [pc, #300]	@ (8002ae8 <HAL_DMA_Init+0x154>)
 80029ba:	4413      	add	r3, r2
 80029bc:	4a4b      	ldr	r2, [pc, #300]	@ (8002aec <HAL_DMA_Init+0x158>)
 80029be:	fba2 2303 	umull	r2, r3, r2, r3
 80029c2:	091b      	lsrs	r3, r3, #4
 80029c4:	009a      	lsls	r2, r3, #2
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a48      	ldr	r2, [pc, #288]	@ (8002af0 <HAL_DMA_Init+0x15c>)
 80029ce:	641a      	str	r2, [r3, #64]	@ 0x40
 80029d0:	e00e      	b.n	80029f0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	461a      	mov	r2, r3
 80029d8:	4b46      	ldr	r3, [pc, #280]	@ (8002af4 <HAL_DMA_Init+0x160>)
 80029da:	4413      	add	r3, r2
 80029dc:	4a43      	ldr	r2, [pc, #268]	@ (8002aec <HAL_DMA_Init+0x158>)
 80029de:	fba2 2303 	umull	r2, r3, r2, r3
 80029e2:	091b      	lsrs	r3, r3, #4
 80029e4:	009a      	lsls	r2, r3, #2
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a42      	ldr	r2, [pc, #264]	@ (8002af8 <HAL_DMA_Init+0x164>)
 80029ee:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2202      	movs	r2, #2
 80029f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002a06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a0a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002a14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a4a:	d039      	beq.n	8002ac0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a50:	4a27      	ldr	r2, [pc, #156]	@ (8002af0 <HAL_DMA_Init+0x15c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d11a      	bne.n	8002a8c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002a56:	4b29      	ldr	r3, [pc, #164]	@ (8002afc <HAL_DMA_Init+0x168>)
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a5e:	f003 031c 	and.w	r3, r3, #28
 8002a62:	210f      	movs	r1, #15
 8002a64:	fa01 f303 	lsl.w	r3, r1, r3
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	4924      	ldr	r1, [pc, #144]	@ (8002afc <HAL_DMA_Init+0x168>)
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002a70:	4b22      	ldr	r3, [pc, #136]	@ (8002afc <HAL_DMA_Init+0x168>)
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6859      	ldr	r1, [r3, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a7c:	f003 031c 	and.w	r3, r3, #28
 8002a80:	fa01 f303 	lsl.w	r3, r1, r3
 8002a84:	491d      	ldr	r1, [pc, #116]	@ (8002afc <HAL_DMA_Init+0x168>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	600b      	str	r3, [r1, #0]
 8002a8a:	e019      	b.n	8002ac0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002a8c:	4b1c      	ldr	r3, [pc, #112]	@ (8002b00 <HAL_DMA_Init+0x16c>)
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a94:	f003 031c 	and.w	r3, r3, #28
 8002a98:	210f      	movs	r1, #15
 8002a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	4917      	ldr	r1, [pc, #92]	@ (8002b00 <HAL_DMA_Init+0x16c>)
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002aa6:	4b16      	ldr	r3, [pc, #88]	@ (8002b00 <HAL_DMA_Init+0x16c>)
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6859      	ldr	r1, [r3, #4]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab2:	f003 031c 	and.w	r3, r3, #28
 8002ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aba:	4911      	ldr	r1, [pc, #68]	@ (8002b00 <HAL_DMA_Init+0x16c>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	40020407 	.word	0x40020407
 8002ae8:	bffdfff8 	.word	0xbffdfff8
 8002aec:	cccccccd 	.word	0xcccccccd
 8002af0:	40020000 	.word	0x40020000
 8002af4:	bffdfbf8 	.word	0xbffdfbf8
 8002af8:	40020400 	.word	0x40020400
 8002afc:	400200a8 	.word	0x400200a8
 8002b00:	400204a8 	.word	0x400204a8

08002b04 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d008      	beq.n	8002b2e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2204      	movs	r2, #4
 8002b20:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e022      	b.n	8002b74 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 020e 	bic.w	r2, r2, #14
 8002b3c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 0201 	bic.w	r2, r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b52:	f003 021c 	and.w	r2, r3, #28
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b60:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d005      	beq.n	8002ba4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2204      	movs	r2, #4
 8002b9c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	73fb      	strb	r3, [r7, #15]
 8002ba2:	e029      	b.n	8002bf8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 020e 	bic.w	r2, r2, #14
 8002bb2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0201 	bic.w	r2, r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc8:	f003 021c 	and.w	r2, r3, #28
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8002bd6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	4798      	blx	r3
    }
  }
  return status;
 8002bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b084      	sub	sp, #16
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c1e:	f003 031c 	and.w	r3, r3, #28
 8002c22:	2204      	movs	r2, #4
 8002c24:	409a      	lsls	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d026      	beq.n	8002c7c <HAL_DMA_IRQHandler+0x7a>
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d021      	beq.n	8002c7c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0320 	and.w	r3, r3, #32
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d107      	bne.n	8002c56 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0204 	bic.w	r2, r2, #4
 8002c54:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c5a:	f003 021c 	and.w	r2, r3, #28
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c62:	2104      	movs	r1, #4
 8002c64:	fa01 f202 	lsl.w	r2, r1, r2
 8002c68:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d071      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002c7a:	e06c      	b.n	8002d56 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c80:	f003 031c 	and.w	r3, r3, #28
 8002c84:	2202      	movs	r2, #2
 8002c86:	409a      	lsls	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d02e      	beq.n	8002cee <HAL_DMA_IRQHandler+0xec>
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d029      	beq.n	8002cee <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0320 	and.w	r3, r3, #32
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d10b      	bne.n	8002cc0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 020a 	bic.w	r2, r2, #10
 8002cb6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc4:	f003 021c 	and.w	r2, r3, #28
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ccc:	2102      	movs	r1, #2
 8002cce:	fa01 f202 	lsl.w	r2, r1, r2
 8002cd2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d038      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002cec:	e033      	b.n	8002d56 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf2:	f003 031c 	and.w	r3, r3, #28
 8002cf6:	2208      	movs	r2, #8
 8002cf8:	409a      	lsls	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d02a      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x156>
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	f003 0308 	and.w	r3, r3, #8
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d025      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 020e 	bic.w	r2, r2, #14
 8002d1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d20:	f003 021c 	and.w	r2, r3, #28
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d28:	2101      	movs	r1, #1
 8002d2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d2e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d004      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002d56:	bf00      	nop
 8002d58:	bf00      	nop
}
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b087      	sub	sp, #28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d6e:	e17f      	b.n	8003070 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	2101      	movs	r1, #1
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f000 8171 	beq.w	800306a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f003 0303 	and.w	r3, r3, #3
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d005      	beq.n	8002da0 <HAL_GPIO_Init+0x40>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f003 0303 	and.w	r3, r3, #3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d130      	bne.n	8002e02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	2203      	movs	r2, #3
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	43db      	mvns	r3, r3
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	4013      	ands	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	68da      	ldr	r2, [r3, #12]
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	43db      	mvns	r3, r3
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	4013      	ands	r3, r2
 8002de4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	091b      	lsrs	r3, r3, #4
 8002dec:	f003 0201 	and.w	r2, r3, #1
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	2b03      	cmp	r3, #3
 8002e0c:	d118      	bne.n	8002e40 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002e14:	2201      	movs	r2, #1
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	4013      	ands	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	08db      	lsrs	r3, r3, #3
 8002e2a:	f003 0201 	and.w	r2, r3, #1
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f003 0303 	and.w	r3, r3, #3
 8002e48:	2b03      	cmp	r3, #3
 8002e4a:	d017      	beq.n	8002e7c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	2203      	movs	r2, #3
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	4013      	ands	r3, r2
 8002e62:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f003 0303 	and.w	r3, r3, #3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d123      	bne.n	8002ed0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	08da      	lsrs	r2, r3, #3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3208      	adds	r2, #8
 8002e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e94:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	220f      	movs	r2, #15
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	691a      	ldr	r2, [r3, #16]
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	f003 0307 	and.w	r3, r3, #7
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	08da      	lsrs	r2, r3, #3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	3208      	adds	r2, #8
 8002eca:	6939      	ldr	r1, [r7, #16]
 8002ecc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	2203      	movs	r2, #3
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f003 0203 	and.w	r2, r3, #3
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f000 80ac 	beq.w	800306a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f12:	4b5f      	ldr	r3, [pc, #380]	@ (8003090 <HAL_GPIO_Init+0x330>)
 8002f14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f16:	4a5e      	ldr	r2, [pc, #376]	@ (8003090 <HAL_GPIO_Init+0x330>)
 8002f18:	f043 0301 	orr.w	r3, r3, #1
 8002f1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f1e:	4b5c      	ldr	r3, [pc, #368]	@ (8003090 <HAL_GPIO_Init+0x330>)
 8002f20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	60bb      	str	r3, [r7, #8]
 8002f28:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f2a:	4a5a      	ldr	r2, [pc, #360]	@ (8003094 <HAL_GPIO_Init+0x334>)
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	089b      	lsrs	r3, r3, #2
 8002f30:	3302      	adds	r3, #2
 8002f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f36:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	f003 0303 	and.w	r3, r3, #3
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	220f      	movs	r2, #15
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	43db      	mvns	r3, r3
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002f54:	d025      	beq.n	8002fa2 <HAL_GPIO_Init+0x242>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a4f      	ldr	r2, [pc, #316]	@ (8003098 <HAL_GPIO_Init+0x338>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d01f      	beq.n	8002f9e <HAL_GPIO_Init+0x23e>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a4e      	ldr	r2, [pc, #312]	@ (800309c <HAL_GPIO_Init+0x33c>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d019      	beq.n	8002f9a <HAL_GPIO_Init+0x23a>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a4d      	ldr	r2, [pc, #308]	@ (80030a0 <HAL_GPIO_Init+0x340>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d013      	beq.n	8002f96 <HAL_GPIO_Init+0x236>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a4c      	ldr	r2, [pc, #304]	@ (80030a4 <HAL_GPIO_Init+0x344>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d00d      	beq.n	8002f92 <HAL_GPIO_Init+0x232>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a4b      	ldr	r2, [pc, #300]	@ (80030a8 <HAL_GPIO_Init+0x348>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d007      	beq.n	8002f8e <HAL_GPIO_Init+0x22e>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a4a      	ldr	r2, [pc, #296]	@ (80030ac <HAL_GPIO_Init+0x34c>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d101      	bne.n	8002f8a <HAL_GPIO_Init+0x22a>
 8002f86:	2306      	movs	r3, #6
 8002f88:	e00c      	b.n	8002fa4 <HAL_GPIO_Init+0x244>
 8002f8a:	2307      	movs	r3, #7
 8002f8c:	e00a      	b.n	8002fa4 <HAL_GPIO_Init+0x244>
 8002f8e:	2305      	movs	r3, #5
 8002f90:	e008      	b.n	8002fa4 <HAL_GPIO_Init+0x244>
 8002f92:	2304      	movs	r3, #4
 8002f94:	e006      	b.n	8002fa4 <HAL_GPIO_Init+0x244>
 8002f96:	2303      	movs	r3, #3
 8002f98:	e004      	b.n	8002fa4 <HAL_GPIO_Init+0x244>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e002      	b.n	8002fa4 <HAL_GPIO_Init+0x244>
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <HAL_GPIO_Init+0x244>
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	f002 0203 	and.w	r2, r2, #3
 8002faa:	0092      	lsls	r2, r2, #2
 8002fac:	4093      	lsls	r3, r2
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002fb4:	4937      	ldr	r1, [pc, #220]	@ (8003094 <HAL_GPIO_Init+0x334>)
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	089b      	lsrs	r3, r3, #2
 8002fba:	3302      	adds	r3, #2
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fc2:	4b3b      	ldr	r3, [pc, #236]	@ (80030b0 <HAL_GPIO_Init+0x350>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002fe6:	4a32      	ldr	r2, [pc, #200]	@ (80030b0 <HAL_GPIO_Init+0x350>)
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002fec:	4b30      	ldr	r3, [pc, #192]	@ (80030b0 <HAL_GPIO_Init+0x350>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	4313      	orrs	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003010:	4a27      	ldr	r2, [pc, #156]	@ (80030b0 <HAL_GPIO_Init+0x350>)
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003016:	4b26      	ldr	r3, [pc, #152]	@ (80030b0 <HAL_GPIO_Init+0x350>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	43db      	mvns	r3, r3
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	4013      	ands	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4313      	orrs	r3, r2
 8003038:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800303a:	4a1d      	ldr	r2, [pc, #116]	@ (80030b0 <HAL_GPIO_Init+0x350>)
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003040:	4b1b      	ldr	r3, [pc, #108]	@ (80030b0 <HAL_GPIO_Init+0x350>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	43db      	mvns	r3, r3
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	4013      	ands	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	4313      	orrs	r3, r2
 8003062:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003064:	4a12      	ldr	r2, [pc, #72]	@ (80030b0 <HAL_GPIO_Init+0x350>)
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	3301      	adds	r3, #1
 800306e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	fa22 f303 	lsr.w	r3, r2, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	f47f ae78 	bne.w	8002d70 <HAL_GPIO_Init+0x10>
  }
}
 8003080:	bf00      	nop
 8003082:	bf00      	nop
 8003084:	371c      	adds	r7, #28
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	40021000 	.word	0x40021000
 8003094:	40010000 	.word	0x40010000
 8003098:	48000400 	.word	0x48000400
 800309c:	48000800 	.word	0x48000800
 80030a0:	48000c00 	.word	0x48000c00
 80030a4:	48001000 	.word	0x48001000
 80030a8:	48001400 	.word	0x48001400
 80030ac:	48001800 	.word	0x48001800
 80030b0:	40010400 	.word	0x40010400

080030b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	460b      	mov	r3, r1
 80030be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	691a      	ldr	r2, [r3, #16]
 80030c4:	887b      	ldrh	r3, [r7, #2]
 80030c6:	4013      	ands	r3, r2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d002      	beq.n	80030d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030cc:	2301      	movs	r3, #1
 80030ce:	73fb      	strb	r3, [r7, #15]
 80030d0:	e001      	b.n	80030d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030d2:	2300      	movs	r3, #0
 80030d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3714      	adds	r7, #20
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	460b      	mov	r3, r1
 80030ee:	807b      	strh	r3, [r7, #2]
 80030f0:	4613      	mov	r3, r2
 80030f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030f4:	787b      	ldrb	r3, [r7, #1]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030fa:	887a      	ldrh	r2, [r7, #2]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003100:	e002      	b.n	8003108 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003102:	887a      	ldrh	r2, [r7, #2]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e08d      	b.n	8003242 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d106      	bne.n	8003140 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7fe fd6e 	bl	8001c1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2224      	movs	r2, #36	@ 0x24
 8003144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 0201 	bic.w	r2, r2, #1
 8003156:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003164:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003174:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d107      	bne.n	800318e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689a      	ldr	r2, [r3, #8]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800318a:	609a      	str	r2, [r3, #8]
 800318c:	e006      	b.n	800319c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800319a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d108      	bne.n	80031b6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031b2:	605a      	str	r2, [r3, #4]
 80031b4:	e007      	b.n	80031c6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	6812      	ldr	r2, [r2, #0]
 80031d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80031d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80031e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	691a      	ldr	r2, [r3, #16]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	69d9      	ldr	r1, [r3, #28]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a1a      	ldr	r2, [r3, #32]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	430a      	orrs	r2, r1
 8003212:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0201 	orr.w	r2, r2, #1
 8003222:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2220      	movs	r2, #32
 800322e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
 8003252:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b20      	cmp	r3, #32
 800325e:	d138      	bne.n	80032d2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003266:	2b01      	cmp	r3, #1
 8003268:	d101      	bne.n	800326e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800326a:	2302      	movs	r3, #2
 800326c:	e032      	b.n	80032d4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2224      	movs	r2, #36	@ 0x24
 800327a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0201 	bic.w	r2, r2, #1
 800328c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800329c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6819      	ldr	r1, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f042 0201 	orr.w	r2, r2, #1
 80032bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2220      	movs	r2, #32
 80032c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80032ce:	2300      	movs	r3, #0
 80032d0:	e000      	b.n	80032d4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80032d2:	2302      	movs	r3, #2
  }
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b20      	cmp	r3, #32
 80032f4:	d139      	bne.n	800336a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003300:	2302      	movs	r3, #2
 8003302:	e033      	b.n	800336c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2224      	movs	r2, #36	@ 0x24
 8003310:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 0201 	bic.w	r2, r2, #1
 8003322:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003332:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	021b      	lsls	r3, r3, #8
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	4313      	orrs	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f042 0201 	orr.w	r2, r2, #1
 8003354:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2220      	movs	r2, #32
 800335a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003366:	2300      	movs	r3, #0
 8003368:	e000      	b.n	800336c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800336a:	2302      	movs	r3, #2
  }
}
 800336c:	4618      	mov	r0, r3
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800337c:	4b04      	ldr	r3, [pc, #16]	@ (8003390 <HAL_PWREx_GetVoltageRange+0x18>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003384:	4618      	mov	r0, r3
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	40007000 	.word	0x40007000

08003394 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033a2:	d130      	bne.n	8003406 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80033a4:	4b23      	ldr	r3, [pc, #140]	@ (8003434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80033ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033b0:	d038      	beq.n	8003424 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033b2:	4b20      	ldr	r3, [pc, #128]	@ (8003434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80033ba:	4a1e      	ldr	r2, [pc, #120]	@ (8003434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033c2:	4b1d      	ldr	r3, [pc, #116]	@ (8003438 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2232      	movs	r2, #50	@ 0x32
 80033c8:	fb02 f303 	mul.w	r3, r2, r3
 80033cc:	4a1b      	ldr	r2, [pc, #108]	@ (800343c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80033ce:	fba2 2303 	umull	r2, r3, r2, r3
 80033d2:	0c9b      	lsrs	r3, r3, #18
 80033d4:	3301      	adds	r3, #1
 80033d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033d8:	e002      	b.n	80033e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	3b01      	subs	r3, #1
 80033de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033e0:	4b14      	ldr	r3, [pc, #80]	@ (8003434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033ec:	d102      	bne.n	80033f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1f2      	bne.n	80033da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003400:	d110      	bne.n	8003424 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e00f      	b.n	8003426 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003406:	4b0b      	ldr	r3, [pc, #44]	@ (8003434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800340e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003412:	d007      	beq.n	8003424 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003414:	4b07      	ldr	r3, [pc, #28]	@ (8003434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800341c:	4a05      	ldr	r2, [pc, #20]	@ (8003434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800341e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003422:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3714      	adds	r7, #20
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	40007000 	.word	0x40007000
 8003438:	20000008 	.word	0x20000008
 800343c:	431bde83 	.word	0x431bde83

08003440 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b088      	sub	sp, #32
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e3ca      	b.n	8003be8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003452:	4b97      	ldr	r3, [pc, #604]	@ (80036b0 <HAL_RCC_OscConfig+0x270>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 030c 	and.w	r3, r3, #12
 800345a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800345c:	4b94      	ldr	r3, [pc, #592]	@ (80036b0 <HAL_RCC_OscConfig+0x270>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f003 0303 	and.w	r3, r3, #3
 8003464:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0310 	and.w	r3, r3, #16
 800346e:	2b00      	cmp	r3, #0
 8003470:	f000 80e4 	beq.w	800363c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d007      	beq.n	800348a <HAL_RCC_OscConfig+0x4a>
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	2b0c      	cmp	r3, #12
 800347e:	f040 808b 	bne.w	8003598 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	2b01      	cmp	r3, #1
 8003486:	f040 8087 	bne.w	8003598 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800348a:	4b89      	ldr	r3, [pc, #548]	@ (80036b0 <HAL_RCC_OscConfig+0x270>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d005      	beq.n	80034a2 <HAL_RCC_OscConfig+0x62>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e3a2      	b.n	8003be8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a1a      	ldr	r2, [r3, #32]
 80034a6:	4b82      	ldr	r3, [pc, #520]	@ (80036b0 <HAL_RCC_OscConfig+0x270>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d004      	beq.n	80034bc <HAL_RCC_OscConfig+0x7c>
 80034b2:	4b7f      	ldr	r3, [pc, #508]	@ (80036b0 <HAL_RCC_OscConfig+0x270>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034ba:	e005      	b.n	80034c8 <HAL_RCC_OscConfig+0x88>
 80034bc:	4b7c      	ldr	r3, [pc, #496]	@ (80036b0 <HAL_RCC_OscConfig+0x270>)
 80034be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034c2:	091b      	lsrs	r3, r3, #4
 80034c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d223      	bcs.n	8003514 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f000 fd55 	bl	8003f80 <RCC_SetFlashLatencyFromMSIRange>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e383      	b.n	8003be8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034e0:	4b73      	ldr	r3, [pc, #460]	@ (80036b0 <HAL_RCC_OscConfig+0x270>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a72      	ldr	r2, [pc, #456]	@ (80036b0 <HAL_RCC_OscConfig+0x270>)
 80034e6:	f043 0308 	orr.w	r3, r3, #8
 80034ea:	6013      	str	r3, [r2, #0]
 80034ec:	4b70      	ldr	r3, [pc, #448]	@ (80036b0 <HAL_RCC_OscConfig+0x270>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	496d      	ldr	r1, [pc, #436]	@ (80036b0 <HAL_RCC_OscConfig+0x270>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034fe:	4b6c      	ldr	r3, [pc, #432]	@ (80036b0 <HAL_RCC_OscConfig+0x270>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	021b      	lsls	r3, r3, #8
 800350c:	4968      	ldr	r1, [pc, #416]	@ (80036b0 <HAL_RCC_OscConfig+0x270>)
 800350e:	4313      	orrs	r3, r2
 8003510:	604b      	str	r3, [r1, #4]
 8003512:	e025      	b.n	8003560 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003514:	4b66      	ldr	r3, [pc, #408]	@ (80036b0 <HAL_RCC_OscConfig+0x270>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a65      	ldr	r2, [pc, #404]	@ (80036b0 <HAL_RCC_OscConfig+0x270>)
 800351a:	f043 0308 	orr.w	r3, r3, #8
 800351e:	6013      	str	r3, [r2, #0]
 8003520:	4b63      	ldr	r3, [pc, #396]	@ (80036b0 <HAL_RCC_OscConfig+0x270>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	4960      	ldr	r1, [pc, #384]	@ (80036b0 <HAL_RCC_OscConfig+0x270>)
 800352e:	4313      	orrs	r3, r2
 8003530:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003532:	4b5f      	ldr	r3, [pc, #380]	@ (80036b0 <HAL_RCC_OscConfig+0x270>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	021b      	lsls	r3, r3, #8
 8003540:	495b      	ldr	r1, [pc, #364]	@ (80036b0 <HAL_RCC_OscConfig+0x270>)
 8003542:	4313      	orrs	r3, r2
 8003544:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d109      	bne.n	8003560 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	4618      	mov	r0, r3
 8003552:	f000 fd15 	bl	8003f80 <RCC_SetFlashLatencyFromMSIRange>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e343      	b.n	8003be8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003560:	f000 fc4a 	bl	8003df8 <HAL_RCC_GetSysClockFreq>
 8003564:	4602      	mov	r2, r0
 8003566:	4b52      	ldr	r3, [pc, #328]	@ (80036b0 <HAL_RCC_OscConfig+0x270>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	091b      	lsrs	r3, r3, #4
 800356c:	f003 030f 	and.w	r3, r3, #15
 8003570:	4950      	ldr	r1, [pc, #320]	@ (80036b4 <HAL_RCC_OscConfig+0x274>)
 8003572:	5ccb      	ldrb	r3, [r1, r3]
 8003574:	f003 031f 	and.w	r3, r3, #31
 8003578:	fa22 f303 	lsr.w	r3, r2, r3
 800357c:	4a4e      	ldr	r2, [pc, #312]	@ (80036b8 <HAL_RCC_OscConfig+0x278>)
 800357e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003580:	4b4e      	ldr	r3, [pc, #312]	@ (80036bc <HAL_RCC_OscConfig+0x27c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff f873 	bl	8002670 <HAL_InitTick>
 800358a:	4603      	mov	r3, r0
 800358c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800358e:	7bfb      	ldrb	r3, [r7, #15]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d052      	beq.n	800363a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003594:	7bfb      	ldrb	r3, [r7, #15]
 8003596:	e327      	b.n	8003be8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d032      	beq.n	8003606 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80035a0:	4b43      	ldr	r3, [pc, #268]	@ (80036b0 <HAL_RCC_OscConfig+0x270>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a42      	ldr	r2, [pc, #264]	@ (80036b0 <HAL_RCC_OscConfig+0x270>)
 80035a6:	f043 0301 	orr.w	r3, r3, #1
 80035aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035ac:	f7ff f8b0 	bl	8002710 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035b4:	f7ff f8ac 	bl	8002710 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e310      	b.n	8003be8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035c6:	4b3a      	ldr	r3, [pc, #232]	@ (80036b0 <HAL_RCC_OscConfig+0x270>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d0f0      	beq.n	80035b4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035d2:	4b37      	ldr	r3, [pc, #220]	@ (80036b0 <HAL_RCC_OscConfig+0x270>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a36      	ldr	r2, [pc, #216]	@ (80036b0 <HAL_RCC_OscConfig+0x270>)
 80035d8:	f043 0308 	orr.w	r3, r3, #8
 80035dc:	6013      	str	r3, [r2, #0]
 80035de:	4b34      	ldr	r3, [pc, #208]	@ (80036b0 <HAL_RCC_OscConfig+0x270>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	4931      	ldr	r1, [pc, #196]	@ (80036b0 <HAL_RCC_OscConfig+0x270>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035f0:	4b2f      	ldr	r3, [pc, #188]	@ (80036b0 <HAL_RCC_OscConfig+0x270>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	021b      	lsls	r3, r3, #8
 80035fe:	492c      	ldr	r1, [pc, #176]	@ (80036b0 <HAL_RCC_OscConfig+0x270>)
 8003600:	4313      	orrs	r3, r2
 8003602:	604b      	str	r3, [r1, #4]
 8003604:	e01a      	b.n	800363c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003606:	4b2a      	ldr	r3, [pc, #168]	@ (80036b0 <HAL_RCC_OscConfig+0x270>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a29      	ldr	r2, [pc, #164]	@ (80036b0 <HAL_RCC_OscConfig+0x270>)
 800360c:	f023 0301 	bic.w	r3, r3, #1
 8003610:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003612:	f7ff f87d 	bl	8002710 <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800361a:	f7ff f879 	bl	8002710 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e2dd      	b.n	8003be8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800362c:	4b20      	ldr	r3, [pc, #128]	@ (80036b0 <HAL_RCC_OscConfig+0x270>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1f0      	bne.n	800361a <HAL_RCC_OscConfig+0x1da>
 8003638:	e000      	b.n	800363c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800363a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	2b00      	cmp	r3, #0
 8003646:	d074      	beq.n	8003732 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	2b08      	cmp	r3, #8
 800364c:	d005      	beq.n	800365a <HAL_RCC_OscConfig+0x21a>
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	2b0c      	cmp	r3, #12
 8003652:	d10e      	bne.n	8003672 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	2b03      	cmp	r3, #3
 8003658:	d10b      	bne.n	8003672 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800365a:	4b15      	ldr	r3, [pc, #84]	@ (80036b0 <HAL_RCC_OscConfig+0x270>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d064      	beq.n	8003730 <HAL_RCC_OscConfig+0x2f0>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d160      	bne.n	8003730 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e2ba      	b.n	8003be8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800367a:	d106      	bne.n	800368a <HAL_RCC_OscConfig+0x24a>
 800367c:	4b0c      	ldr	r3, [pc, #48]	@ (80036b0 <HAL_RCC_OscConfig+0x270>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a0b      	ldr	r2, [pc, #44]	@ (80036b0 <HAL_RCC_OscConfig+0x270>)
 8003682:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003686:	6013      	str	r3, [r2, #0]
 8003688:	e026      	b.n	80036d8 <HAL_RCC_OscConfig+0x298>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003692:	d115      	bne.n	80036c0 <HAL_RCC_OscConfig+0x280>
 8003694:	4b06      	ldr	r3, [pc, #24]	@ (80036b0 <HAL_RCC_OscConfig+0x270>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a05      	ldr	r2, [pc, #20]	@ (80036b0 <HAL_RCC_OscConfig+0x270>)
 800369a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800369e:	6013      	str	r3, [r2, #0]
 80036a0:	4b03      	ldr	r3, [pc, #12]	@ (80036b0 <HAL_RCC_OscConfig+0x270>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a02      	ldr	r2, [pc, #8]	@ (80036b0 <HAL_RCC_OscConfig+0x270>)
 80036a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036aa:	6013      	str	r3, [r2, #0]
 80036ac:	e014      	b.n	80036d8 <HAL_RCC_OscConfig+0x298>
 80036ae:	bf00      	nop
 80036b0:	40021000 	.word	0x40021000
 80036b4:	0800a098 	.word	0x0800a098
 80036b8:	20000008 	.word	0x20000008
 80036bc:	2000000c 	.word	0x2000000c
 80036c0:	4ba0      	ldr	r3, [pc, #640]	@ (8003944 <HAL_RCC_OscConfig+0x504>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a9f      	ldr	r2, [pc, #636]	@ (8003944 <HAL_RCC_OscConfig+0x504>)
 80036c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036ca:	6013      	str	r3, [r2, #0]
 80036cc:	4b9d      	ldr	r3, [pc, #628]	@ (8003944 <HAL_RCC_OscConfig+0x504>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a9c      	ldr	r2, [pc, #624]	@ (8003944 <HAL_RCC_OscConfig+0x504>)
 80036d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d013      	beq.n	8003708 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e0:	f7ff f816 	bl	8002710 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036e8:	f7ff f812 	bl	8002710 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b64      	cmp	r3, #100	@ 0x64
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e276      	b.n	8003be8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036fa:	4b92      	ldr	r3, [pc, #584]	@ (8003944 <HAL_RCC_OscConfig+0x504>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d0f0      	beq.n	80036e8 <HAL_RCC_OscConfig+0x2a8>
 8003706:	e014      	b.n	8003732 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003708:	f7ff f802 	bl	8002710 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003710:	f7fe fffe 	bl	8002710 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b64      	cmp	r3, #100	@ 0x64
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e262      	b.n	8003be8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003722:	4b88      	ldr	r3, [pc, #544]	@ (8003944 <HAL_RCC_OscConfig+0x504>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1f0      	bne.n	8003710 <HAL_RCC_OscConfig+0x2d0>
 800372e:	e000      	b.n	8003732 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003730:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d060      	beq.n	8003800 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	2b04      	cmp	r3, #4
 8003742:	d005      	beq.n	8003750 <HAL_RCC_OscConfig+0x310>
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	2b0c      	cmp	r3, #12
 8003748:	d119      	bne.n	800377e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	2b02      	cmp	r3, #2
 800374e:	d116      	bne.n	800377e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003750:	4b7c      	ldr	r3, [pc, #496]	@ (8003944 <HAL_RCC_OscConfig+0x504>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003758:	2b00      	cmp	r3, #0
 800375a:	d005      	beq.n	8003768 <HAL_RCC_OscConfig+0x328>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e23f      	b.n	8003be8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003768:	4b76      	ldr	r3, [pc, #472]	@ (8003944 <HAL_RCC_OscConfig+0x504>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	061b      	lsls	r3, r3, #24
 8003776:	4973      	ldr	r1, [pc, #460]	@ (8003944 <HAL_RCC_OscConfig+0x504>)
 8003778:	4313      	orrs	r3, r2
 800377a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800377c:	e040      	b.n	8003800 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d023      	beq.n	80037ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003786:	4b6f      	ldr	r3, [pc, #444]	@ (8003944 <HAL_RCC_OscConfig+0x504>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a6e      	ldr	r2, [pc, #440]	@ (8003944 <HAL_RCC_OscConfig+0x504>)
 800378c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003790:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003792:	f7fe ffbd 	bl	8002710 <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003798:	e008      	b.n	80037ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800379a:	f7fe ffb9 	bl	8002710 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d901      	bls.n	80037ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e21d      	b.n	8003be8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037ac:	4b65      	ldr	r3, [pc, #404]	@ (8003944 <HAL_RCC_OscConfig+0x504>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0f0      	beq.n	800379a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b8:	4b62      	ldr	r3, [pc, #392]	@ (8003944 <HAL_RCC_OscConfig+0x504>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	061b      	lsls	r3, r3, #24
 80037c6:	495f      	ldr	r1, [pc, #380]	@ (8003944 <HAL_RCC_OscConfig+0x504>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	604b      	str	r3, [r1, #4]
 80037cc:	e018      	b.n	8003800 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037ce:	4b5d      	ldr	r3, [pc, #372]	@ (8003944 <HAL_RCC_OscConfig+0x504>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a5c      	ldr	r2, [pc, #368]	@ (8003944 <HAL_RCC_OscConfig+0x504>)
 80037d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037da:	f7fe ff99 	bl	8002710 <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037e0:	e008      	b.n	80037f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037e2:	f7fe ff95 	bl	8002710 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e1f9      	b.n	8003be8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037f4:	4b53      	ldr	r3, [pc, #332]	@ (8003944 <HAL_RCC_OscConfig+0x504>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1f0      	bne.n	80037e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0308 	and.w	r3, r3, #8
 8003808:	2b00      	cmp	r3, #0
 800380a:	d03c      	beq.n	8003886 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d01c      	beq.n	800384e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003814:	4b4b      	ldr	r3, [pc, #300]	@ (8003944 <HAL_RCC_OscConfig+0x504>)
 8003816:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800381a:	4a4a      	ldr	r2, [pc, #296]	@ (8003944 <HAL_RCC_OscConfig+0x504>)
 800381c:	f043 0301 	orr.w	r3, r3, #1
 8003820:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003824:	f7fe ff74 	bl	8002710 <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800382c:	f7fe ff70 	bl	8002710 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e1d4      	b.n	8003be8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800383e:	4b41      	ldr	r3, [pc, #260]	@ (8003944 <HAL_RCC_OscConfig+0x504>)
 8003840:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d0ef      	beq.n	800382c <HAL_RCC_OscConfig+0x3ec>
 800384c:	e01b      	b.n	8003886 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800384e:	4b3d      	ldr	r3, [pc, #244]	@ (8003944 <HAL_RCC_OscConfig+0x504>)
 8003850:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003854:	4a3b      	ldr	r2, [pc, #236]	@ (8003944 <HAL_RCC_OscConfig+0x504>)
 8003856:	f023 0301 	bic.w	r3, r3, #1
 800385a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800385e:	f7fe ff57 	bl	8002710 <HAL_GetTick>
 8003862:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003864:	e008      	b.n	8003878 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003866:	f7fe ff53 	bl	8002710 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e1b7      	b.n	8003be8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003878:	4b32      	ldr	r3, [pc, #200]	@ (8003944 <HAL_RCC_OscConfig+0x504>)
 800387a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1ef      	bne.n	8003866 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0304 	and.w	r3, r3, #4
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 80a6 	beq.w	80039e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003894:	2300      	movs	r3, #0
 8003896:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003898:	4b2a      	ldr	r3, [pc, #168]	@ (8003944 <HAL_RCC_OscConfig+0x504>)
 800389a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800389c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10d      	bne.n	80038c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038a4:	4b27      	ldr	r3, [pc, #156]	@ (8003944 <HAL_RCC_OscConfig+0x504>)
 80038a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a8:	4a26      	ldr	r2, [pc, #152]	@ (8003944 <HAL_RCC_OscConfig+0x504>)
 80038aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80038b0:	4b24      	ldr	r3, [pc, #144]	@ (8003944 <HAL_RCC_OscConfig+0x504>)
 80038b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038b8:	60bb      	str	r3, [r7, #8]
 80038ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038bc:	2301      	movs	r3, #1
 80038be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038c0:	4b21      	ldr	r3, [pc, #132]	@ (8003948 <HAL_RCC_OscConfig+0x508>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d118      	bne.n	80038fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038cc:	4b1e      	ldr	r3, [pc, #120]	@ (8003948 <HAL_RCC_OscConfig+0x508>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a1d      	ldr	r2, [pc, #116]	@ (8003948 <HAL_RCC_OscConfig+0x508>)
 80038d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038d8:	f7fe ff1a 	bl	8002710 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038e0:	f7fe ff16 	bl	8002710 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e17a      	b.n	8003be8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038f2:	4b15      	ldr	r3, [pc, #84]	@ (8003948 <HAL_RCC_OscConfig+0x508>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0f0      	beq.n	80038e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d108      	bne.n	8003918 <HAL_RCC_OscConfig+0x4d8>
 8003906:	4b0f      	ldr	r3, [pc, #60]	@ (8003944 <HAL_RCC_OscConfig+0x504>)
 8003908:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800390c:	4a0d      	ldr	r2, [pc, #52]	@ (8003944 <HAL_RCC_OscConfig+0x504>)
 800390e:	f043 0301 	orr.w	r3, r3, #1
 8003912:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003916:	e029      	b.n	800396c <HAL_RCC_OscConfig+0x52c>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	2b05      	cmp	r3, #5
 800391e:	d115      	bne.n	800394c <HAL_RCC_OscConfig+0x50c>
 8003920:	4b08      	ldr	r3, [pc, #32]	@ (8003944 <HAL_RCC_OscConfig+0x504>)
 8003922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003926:	4a07      	ldr	r2, [pc, #28]	@ (8003944 <HAL_RCC_OscConfig+0x504>)
 8003928:	f043 0304 	orr.w	r3, r3, #4
 800392c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003930:	4b04      	ldr	r3, [pc, #16]	@ (8003944 <HAL_RCC_OscConfig+0x504>)
 8003932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003936:	4a03      	ldr	r2, [pc, #12]	@ (8003944 <HAL_RCC_OscConfig+0x504>)
 8003938:	f043 0301 	orr.w	r3, r3, #1
 800393c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003940:	e014      	b.n	800396c <HAL_RCC_OscConfig+0x52c>
 8003942:	bf00      	nop
 8003944:	40021000 	.word	0x40021000
 8003948:	40007000 	.word	0x40007000
 800394c:	4b9c      	ldr	r3, [pc, #624]	@ (8003bc0 <HAL_RCC_OscConfig+0x780>)
 800394e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003952:	4a9b      	ldr	r2, [pc, #620]	@ (8003bc0 <HAL_RCC_OscConfig+0x780>)
 8003954:	f023 0301 	bic.w	r3, r3, #1
 8003958:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800395c:	4b98      	ldr	r3, [pc, #608]	@ (8003bc0 <HAL_RCC_OscConfig+0x780>)
 800395e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003962:	4a97      	ldr	r2, [pc, #604]	@ (8003bc0 <HAL_RCC_OscConfig+0x780>)
 8003964:	f023 0304 	bic.w	r3, r3, #4
 8003968:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d016      	beq.n	80039a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003974:	f7fe fecc 	bl	8002710 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800397a:	e00a      	b.n	8003992 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800397c:	f7fe fec8 	bl	8002710 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	f241 3288 	movw	r2, #5000	@ 0x1388
 800398a:	4293      	cmp	r3, r2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e12a      	b.n	8003be8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003992:	4b8b      	ldr	r3, [pc, #556]	@ (8003bc0 <HAL_RCC_OscConfig+0x780>)
 8003994:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0ed      	beq.n	800397c <HAL_RCC_OscConfig+0x53c>
 80039a0:	e015      	b.n	80039ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a2:	f7fe feb5 	bl	8002710 <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039a8:	e00a      	b.n	80039c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039aa:	f7fe feb1 	bl	8002710 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e113      	b.n	8003be8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039c0:	4b7f      	ldr	r3, [pc, #508]	@ (8003bc0 <HAL_RCC_OscConfig+0x780>)
 80039c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1ed      	bne.n	80039aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039ce:	7ffb      	ldrb	r3, [r7, #31]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d105      	bne.n	80039e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039d4:	4b7a      	ldr	r3, [pc, #488]	@ (8003bc0 <HAL_RCC_OscConfig+0x780>)
 80039d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d8:	4a79      	ldr	r2, [pc, #484]	@ (8003bc0 <HAL_RCC_OscConfig+0x780>)
 80039da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039de:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 80fe 	beq.w	8003be6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	f040 80d0 	bne.w	8003b94 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80039f4:	4b72      	ldr	r3, [pc, #456]	@ (8003bc0 <HAL_RCC_OscConfig+0x780>)
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f003 0203 	and.w	r2, r3, #3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d130      	bne.n	8003a6a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a12:	3b01      	subs	r3, #1
 8003a14:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d127      	bne.n	8003a6a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a24:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d11f      	bne.n	8003a6a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003a34:	2a07      	cmp	r2, #7
 8003a36:	bf14      	ite	ne
 8003a38:	2201      	movne	r2, #1
 8003a3a:	2200      	moveq	r2, #0
 8003a3c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d113      	bne.n	8003a6a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a4c:	085b      	lsrs	r3, r3, #1
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d109      	bne.n	8003a6a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a60:	085b      	lsrs	r3, r3, #1
 8003a62:	3b01      	subs	r3, #1
 8003a64:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d06e      	beq.n	8003b48 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	2b0c      	cmp	r3, #12
 8003a6e:	d069      	beq.n	8003b44 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a70:	4b53      	ldr	r3, [pc, #332]	@ (8003bc0 <HAL_RCC_OscConfig+0x780>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d105      	bne.n	8003a88 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003a7c:	4b50      	ldr	r3, [pc, #320]	@ (8003bc0 <HAL_RCC_OscConfig+0x780>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e0ad      	b.n	8003be8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a8c:	4b4c      	ldr	r3, [pc, #304]	@ (8003bc0 <HAL_RCC_OscConfig+0x780>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a4b      	ldr	r2, [pc, #300]	@ (8003bc0 <HAL_RCC_OscConfig+0x780>)
 8003a92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a96:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a98:	f7fe fe3a 	bl	8002710 <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aa0:	f7fe fe36 	bl	8002710 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e09a      	b.n	8003be8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ab2:	4b43      	ldr	r3, [pc, #268]	@ (8003bc0 <HAL_RCC_OscConfig+0x780>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1f0      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003abe:	4b40      	ldr	r3, [pc, #256]	@ (8003bc0 <HAL_RCC_OscConfig+0x780>)
 8003ac0:	68da      	ldr	r2, [r3, #12]
 8003ac2:	4b40      	ldr	r3, [pc, #256]	@ (8003bc4 <HAL_RCC_OscConfig+0x784>)
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003ace:	3a01      	subs	r2, #1
 8003ad0:	0112      	lsls	r2, r2, #4
 8003ad2:	4311      	orrs	r1, r2
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003ad8:	0212      	lsls	r2, r2, #8
 8003ada:	4311      	orrs	r1, r2
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003ae0:	0852      	lsrs	r2, r2, #1
 8003ae2:	3a01      	subs	r2, #1
 8003ae4:	0552      	lsls	r2, r2, #21
 8003ae6:	4311      	orrs	r1, r2
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003aec:	0852      	lsrs	r2, r2, #1
 8003aee:	3a01      	subs	r2, #1
 8003af0:	0652      	lsls	r2, r2, #25
 8003af2:	4311      	orrs	r1, r2
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003af8:	0912      	lsrs	r2, r2, #4
 8003afa:	0452      	lsls	r2, r2, #17
 8003afc:	430a      	orrs	r2, r1
 8003afe:	4930      	ldr	r1, [pc, #192]	@ (8003bc0 <HAL_RCC_OscConfig+0x780>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b04:	4b2e      	ldr	r3, [pc, #184]	@ (8003bc0 <HAL_RCC_OscConfig+0x780>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a2d      	ldr	r2, [pc, #180]	@ (8003bc0 <HAL_RCC_OscConfig+0x780>)
 8003b0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b0e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b10:	4b2b      	ldr	r3, [pc, #172]	@ (8003bc0 <HAL_RCC_OscConfig+0x780>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	4a2a      	ldr	r2, [pc, #168]	@ (8003bc0 <HAL_RCC_OscConfig+0x780>)
 8003b16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b1a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b1c:	f7fe fdf8 	bl	8002710 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b24:	f7fe fdf4 	bl	8002710 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e058      	b.n	8003be8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b36:	4b22      	ldr	r3, [pc, #136]	@ (8003bc0 <HAL_RCC_OscConfig+0x780>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0f0      	beq.n	8003b24 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b42:	e050      	b.n	8003be6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e04f      	b.n	8003be8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b48:	4b1d      	ldr	r3, [pc, #116]	@ (8003bc0 <HAL_RCC_OscConfig+0x780>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d148      	bne.n	8003be6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b54:	4b1a      	ldr	r3, [pc, #104]	@ (8003bc0 <HAL_RCC_OscConfig+0x780>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a19      	ldr	r2, [pc, #100]	@ (8003bc0 <HAL_RCC_OscConfig+0x780>)
 8003b5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b5e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b60:	4b17      	ldr	r3, [pc, #92]	@ (8003bc0 <HAL_RCC_OscConfig+0x780>)
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	4a16      	ldr	r2, [pc, #88]	@ (8003bc0 <HAL_RCC_OscConfig+0x780>)
 8003b66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b6a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b6c:	f7fe fdd0 	bl	8002710 <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b74:	f7fe fdcc 	bl	8002710 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e030      	b.n	8003be8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b86:	4b0e      	ldr	r3, [pc, #56]	@ (8003bc0 <HAL_RCC_OscConfig+0x780>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d0f0      	beq.n	8003b74 <HAL_RCC_OscConfig+0x734>
 8003b92:	e028      	b.n	8003be6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	2b0c      	cmp	r3, #12
 8003b98:	d023      	beq.n	8003be2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b9a:	4b09      	ldr	r3, [pc, #36]	@ (8003bc0 <HAL_RCC_OscConfig+0x780>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a08      	ldr	r2, [pc, #32]	@ (8003bc0 <HAL_RCC_OscConfig+0x780>)
 8003ba0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ba4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba6:	f7fe fdb3 	bl	8002710 <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bac:	e00c      	b.n	8003bc8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bae:	f7fe fdaf 	bl	8002710 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d905      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e013      	b.n	8003be8 <HAL_RCC_OscConfig+0x7a8>
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bc8:	4b09      	ldr	r3, [pc, #36]	@ (8003bf0 <HAL_RCC_OscConfig+0x7b0>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1ec      	bne.n	8003bae <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003bd4:	4b06      	ldr	r3, [pc, #24]	@ (8003bf0 <HAL_RCC_OscConfig+0x7b0>)
 8003bd6:	68da      	ldr	r2, [r3, #12]
 8003bd8:	4905      	ldr	r1, [pc, #20]	@ (8003bf0 <HAL_RCC_OscConfig+0x7b0>)
 8003bda:	4b06      	ldr	r3, [pc, #24]	@ (8003bf4 <HAL_RCC_OscConfig+0x7b4>)
 8003bdc:	4013      	ands	r3, r2
 8003bde:	60cb      	str	r3, [r1, #12]
 8003be0:	e001      	b.n	8003be6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e000      	b.n	8003be8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3720      	adds	r7, #32
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	feeefffc 	.word	0xfeeefffc

08003bf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d101      	bne.n	8003c0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e0e7      	b.n	8003ddc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c0c:	4b75      	ldr	r3, [pc, #468]	@ (8003de4 <HAL_RCC_ClockConfig+0x1ec>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0307 	and.w	r3, r3, #7
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d910      	bls.n	8003c3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c1a:	4b72      	ldr	r3, [pc, #456]	@ (8003de4 <HAL_RCC_ClockConfig+0x1ec>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f023 0207 	bic.w	r2, r3, #7
 8003c22:	4970      	ldr	r1, [pc, #448]	@ (8003de4 <HAL_RCC_ClockConfig+0x1ec>)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c2a:	4b6e      	ldr	r3, [pc, #440]	@ (8003de4 <HAL_RCC_ClockConfig+0x1ec>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0307 	and.w	r3, r3, #7
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d001      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e0cf      	b.n	8003ddc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d010      	beq.n	8003c6a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	4b66      	ldr	r3, [pc, #408]	@ (8003de8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d908      	bls.n	8003c6a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c58:	4b63      	ldr	r3, [pc, #396]	@ (8003de8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	4960      	ldr	r1, [pc, #384]	@ (8003de8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d04c      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2b03      	cmp	r3, #3
 8003c7c:	d107      	bne.n	8003c8e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c7e:	4b5a      	ldr	r3, [pc, #360]	@ (8003de8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d121      	bne.n	8003cce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e0a6      	b.n	8003ddc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d107      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c96:	4b54      	ldr	r3, [pc, #336]	@ (8003de8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d115      	bne.n	8003cce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e09a      	b.n	8003ddc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d107      	bne.n	8003cbe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cae:	4b4e      	ldr	r3, [pc, #312]	@ (8003de8 <HAL_RCC_ClockConfig+0x1f0>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d109      	bne.n	8003cce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e08e      	b.n	8003ddc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cbe:	4b4a      	ldr	r3, [pc, #296]	@ (8003de8 <HAL_RCC_ClockConfig+0x1f0>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e086      	b.n	8003ddc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003cce:	4b46      	ldr	r3, [pc, #280]	@ (8003de8 <HAL_RCC_ClockConfig+0x1f0>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f023 0203 	bic.w	r2, r3, #3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	4943      	ldr	r1, [pc, #268]	@ (8003de8 <HAL_RCC_ClockConfig+0x1f0>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ce0:	f7fe fd16 	bl	8002710 <HAL_GetTick>
 8003ce4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce6:	e00a      	b.n	8003cfe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ce8:	f7fe fd12 	bl	8002710 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e06e      	b.n	8003ddc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cfe:	4b3a      	ldr	r3, [pc, #232]	@ (8003de8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 020c 	and.w	r2, r3, #12
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d1eb      	bne.n	8003ce8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d010      	beq.n	8003d3e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	4b31      	ldr	r3, [pc, #196]	@ (8003de8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d208      	bcs.n	8003d3e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d2c:	4b2e      	ldr	r3, [pc, #184]	@ (8003de8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	492b      	ldr	r1, [pc, #172]	@ (8003de8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d3e:	4b29      	ldr	r3, [pc, #164]	@ (8003de4 <HAL_RCC_ClockConfig+0x1ec>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0307 	and.w	r3, r3, #7
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d210      	bcs.n	8003d6e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d4c:	4b25      	ldr	r3, [pc, #148]	@ (8003de4 <HAL_RCC_ClockConfig+0x1ec>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f023 0207 	bic.w	r2, r3, #7
 8003d54:	4923      	ldr	r1, [pc, #140]	@ (8003de4 <HAL_RCC_ClockConfig+0x1ec>)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d5c:	4b21      	ldr	r3, [pc, #132]	@ (8003de4 <HAL_RCC_ClockConfig+0x1ec>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0307 	and.w	r3, r3, #7
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d001      	beq.n	8003d6e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e036      	b.n	8003ddc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0304 	and.w	r3, r3, #4
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d008      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8003de8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	4918      	ldr	r1, [pc, #96]	@ (8003de8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0308 	and.w	r3, r3, #8
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d009      	beq.n	8003dac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d98:	4b13      	ldr	r3, [pc, #76]	@ (8003de8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	4910      	ldr	r1, [pc, #64]	@ (8003de8 <HAL_RCC_ClockConfig+0x1f0>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003dac:	f000 f824 	bl	8003df8 <HAL_RCC_GetSysClockFreq>
 8003db0:	4602      	mov	r2, r0
 8003db2:	4b0d      	ldr	r3, [pc, #52]	@ (8003de8 <HAL_RCC_ClockConfig+0x1f0>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	091b      	lsrs	r3, r3, #4
 8003db8:	f003 030f 	and.w	r3, r3, #15
 8003dbc:	490b      	ldr	r1, [pc, #44]	@ (8003dec <HAL_RCC_ClockConfig+0x1f4>)
 8003dbe:	5ccb      	ldrb	r3, [r1, r3]
 8003dc0:	f003 031f 	and.w	r3, r3, #31
 8003dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc8:	4a09      	ldr	r2, [pc, #36]	@ (8003df0 <HAL_RCC_ClockConfig+0x1f8>)
 8003dca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003dcc:	4b09      	ldr	r3, [pc, #36]	@ (8003df4 <HAL_RCC_ClockConfig+0x1fc>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7fe fc4d 	bl	8002670 <HAL_InitTick>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	72fb      	strb	r3, [r7, #11]

  return status;
 8003dda:	7afb      	ldrb	r3, [r7, #11]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40022000 	.word	0x40022000
 8003de8:	40021000 	.word	0x40021000
 8003dec:	0800a098 	.word	0x0800a098
 8003df0:	20000008 	.word	0x20000008
 8003df4:	2000000c 	.word	0x2000000c

08003df8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b089      	sub	sp, #36	@ 0x24
 8003dfc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	61fb      	str	r3, [r7, #28]
 8003e02:	2300      	movs	r3, #0
 8003e04:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e06:	4b3e      	ldr	r3, [pc, #248]	@ (8003f00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 030c 	and.w	r3, r3, #12
 8003e0e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e10:	4b3b      	ldr	r3, [pc, #236]	@ (8003f00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	f003 0303 	and.w	r3, r3, #3
 8003e18:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d005      	beq.n	8003e2c <HAL_RCC_GetSysClockFreq+0x34>
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	2b0c      	cmp	r3, #12
 8003e24:	d121      	bne.n	8003e6a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d11e      	bne.n	8003e6a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e2c:	4b34      	ldr	r3, [pc, #208]	@ (8003f00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0308 	and.w	r3, r3, #8
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d107      	bne.n	8003e48 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e38:	4b31      	ldr	r3, [pc, #196]	@ (8003f00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e3e:	0a1b      	lsrs	r3, r3, #8
 8003e40:	f003 030f 	and.w	r3, r3, #15
 8003e44:	61fb      	str	r3, [r7, #28]
 8003e46:	e005      	b.n	8003e54 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e48:	4b2d      	ldr	r3, [pc, #180]	@ (8003f00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	091b      	lsrs	r3, r3, #4
 8003e4e:	f003 030f 	and.w	r3, r3, #15
 8003e52:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e54:	4a2b      	ldr	r2, [pc, #172]	@ (8003f04 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e5c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10d      	bne.n	8003e80 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e68:	e00a      	b.n	8003e80 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	2b04      	cmp	r3, #4
 8003e6e:	d102      	bne.n	8003e76 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e70:	4b25      	ldr	r3, [pc, #148]	@ (8003f08 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e72:	61bb      	str	r3, [r7, #24]
 8003e74:	e004      	b.n	8003e80 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	2b08      	cmp	r3, #8
 8003e7a:	d101      	bne.n	8003e80 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e7c:	4b23      	ldr	r3, [pc, #140]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x114>)
 8003e7e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	2b0c      	cmp	r3, #12
 8003e84:	d134      	bne.n	8003ef0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e86:	4b1e      	ldr	r3, [pc, #120]	@ (8003f00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d003      	beq.n	8003e9e <HAL_RCC_GetSysClockFreq+0xa6>
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	2b03      	cmp	r3, #3
 8003e9a:	d003      	beq.n	8003ea4 <HAL_RCC_GetSysClockFreq+0xac>
 8003e9c:	e005      	b.n	8003eaa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8003f08 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ea0:	617b      	str	r3, [r7, #20]
      break;
 8003ea2:	e005      	b.n	8003eb0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ea4:	4b19      	ldr	r3, [pc, #100]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x114>)
 8003ea6:	617b      	str	r3, [r7, #20]
      break;
 8003ea8:	e002      	b.n	8003eb0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	617b      	str	r3, [r7, #20]
      break;
 8003eae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003eb0:	4b13      	ldr	r3, [pc, #76]	@ (8003f00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	091b      	lsrs	r3, r3, #4
 8003eb6:	f003 0307 	and.w	r3, r3, #7
 8003eba:	3301      	adds	r3, #1
 8003ebc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ebe:	4b10      	ldr	r3, [pc, #64]	@ (8003f00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	0a1b      	lsrs	r3, r3, #8
 8003ec4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	fb03 f202 	mul.w	r2, r3, r2
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8003f00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	0e5b      	lsrs	r3, r3, #25
 8003edc:	f003 0303 	and.w	r3, r3, #3
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ef0:	69bb      	ldr	r3, [r7, #24]
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3724      	adds	r7, #36	@ 0x24
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	40021000 	.word	0x40021000
 8003f04:	0800a0b0 	.word	0x0800a0b0
 8003f08:	00f42400 	.word	0x00f42400
 8003f0c:	007a1200 	.word	0x007a1200

08003f10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f10:	b480      	push	{r7}
 8003f12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f14:	4b03      	ldr	r3, [pc, #12]	@ (8003f24 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f16:	681b      	ldr	r3, [r3, #0]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	20000008 	.word	0x20000008

08003f28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f2c:	f7ff fff0 	bl	8003f10 <HAL_RCC_GetHCLKFreq>
 8003f30:	4602      	mov	r2, r0
 8003f32:	4b06      	ldr	r3, [pc, #24]	@ (8003f4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	0a1b      	lsrs	r3, r3, #8
 8003f38:	f003 0307 	and.w	r3, r3, #7
 8003f3c:	4904      	ldr	r1, [pc, #16]	@ (8003f50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f3e:	5ccb      	ldrb	r3, [r1, r3]
 8003f40:	f003 031f 	and.w	r3, r3, #31
 8003f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	0800a0a8 	.word	0x0800a0a8

08003f54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f58:	f7ff ffda 	bl	8003f10 <HAL_RCC_GetHCLKFreq>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	4b06      	ldr	r3, [pc, #24]	@ (8003f78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	0adb      	lsrs	r3, r3, #11
 8003f64:	f003 0307 	and.w	r3, r3, #7
 8003f68:	4904      	ldr	r1, [pc, #16]	@ (8003f7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f6a:	5ccb      	ldrb	r3, [r1, r3]
 8003f6c:	f003 031f 	and.w	r3, r3, #31
 8003f70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	0800a0a8 	.word	0x0800a0a8

08003f80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f88:	2300      	movs	r3, #0
 8003f8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f8c:	4b2a      	ldr	r3, [pc, #168]	@ (8004038 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d003      	beq.n	8003fa0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f98:	f7ff f9ee 	bl	8003378 <HAL_PWREx_GetVoltageRange>
 8003f9c:	6178      	str	r0, [r7, #20]
 8003f9e:	e014      	b.n	8003fca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fa0:	4b25      	ldr	r3, [pc, #148]	@ (8004038 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fa4:	4a24      	ldr	r2, [pc, #144]	@ (8004038 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003faa:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fac:	4b22      	ldr	r3, [pc, #136]	@ (8004038 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fb4:	60fb      	str	r3, [r7, #12]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003fb8:	f7ff f9de 	bl	8003378 <HAL_PWREx_GetVoltageRange>
 8003fbc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003fbe:	4b1e      	ldr	r3, [pc, #120]	@ (8004038 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fc2:	4a1d      	ldr	r2, [pc, #116]	@ (8004038 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fc8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fd0:	d10b      	bne.n	8003fea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2b80      	cmp	r3, #128	@ 0x80
 8003fd6:	d919      	bls.n	800400c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2ba0      	cmp	r3, #160	@ 0xa0
 8003fdc:	d902      	bls.n	8003fe4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fde:	2302      	movs	r3, #2
 8003fe0:	613b      	str	r3, [r7, #16]
 8003fe2:	e013      	b.n	800400c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	613b      	str	r3, [r7, #16]
 8003fe8:	e010      	b.n	800400c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2b80      	cmp	r3, #128	@ 0x80
 8003fee:	d902      	bls.n	8003ff6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	613b      	str	r3, [r7, #16]
 8003ff4:	e00a      	b.n	800400c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2b80      	cmp	r3, #128	@ 0x80
 8003ffa:	d102      	bne.n	8004002 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	613b      	str	r3, [r7, #16]
 8004000:	e004      	b.n	800400c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b70      	cmp	r3, #112	@ 0x70
 8004006:	d101      	bne.n	800400c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004008:	2301      	movs	r3, #1
 800400a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800400c:	4b0b      	ldr	r3, [pc, #44]	@ (800403c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f023 0207 	bic.w	r2, r3, #7
 8004014:	4909      	ldr	r1, [pc, #36]	@ (800403c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	4313      	orrs	r3, r2
 800401a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800401c:	4b07      	ldr	r3, [pc, #28]	@ (800403c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	429a      	cmp	r2, r3
 8004028:	d001      	beq.n	800402e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e000      	b.n	8004030 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3718      	adds	r7, #24
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	40021000 	.word	0x40021000
 800403c:	40022000 	.word	0x40022000

08004040 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004048:	2300      	movs	r3, #0
 800404a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800404c:	2300      	movs	r3, #0
 800404e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004058:	2b00      	cmp	r3, #0
 800405a:	d041      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004060:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004064:	d02a      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004066:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800406a:	d824      	bhi.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800406c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004070:	d008      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004072:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004076:	d81e      	bhi.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00a      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800407c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004080:	d010      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004082:	e018      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004084:	4b86      	ldr	r3, [pc, #536]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	4a85      	ldr	r2, [pc, #532]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800408a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800408e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004090:	e015      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	3304      	adds	r3, #4
 8004096:	2100      	movs	r1, #0
 8004098:	4618      	mov	r0, r3
 800409a:	f000 fabb 	bl	8004614 <RCCEx_PLLSAI1_Config>
 800409e:	4603      	mov	r3, r0
 80040a0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040a2:	e00c      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	3320      	adds	r3, #32
 80040a8:	2100      	movs	r1, #0
 80040aa:	4618      	mov	r0, r3
 80040ac:	f000 fba6 	bl	80047fc <RCCEx_PLLSAI2_Config>
 80040b0:	4603      	mov	r3, r0
 80040b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040b4:	e003      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	74fb      	strb	r3, [r7, #19]
      break;
 80040ba:	e000      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80040bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040be:	7cfb      	ldrb	r3, [r7, #19]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10b      	bne.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040c4:	4b76      	ldr	r3, [pc, #472]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ca:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040d2:	4973      	ldr	r1, [pc, #460]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80040da:	e001      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040dc:	7cfb      	ldrb	r3, [r7, #19]
 80040de:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d041      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040f0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80040f4:	d02a      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80040f6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80040fa:	d824      	bhi.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80040fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004100:	d008      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004102:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004106:	d81e      	bhi.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00a      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800410c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004110:	d010      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004112:	e018      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004114:	4b62      	ldr	r3, [pc, #392]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	4a61      	ldr	r2, [pc, #388]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800411a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800411e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004120:	e015      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	3304      	adds	r3, #4
 8004126:	2100      	movs	r1, #0
 8004128:	4618      	mov	r0, r3
 800412a:	f000 fa73 	bl	8004614 <RCCEx_PLLSAI1_Config>
 800412e:	4603      	mov	r3, r0
 8004130:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004132:	e00c      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	3320      	adds	r3, #32
 8004138:	2100      	movs	r1, #0
 800413a:	4618      	mov	r0, r3
 800413c:	f000 fb5e 	bl	80047fc <RCCEx_PLLSAI2_Config>
 8004140:	4603      	mov	r3, r0
 8004142:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004144:	e003      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	74fb      	strb	r3, [r7, #19]
      break;
 800414a:	e000      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800414c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800414e:	7cfb      	ldrb	r3, [r7, #19]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10b      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004154:	4b52      	ldr	r3, [pc, #328]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800415a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004162:	494f      	ldr	r1, [pc, #316]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004164:	4313      	orrs	r3, r2
 8004166:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800416a:	e001      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800416c:	7cfb      	ldrb	r3, [r7, #19]
 800416e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 80a0 	beq.w	80042be <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800417e:	2300      	movs	r3, #0
 8004180:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004182:	4b47      	ldr	r3, [pc, #284]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004186:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800418e:	2301      	movs	r3, #1
 8004190:	e000      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004192:	2300      	movs	r3, #0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00d      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004198:	4b41      	ldr	r3, [pc, #260]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800419a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800419c:	4a40      	ldr	r2, [pc, #256]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800419e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80041a4:	4b3e      	ldr	r3, [pc, #248]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041ac:	60bb      	str	r3, [r7, #8]
 80041ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041b0:	2301      	movs	r3, #1
 80041b2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041b4:	4b3b      	ldr	r3, [pc, #236]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a3a      	ldr	r2, [pc, #232]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80041ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041c0:	f7fe faa6 	bl	8002710 <HAL_GetTick>
 80041c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041c6:	e009      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041c8:	f7fe faa2 	bl	8002710 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d902      	bls.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	74fb      	strb	r3, [r7, #19]
        break;
 80041da:	e005      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041dc:	4b31      	ldr	r3, [pc, #196]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d0ef      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80041e8:	7cfb      	ldrb	r3, [r7, #19]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d15c      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041ee:	4b2c      	ldr	r3, [pc, #176]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d01f      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	429a      	cmp	r2, r3
 800420a:	d019      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800420c:	4b24      	ldr	r3, [pc, #144]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800420e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004212:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004216:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004218:	4b21      	ldr	r3, [pc, #132]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800421a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800421e:	4a20      	ldr	r2, [pc, #128]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004220:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004224:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004228:	4b1d      	ldr	r3, [pc, #116]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800422a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800422e:	4a1c      	ldr	r2, [pc, #112]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004230:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004234:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004238:	4a19      	ldr	r2, [pc, #100]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b00      	cmp	r3, #0
 8004248:	d016      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424a:	f7fe fa61 	bl	8002710 <HAL_GetTick>
 800424e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004250:	e00b      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004252:	f7fe fa5d 	bl	8002710 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004260:	4293      	cmp	r3, r2
 8004262:	d902      	bls.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	74fb      	strb	r3, [r7, #19]
            break;
 8004268:	e006      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800426a:	4b0d      	ldr	r3, [pc, #52]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800426c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d0ec      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004278:	7cfb      	ldrb	r3, [r7, #19]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10c      	bne.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800427e:	4b08      	ldr	r3, [pc, #32]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004280:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004284:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800428e:	4904      	ldr	r1, [pc, #16]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004290:	4313      	orrs	r3, r2
 8004292:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004296:	e009      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004298:	7cfb      	ldrb	r3, [r7, #19]
 800429a:	74bb      	strb	r3, [r7, #18]
 800429c:	e006      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800429e:	bf00      	nop
 80042a0:	40021000 	.word	0x40021000
 80042a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a8:	7cfb      	ldrb	r3, [r7, #19]
 80042aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042ac:	7c7b      	ldrb	r3, [r7, #17]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d105      	bne.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042b2:	4b9e      	ldr	r3, [pc, #632]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042b6:	4a9d      	ldr	r2, [pc, #628]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042bc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00a      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042ca:	4b98      	ldr	r3, [pc, #608]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042d0:	f023 0203 	bic.w	r2, r3, #3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042d8:	4994      	ldr	r1, [pc, #592]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00a      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042ec:	4b8f      	ldr	r3, [pc, #572]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042f2:	f023 020c 	bic.w	r2, r3, #12
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042fa:	498c      	ldr	r1, [pc, #560]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0304 	and.w	r3, r3, #4
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00a      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800430e:	4b87      	ldr	r3, [pc, #540]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004310:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004314:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431c:	4983      	ldr	r1, [pc, #524]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800431e:	4313      	orrs	r3, r2
 8004320:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0308 	and.w	r3, r3, #8
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00a      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004330:	4b7e      	ldr	r3, [pc, #504]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004336:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800433e:	497b      	ldr	r1, [pc, #492]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004340:	4313      	orrs	r3, r2
 8004342:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0310 	and.w	r3, r3, #16
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00a      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004352:	4b76      	ldr	r3, [pc, #472]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004354:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004358:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004360:	4972      	ldr	r1, [pc, #456]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004362:	4313      	orrs	r3, r2
 8004364:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0320 	and.w	r3, r3, #32
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00a      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004374:	4b6d      	ldr	r3, [pc, #436]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800437a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004382:	496a      	ldr	r1, [pc, #424]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004384:	4313      	orrs	r3, r2
 8004386:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00a      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004396:	4b65      	ldr	r3, [pc, #404]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800439c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043a4:	4961      	ldr	r1, [pc, #388]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00a      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043b8:	4b5c      	ldr	r3, [pc, #368]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043c6:	4959      	ldr	r1, [pc, #356]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00a      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043da:	4b54      	ldr	r3, [pc, #336]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043e0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043e8:	4950      	ldr	r1, [pc, #320]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00a      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043fc:	4b4b      	ldr	r3, [pc, #300]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004402:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800440a:	4948      	ldr	r1, [pc, #288]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800440c:	4313      	orrs	r3, r2
 800440e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00a      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800441e:	4b43      	ldr	r3, [pc, #268]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004420:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004424:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800442c:	493f      	ldr	r1, [pc, #252]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800442e:	4313      	orrs	r3, r2
 8004430:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d028      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004440:	4b3a      	ldr	r3, [pc, #232]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004446:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800444e:	4937      	ldr	r1, [pc, #220]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004450:	4313      	orrs	r3, r2
 8004452:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800445a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800445e:	d106      	bne.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004460:	4b32      	ldr	r3, [pc, #200]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	4a31      	ldr	r2, [pc, #196]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004466:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800446a:	60d3      	str	r3, [r2, #12]
 800446c:	e011      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004472:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004476:	d10c      	bne.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	3304      	adds	r3, #4
 800447c:	2101      	movs	r1, #1
 800447e:	4618      	mov	r0, r3
 8004480:	f000 f8c8 	bl	8004614 <RCCEx_PLLSAI1_Config>
 8004484:	4603      	mov	r3, r0
 8004486:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004488:	7cfb      	ldrb	r3, [r7, #19]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800448e:	7cfb      	ldrb	r3, [r7, #19]
 8004490:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d028      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800449e:	4b23      	ldr	r3, [pc, #140]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044a4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ac:	491f      	ldr	r1, [pc, #124]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044bc:	d106      	bne.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044be:	4b1b      	ldr	r3, [pc, #108]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	4a1a      	ldr	r2, [pc, #104]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044c8:	60d3      	str	r3, [r2, #12]
 80044ca:	e011      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80044d4:	d10c      	bne.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	3304      	adds	r3, #4
 80044da:	2101      	movs	r1, #1
 80044dc:	4618      	mov	r0, r3
 80044de:	f000 f899 	bl	8004614 <RCCEx_PLLSAI1_Config>
 80044e2:	4603      	mov	r3, r0
 80044e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044e6:	7cfb      	ldrb	r3, [r7, #19]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d001      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80044ec:	7cfb      	ldrb	r3, [r7, #19]
 80044ee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d02b      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044fc:	4b0b      	ldr	r3, [pc, #44]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004502:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800450a:	4908      	ldr	r1, [pc, #32]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800450c:	4313      	orrs	r3, r2
 800450e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004516:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800451a:	d109      	bne.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800451c:	4b03      	ldr	r3, [pc, #12]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	4a02      	ldr	r2, [pc, #8]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004522:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004526:	60d3      	str	r3, [r2, #12]
 8004528:	e014      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800452a:	bf00      	nop
 800452c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004534:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004538:	d10c      	bne.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	3304      	adds	r3, #4
 800453e:	2101      	movs	r1, #1
 8004540:	4618      	mov	r0, r3
 8004542:	f000 f867 	bl	8004614 <RCCEx_PLLSAI1_Config>
 8004546:	4603      	mov	r3, r0
 8004548:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800454a:	7cfb      	ldrb	r3, [r7, #19]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004550:	7cfb      	ldrb	r3, [r7, #19]
 8004552:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d02f      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004560:	4b2b      	ldr	r3, [pc, #172]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004566:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800456e:	4928      	ldr	r1, [pc, #160]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004570:	4313      	orrs	r3, r2
 8004572:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800457a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800457e:	d10d      	bne.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	3304      	adds	r3, #4
 8004584:	2102      	movs	r1, #2
 8004586:	4618      	mov	r0, r3
 8004588:	f000 f844 	bl	8004614 <RCCEx_PLLSAI1_Config>
 800458c:	4603      	mov	r3, r0
 800458e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004590:	7cfb      	ldrb	r3, [r7, #19]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d014      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004596:	7cfb      	ldrb	r3, [r7, #19]
 8004598:	74bb      	strb	r3, [r7, #18]
 800459a:	e011      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045a4:	d10c      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	3320      	adds	r3, #32
 80045aa:	2102      	movs	r1, #2
 80045ac:	4618      	mov	r0, r3
 80045ae:	f000 f925 	bl	80047fc <RCCEx_PLLSAI2_Config>
 80045b2:	4603      	mov	r3, r0
 80045b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045b6:	7cfb      	ldrb	r3, [r7, #19]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d001      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80045bc:	7cfb      	ldrb	r3, [r7, #19]
 80045be:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00a      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80045cc:	4b10      	ldr	r3, [pc, #64]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045d2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045da:	490d      	ldr	r1, [pc, #52]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00b      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045ee:	4b08      	ldr	r3, [pc, #32]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045f4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045fe:	4904      	ldr	r1, [pc, #16]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004600:	4313      	orrs	r3, r2
 8004602:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004606:	7cbb      	ldrb	r3, [r7, #18]
}
 8004608:	4618      	mov	r0, r3
 800460a:	3718      	adds	r7, #24
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	40021000 	.word	0x40021000

08004614 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800461e:	2300      	movs	r3, #0
 8004620:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004622:	4b75      	ldr	r3, [pc, #468]	@ (80047f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	f003 0303 	and.w	r3, r3, #3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d018      	beq.n	8004660 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800462e:	4b72      	ldr	r3, [pc, #456]	@ (80047f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f003 0203 	and.w	r2, r3, #3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	429a      	cmp	r2, r3
 800463c:	d10d      	bne.n	800465a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
       ||
 8004642:	2b00      	cmp	r3, #0
 8004644:	d009      	beq.n	800465a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004646:	4b6c      	ldr	r3, [pc, #432]	@ (80047f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	091b      	lsrs	r3, r3, #4
 800464c:	f003 0307 	and.w	r3, r3, #7
 8004650:	1c5a      	adds	r2, r3, #1
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
       ||
 8004656:	429a      	cmp	r2, r3
 8004658:	d047      	beq.n	80046ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	73fb      	strb	r3, [r7, #15]
 800465e:	e044      	b.n	80046ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2b03      	cmp	r3, #3
 8004666:	d018      	beq.n	800469a <RCCEx_PLLSAI1_Config+0x86>
 8004668:	2b03      	cmp	r3, #3
 800466a:	d825      	bhi.n	80046b8 <RCCEx_PLLSAI1_Config+0xa4>
 800466c:	2b01      	cmp	r3, #1
 800466e:	d002      	beq.n	8004676 <RCCEx_PLLSAI1_Config+0x62>
 8004670:	2b02      	cmp	r3, #2
 8004672:	d009      	beq.n	8004688 <RCCEx_PLLSAI1_Config+0x74>
 8004674:	e020      	b.n	80046b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004676:	4b60      	ldr	r3, [pc, #384]	@ (80047f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d11d      	bne.n	80046be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004686:	e01a      	b.n	80046be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004688:	4b5b      	ldr	r3, [pc, #364]	@ (80047f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004690:	2b00      	cmp	r3, #0
 8004692:	d116      	bne.n	80046c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004698:	e013      	b.n	80046c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800469a:	4b57      	ldr	r3, [pc, #348]	@ (80047f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10f      	bne.n	80046c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046a6:	4b54      	ldr	r3, [pc, #336]	@ (80047f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d109      	bne.n	80046c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046b6:	e006      	b.n	80046c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	73fb      	strb	r3, [r7, #15]
      break;
 80046bc:	e004      	b.n	80046c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046be:	bf00      	nop
 80046c0:	e002      	b.n	80046c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046c2:	bf00      	nop
 80046c4:	e000      	b.n	80046c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10d      	bne.n	80046ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80046ce:	4b4a      	ldr	r3, [pc, #296]	@ (80047f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6819      	ldr	r1, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	3b01      	subs	r3, #1
 80046e0:	011b      	lsls	r3, r3, #4
 80046e2:	430b      	orrs	r3, r1
 80046e4:	4944      	ldr	r1, [pc, #272]	@ (80047f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80046ea:	7bfb      	ldrb	r3, [r7, #15]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d17d      	bne.n	80047ec <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80046f0:	4b41      	ldr	r3, [pc, #260]	@ (80047f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a40      	ldr	r2, [pc, #256]	@ (80047f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80046fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046fc:	f7fe f808 	bl	8002710 <HAL_GetTick>
 8004700:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004702:	e009      	b.n	8004718 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004704:	f7fe f804 	bl	8002710 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d902      	bls.n	8004718 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	73fb      	strb	r3, [r7, #15]
        break;
 8004716:	e005      	b.n	8004724 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004718:	4b37      	ldr	r3, [pc, #220]	@ (80047f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1ef      	bne.n	8004704 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004724:	7bfb      	ldrb	r3, [r7, #15]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d160      	bne.n	80047ec <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d111      	bne.n	8004754 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004730:	4b31      	ldr	r3, [pc, #196]	@ (80047f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004738:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	6892      	ldr	r2, [r2, #8]
 8004740:	0211      	lsls	r1, r2, #8
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	68d2      	ldr	r2, [r2, #12]
 8004746:	0912      	lsrs	r2, r2, #4
 8004748:	0452      	lsls	r2, r2, #17
 800474a:	430a      	orrs	r2, r1
 800474c:	492a      	ldr	r1, [pc, #168]	@ (80047f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800474e:	4313      	orrs	r3, r2
 8004750:	610b      	str	r3, [r1, #16]
 8004752:	e027      	b.n	80047a4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d112      	bne.n	8004780 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800475a:	4b27      	ldr	r3, [pc, #156]	@ (80047f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004762:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	6892      	ldr	r2, [r2, #8]
 800476a:	0211      	lsls	r1, r2, #8
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6912      	ldr	r2, [r2, #16]
 8004770:	0852      	lsrs	r2, r2, #1
 8004772:	3a01      	subs	r2, #1
 8004774:	0552      	lsls	r2, r2, #21
 8004776:	430a      	orrs	r2, r1
 8004778:	491f      	ldr	r1, [pc, #124]	@ (80047f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800477a:	4313      	orrs	r3, r2
 800477c:	610b      	str	r3, [r1, #16]
 800477e:	e011      	b.n	80047a4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004780:	4b1d      	ldr	r3, [pc, #116]	@ (80047f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004788:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6892      	ldr	r2, [r2, #8]
 8004790:	0211      	lsls	r1, r2, #8
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	6952      	ldr	r2, [r2, #20]
 8004796:	0852      	lsrs	r2, r2, #1
 8004798:	3a01      	subs	r2, #1
 800479a:	0652      	lsls	r2, r2, #25
 800479c:	430a      	orrs	r2, r1
 800479e:	4916      	ldr	r1, [pc, #88]	@ (80047f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80047a4:	4b14      	ldr	r3, [pc, #80]	@ (80047f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a13      	ldr	r2, [pc, #76]	@ (80047f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047aa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80047ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b0:	f7fd ffae 	bl	8002710 <HAL_GetTick>
 80047b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047b6:	e009      	b.n	80047cc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047b8:	f7fd ffaa 	bl	8002710 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d902      	bls.n	80047cc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	73fb      	strb	r3, [r7, #15]
          break;
 80047ca:	e005      	b.n	80047d8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047cc:	4b0a      	ldr	r3, [pc, #40]	@ (80047f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d0ef      	beq.n	80047b8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80047d8:	7bfb      	ldrb	r3, [r7, #15]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d106      	bne.n	80047ec <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80047de:	4b06      	ldr	r3, [pc, #24]	@ (80047f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047e0:	691a      	ldr	r2, [r3, #16]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	4904      	ldr	r1, [pc, #16]	@ (80047f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80047ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	40021000 	.word	0x40021000

080047fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004806:	2300      	movs	r3, #0
 8004808:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800480a:	4b6a      	ldr	r3, [pc, #424]	@ (80049b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	f003 0303 	and.w	r3, r3, #3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d018      	beq.n	8004848 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004816:	4b67      	ldr	r3, [pc, #412]	@ (80049b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	f003 0203 	and.w	r2, r3, #3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	429a      	cmp	r2, r3
 8004824:	d10d      	bne.n	8004842 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
       ||
 800482a:	2b00      	cmp	r3, #0
 800482c:	d009      	beq.n	8004842 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800482e:	4b61      	ldr	r3, [pc, #388]	@ (80049b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	091b      	lsrs	r3, r3, #4
 8004834:	f003 0307 	and.w	r3, r3, #7
 8004838:	1c5a      	adds	r2, r3, #1
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
       ||
 800483e:	429a      	cmp	r2, r3
 8004840:	d047      	beq.n	80048d2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	73fb      	strb	r3, [r7, #15]
 8004846:	e044      	b.n	80048d2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2b03      	cmp	r3, #3
 800484e:	d018      	beq.n	8004882 <RCCEx_PLLSAI2_Config+0x86>
 8004850:	2b03      	cmp	r3, #3
 8004852:	d825      	bhi.n	80048a0 <RCCEx_PLLSAI2_Config+0xa4>
 8004854:	2b01      	cmp	r3, #1
 8004856:	d002      	beq.n	800485e <RCCEx_PLLSAI2_Config+0x62>
 8004858:	2b02      	cmp	r3, #2
 800485a:	d009      	beq.n	8004870 <RCCEx_PLLSAI2_Config+0x74>
 800485c:	e020      	b.n	80048a0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800485e:	4b55      	ldr	r3, [pc, #340]	@ (80049b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d11d      	bne.n	80048a6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800486e:	e01a      	b.n	80048a6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004870:	4b50      	ldr	r3, [pc, #320]	@ (80049b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004878:	2b00      	cmp	r3, #0
 800487a:	d116      	bne.n	80048aa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004880:	e013      	b.n	80048aa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004882:	4b4c      	ldr	r3, [pc, #304]	@ (80049b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10f      	bne.n	80048ae <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800488e:	4b49      	ldr	r3, [pc, #292]	@ (80049b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d109      	bne.n	80048ae <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800489e:	e006      	b.n	80048ae <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	73fb      	strb	r3, [r7, #15]
      break;
 80048a4:	e004      	b.n	80048b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80048a6:	bf00      	nop
 80048a8:	e002      	b.n	80048b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80048aa:	bf00      	nop
 80048ac:	e000      	b.n	80048b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80048ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80048b0:	7bfb      	ldrb	r3, [r7, #15]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10d      	bne.n	80048d2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80048b6:	4b3f      	ldr	r3, [pc, #252]	@ (80049b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6819      	ldr	r1, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	3b01      	subs	r3, #1
 80048c8:	011b      	lsls	r3, r3, #4
 80048ca:	430b      	orrs	r3, r1
 80048cc:	4939      	ldr	r1, [pc, #228]	@ (80049b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048d2:	7bfb      	ldrb	r3, [r7, #15]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d167      	bne.n	80049a8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80048d8:	4b36      	ldr	r3, [pc, #216]	@ (80049b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a35      	ldr	r2, [pc, #212]	@ (80049b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048e4:	f7fd ff14 	bl	8002710 <HAL_GetTick>
 80048e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048ea:	e009      	b.n	8004900 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80048ec:	f7fd ff10 	bl	8002710 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d902      	bls.n	8004900 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	73fb      	strb	r3, [r7, #15]
        break;
 80048fe:	e005      	b.n	800490c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004900:	4b2c      	ldr	r3, [pc, #176]	@ (80049b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1ef      	bne.n	80048ec <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800490c:	7bfb      	ldrb	r3, [r7, #15]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d14a      	bne.n	80049a8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d111      	bne.n	800493c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004918:	4b26      	ldr	r3, [pc, #152]	@ (80049b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800491a:	695b      	ldr	r3, [r3, #20]
 800491c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004920:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	6892      	ldr	r2, [r2, #8]
 8004928:	0211      	lsls	r1, r2, #8
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	68d2      	ldr	r2, [r2, #12]
 800492e:	0912      	lsrs	r2, r2, #4
 8004930:	0452      	lsls	r2, r2, #17
 8004932:	430a      	orrs	r2, r1
 8004934:	491f      	ldr	r1, [pc, #124]	@ (80049b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004936:	4313      	orrs	r3, r2
 8004938:	614b      	str	r3, [r1, #20]
 800493a:	e011      	b.n	8004960 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800493c:	4b1d      	ldr	r3, [pc, #116]	@ (80049b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004944:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	6892      	ldr	r2, [r2, #8]
 800494c:	0211      	lsls	r1, r2, #8
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	6912      	ldr	r2, [r2, #16]
 8004952:	0852      	lsrs	r2, r2, #1
 8004954:	3a01      	subs	r2, #1
 8004956:	0652      	lsls	r2, r2, #25
 8004958:	430a      	orrs	r2, r1
 800495a:	4916      	ldr	r1, [pc, #88]	@ (80049b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800495c:	4313      	orrs	r3, r2
 800495e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004960:	4b14      	ldr	r3, [pc, #80]	@ (80049b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a13      	ldr	r2, [pc, #76]	@ (80049b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004966:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800496a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800496c:	f7fd fed0 	bl	8002710 <HAL_GetTick>
 8004970:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004972:	e009      	b.n	8004988 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004974:	f7fd fecc 	bl	8002710 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d902      	bls.n	8004988 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	73fb      	strb	r3, [r7, #15]
          break;
 8004986:	e005      	b.n	8004994 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004988:	4b0a      	ldr	r3, [pc, #40]	@ (80049b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d0ef      	beq.n	8004974 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004994:	7bfb      	ldrb	r3, [r7, #15]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d106      	bne.n	80049a8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800499a:	4b06      	ldr	r3, [pc, #24]	@ (80049b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800499c:	695a      	ldr	r2, [r3, #20]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	4904      	ldr	r1, [pc, #16]	@ (80049b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80049a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	40021000 	.word	0x40021000

080049b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e095      	b.n	8004af6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d108      	bne.n	80049e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049da:	d009      	beq.n	80049f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	61da      	str	r2, [r3, #28]
 80049e2:	e005      	b.n	80049f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d106      	bne.n	8004a10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f7fd faf4 	bl	8001ff8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2202      	movs	r2, #2
 8004a14:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a26:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a30:	d902      	bls.n	8004a38 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a32:	2300      	movs	r3, #0
 8004a34:	60fb      	str	r3, [r7, #12]
 8004a36:	e002      	b.n	8004a3e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004a38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a3c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004a46:	d007      	beq.n	8004a58 <HAL_SPI_Init+0xa0>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a50:	d002      	beq.n	8004a58 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004a68:	431a      	orrs	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	431a      	orrs	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	f003 0301 	and.w	r3, r3, #1
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a86:	431a      	orrs	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	69db      	ldr	r3, [r3, #28]
 8004a8c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a90:	431a      	orrs	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a9a:	ea42 0103 	orr.w	r1, r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aa2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	0c1b      	lsrs	r3, r3, #16
 8004ab4:	f003 0204 	and.w	r2, r3, #4
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004abc:	f003 0310 	and.w	r3, r3, #16
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ac6:	f003 0308 	and.w	r3, r3, #8
 8004aca:	431a      	orrs	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004ad4:	ea42 0103 	orr.w	r1, r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b088      	sub	sp, #32
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	60f8      	str	r0, [r7, #12]
 8004b06:	60b9      	str	r1, [r7, #8]
 8004b08:	603b      	str	r3, [r7, #0]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b0e:	f7fd fdff 	bl	8002710 <HAL_GetTick>
 8004b12:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004b14:	88fb      	ldrh	r3, [r7, #6]
 8004b16:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d001      	beq.n	8004b28 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004b24:	2302      	movs	r3, #2
 8004b26:	e15c      	b.n	8004de2 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d002      	beq.n	8004b34 <HAL_SPI_Transmit+0x36>
 8004b2e:	88fb      	ldrh	r3, [r7, #6]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e154      	b.n	8004de2 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d101      	bne.n	8004b46 <HAL_SPI_Transmit+0x48>
 8004b42:	2302      	movs	r3, #2
 8004b44:	e14d      	b.n	8004de2 <HAL_SPI_Transmit+0x2e4>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2203      	movs	r2, #3
 8004b52:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	88fa      	ldrh	r2, [r7, #6]
 8004b66:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	88fa      	ldrh	r2, [r7, #6]
 8004b6c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b98:	d10f      	bne.n	8004bba <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ba8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004bb8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bc4:	2b40      	cmp	r3, #64	@ 0x40
 8004bc6:	d007      	beq.n	8004bd8 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004bd6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004be0:	d952      	bls.n	8004c88 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d002      	beq.n	8004bf0 <HAL_SPI_Transmit+0xf2>
 8004bea:	8b7b      	ldrh	r3, [r7, #26]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d145      	bne.n	8004c7c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bf4:	881a      	ldrh	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c00:	1c9a      	adds	r2, r3, #2
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c14:	e032      	b.n	8004c7c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d112      	bne.n	8004c4a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c28:	881a      	ldrh	r2, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c34:	1c9a      	adds	r2, r3, #2
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	3b01      	subs	r3, #1
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004c48:	e018      	b.n	8004c7c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c4a:	f7fd fd61 	bl	8002710 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	683a      	ldr	r2, [r7, #0]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d803      	bhi.n	8004c62 <HAL_SPI_Transmit+0x164>
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c60:	d102      	bne.n	8004c68 <HAL_SPI_Transmit+0x16a>
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d109      	bne.n	8004c7c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e0b2      	b.n	8004de2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1c7      	bne.n	8004c16 <HAL_SPI_Transmit+0x118>
 8004c86:	e083      	b.n	8004d90 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d002      	beq.n	8004c96 <HAL_SPI_Transmit+0x198>
 8004c90:	8b7b      	ldrh	r3, [r7, #26]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d177      	bne.n	8004d86 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d912      	bls.n	8004cc6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ca4:	881a      	ldrh	r2, [r3, #0]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb0:	1c9a      	adds	r2, r3, #2
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	3b02      	subs	r3, #2
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004cc4:	e05f      	b.n	8004d86 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	330c      	adds	r3, #12
 8004cd0:	7812      	ldrb	r2, [r2, #0]
 8004cd2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004cec:	e04b      	b.n	8004d86 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d12b      	bne.n	8004d54 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d912      	bls.n	8004d2c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d0a:	881a      	ldrh	r2, [r3, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d16:	1c9a      	adds	r2, r3, #2
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	3b02      	subs	r3, #2
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004d2a:	e02c      	b.n	8004d86 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	330c      	adds	r3, #12
 8004d36:	7812      	ldrb	r2, [r2, #0]
 8004d38:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d3e:	1c5a      	adds	r2, r3, #1
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004d52:	e018      	b.n	8004d86 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d54:	f7fd fcdc 	bl	8002710 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d803      	bhi.n	8004d6c <HAL_SPI_Transmit+0x26e>
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6a:	d102      	bne.n	8004d72 <HAL_SPI_Transmit+0x274>
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d109      	bne.n	8004d86 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e02d      	b.n	8004de2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1ae      	bne.n	8004cee <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d90:	69fa      	ldr	r2, [r7, #28]
 8004d92:	6839      	ldr	r1, [r7, #0]
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f000 f947 	bl	8005028 <SPI_EndRxTxTransaction>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d002      	beq.n	8004da6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2220      	movs	r2, #32
 8004da4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10a      	bne.n	8004dc4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dae:	2300      	movs	r3, #0
 8004db0:	617b      	str	r3, [r7, #20]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	617b      	str	r3, [r7, #20]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	617b      	str	r3, [r7, #20]
 8004dc2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d001      	beq.n	8004de0 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e000      	b.n	8004de2 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004de0:	2300      	movs	r3, #0
  }
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3720      	adds	r7, #32
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
	...

08004dec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b088      	sub	sp, #32
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	603b      	str	r3, [r7, #0]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004dfc:	f7fd fc88 	bl	8002710 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e04:	1a9b      	subs	r3, r3, r2
 8004e06:	683a      	ldr	r2, [r7, #0]
 8004e08:	4413      	add	r3, r2
 8004e0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e0c:	f7fd fc80 	bl	8002710 <HAL_GetTick>
 8004e10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e12:	4b39      	ldr	r3, [pc, #228]	@ (8004ef8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	015b      	lsls	r3, r3, #5
 8004e18:	0d1b      	lsrs	r3, r3, #20
 8004e1a:	69fa      	ldr	r2, [r7, #28]
 8004e1c:	fb02 f303 	mul.w	r3, r2, r3
 8004e20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e22:	e054      	b.n	8004ece <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e2a:	d050      	beq.n	8004ece <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e2c:	f7fd fc70 	bl	8002710 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	69fa      	ldr	r2, [r7, #28]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d902      	bls.n	8004e42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d13d      	bne.n	8004ebe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004e50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e5a:	d111      	bne.n	8004e80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e64:	d004      	beq.n	8004e70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e6e:	d107      	bne.n	8004e80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e88:	d10f      	bne.n	8004eaa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ea8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e017      	b.n	8004eee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d101      	bne.n	8004ec8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689a      	ldr	r2, [r3, #8]
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	bf0c      	ite	eq
 8004ede:	2301      	moveq	r3, #1
 8004ee0:	2300      	movne	r3, #0
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	79fb      	ldrb	r3, [r7, #7]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d19b      	bne.n	8004e24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3720      	adds	r7, #32
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	20000008 	.word	0x20000008

08004efc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b08a      	sub	sp, #40	@ 0x28
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
 8004f08:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004f0e:	f7fd fbff 	bl	8002710 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f16:	1a9b      	subs	r3, r3, r2
 8004f18:	683a      	ldr	r2, [r7, #0]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004f1e:	f7fd fbf7 	bl	8002710 <HAL_GetTick>
 8004f22:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	330c      	adds	r3, #12
 8004f2a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004f2c:	4b3d      	ldr	r3, [pc, #244]	@ (8005024 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	4613      	mov	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	00da      	lsls	r2, r3, #3
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	0d1b      	lsrs	r3, r3, #20
 8004f3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f3e:	fb02 f303 	mul.w	r3, r2, r3
 8004f42:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004f44:	e060      	b.n	8005008 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004f4c:	d107      	bne.n	8004f5e <SPI_WaitFifoStateUntilTimeout+0x62>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d104      	bne.n	8004f5e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004f5c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f64:	d050      	beq.n	8005008 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f66:	f7fd fbd3 	bl	8002710 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	6a3b      	ldr	r3, [r7, #32]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d902      	bls.n	8004f7c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d13d      	bne.n	8004ff8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004f8a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f94:	d111      	bne.n	8004fba <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f9e:	d004      	beq.n	8004faa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fa8:	d107      	bne.n	8004fba <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fb8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fc2:	d10f      	bne.n	8004fe4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004fd2:	601a      	str	r2, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004fe2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e010      	b.n	800501a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004ffe:	2300      	movs	r3, #0
 8005000:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	3b01      	subs	r3, #1
 8005006:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	689a      	ldr	r2, [r3, #8]
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	4013      	ands	r3, r2
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	429a      	cmp	r2, r3
 8005016:	d196      	bne.n	8004f46 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3728      	adds	r7, #40	@ 0x28
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	20000008 	.word	0x20000008

08005028 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b086      	sub	sp, #24
 800502c:	af02      	add	r7, sp, #8
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	9300      	str	r3, [sp, #0]
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	2200      	movs	r2, #0
 800503c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005040:	68f8      	ldr	r0, [r7, #12]
 8005042:	f7ff ff5b 	bl	8004efc <SPI_WaitFifoStateUntilTimeout>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d007      	beq.n	800505c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005050:	f043 0220 	orr.w	r2, r3, #32
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e027      	b.n	80050ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	2200      	movs	r2, #0
 8005064:	2180      	movs	r1, #128	@ 0x80
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f7ff fec0 	bl	8004dec <SPI_WaitFlagStateUntilTimeout>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d007      	beq.n	8005082 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005076:	f043 0220 	orr.w	r2, r3, #32
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e014      	b.n	80050ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	9300      	str	r3, [sp, #0]
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	2200      	movs	r2, #0
 800508a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f7ff ff34 	bl	8004efc <SPI_WaitFifoStateUntilTimeout>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d007      	beq.n	80050aa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800509e:	f043 0220 	orr.w	r2, r3, #32
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e000      	b.n	80050ac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3710      	adds	r7, #16
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e049      	b.n	800515a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d106      	bne.n	80050e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7fd f928 	bl	8002330 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2202      	movs	r2, #2
 80050e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	3304      	adds	r3, #4
 80050f0:	4619      	mov	r1, r3
 80050f2:	4610      	mov	r0, r2
 80050f4:	f000 f836 	bl	8005164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3708      	adds	r7, #8
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
	...

08005164 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a46      	ldr	r2, [pc, #280]	@ (8005290 <TIM_Base_SetConfig+0x12c>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d013      	beq.n	80051a4 <TIM_Base_SetConfig+0x40>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005182:	d00f      	beq.n	80051a4 <TIM_Base_SetConfig+0x40>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a43      	ldr	r2, [pc, #268]	@ (8005294 <TIM_Base_SetConfig+0x130>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d00b      	beq.n	80051a4 <TIM_Base_SetConfig+0x40>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a42      	ldr	r2, [pc, #264]	@ (8005298 <TIM_Base_SetConfig+0x134>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d007      	beq.n	80051a4 <TIM_Base_SetConfig+0x40>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a41      	ldr	r2, [pc, #260]	@ (800529c <TIM_Base_SetConfig+0x138>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d003      	beq.n	80051a4 <TIM_Base_SetConfig+0x40>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a40      	ldr	r2, [pc, #256]	@ (80052a0 <TIM_Base_SetConfig+0x13c>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d108      	bne.n	80051b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a35      	ldr	r2, [pc, #212]	@ (8005290 <TIM_Base_SetConfig+0x12c>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d01f      	beq.n	80051fe <TIM_Base_SetConfig+0x9a>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051c4:	d01b      	beq.n	80051fe <TIM_Base_SetConfig+0x9a>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a32      	ldr	r2, [pc, #200]	@ (8005294 <TIM_Base_SetConfig+0x130>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d017      	beq.n	80051fe <TIM_Base_SetConfig+0x9a>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a31      	ldr	r2, [pc, #196]	@ (8005298 <TIM_Base_SetConfig+0x134>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d013      	beq.n	80051fe <TIM_Base_SetConfig+0x9a>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a30      	ldr	r2, [pc, #192]	@ (800529c <TIM_Base_SetConfig+0x138>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d00f      	beq.n	80051fe <TIM_Base_SetConfig+0x9a>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a2f      	ldr	r2, [pc, #188]	@ (80052a0 <TIM_Base_SetConfig+0x13c>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d00b      	beq.n	80051fe <TIM_Base_SetConfig+0x9a>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a2e      	ldr	r2, [pc, #184]	@ (80052a4 <TIM_Base_SetConfig+0x140>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d007      	beq.n	80051fe <TIM_Base_SetConfig+0x9a>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a2d      	ldr	r2, [pc, #180]	@ (80052a8 <TIM_Base_SetConfig+0x144>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d003      	beq.n	80051fe <TIM_Base_SetConfig+0x9a>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a2c      	ldr	r2, [pc, #176]	@ (80052ac <TIM_Base_SetConfig+0x148>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d108      	bne.n	8005210 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	4313      	orrs	r3, r2
 800520e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	4313      	orrs	r3, r2
 800521c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	689a      	ldr	r2, [r3, #8]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a16      	ldr	r2, [pc, #88]	@ (8005290 <TIM_Base_SetConfig+0x12c>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d00f      	beq.n	800525c <TIM_Base_SetConfig+0xf8>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a18      	ldr	r2, [pc, #96]	@ (80052a0 <TIM_Base_SetConfig+0x13c>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d00b      	beq.n	800525c <TIM_Base_SetConfig+0xf8>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a17      	ldr	r2, [pc, #92]	@ (80052a4 <TIM_Base_SetConfig+0x140>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d007      	beq.n	800525c <TIM_Base_SetConfig+0xf8>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a16      	ldr	r2, [pc, #88]	@ (80052a8 <TIM_Base_SetConfig+0x144>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d003      	beq.n	800525c <TIM_Base_SetConfig+0xf8>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a15      	ldr	r2, [pc, #84]	@ (80052ac <TIM_Base_SetConfig+0x148>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d103      	bne.n	8005264 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	691a      	ldr	r2, [r3, #16]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b01      	cmp	r3, #1
 8005274:	d105      	bne.n	8005282 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	f023 0201 	bic.w	r2, r3, #1
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	611a      	str	r2, [r3, #16]
  }
}
 8005282:	bf00      	nop
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	40012c00 	.word	0x40012c00
 8005294:	40000400 	.word	0x40000400
 8005298:	40000800 	.word	0x40000800
 800529c:	40000c00 	.word	0x40000c00
 80052a0:	40013400 	.word	0x40013400
 80052a4:	40014000 	.word	0x40014000
 80052a8:	40014400 	.word	0x40014400
 80052ac:	40014800 	.word	0x40014800

080052b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d101      	bne.n	80052c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052c4:	2302      	movs	r3, #2
 80052c6:	e068      	b.n	800539a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2202      	movs	r2, #2
 80052d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a2e      	ldr	r2, [pc, #184]	@ (80053a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d004      	beq.n	80052fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a2d      	ldr	r2, [pc, #180]	@ (80053ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d108      	bne.n	800530e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005302:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	4313      	orrs	r3, r2
 800530c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005314:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	4313      	orrs	r3, r2
 800531e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a1e      	ldr	r2, [pc, #120]	@ (80053a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d01d      	beq.n	800536e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800533a:	d018      	beq.n	800536e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a1b      	ldr	r2, [pc, #108]	@ (80053b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d013      	beq.n	800536e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a1a      	ldr	r2, [pc, #104]	@ (80053b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d00e      	beq.n	800536e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a18      	ldr	r2, [pc, #96]	@ (80053b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d009      	beq.n	800536e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a13      	ldr	r2, [pc, #76]	@ (80053ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d004      	beq.n	800536e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a14      	ldr	r2, [pc, #80]	@ (80053bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d10c      	bne.n	8005388 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005374:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	4313      	orrs	r3, r2
 800537e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3714      	adds	r7, #20
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	40012c00 	.word	0x40012c00
 80053ac:	40013400 	.word	0x40013400
 80053b0:	40000400 	.word	0x40000400
 80053b4:	40000800 	.word	0x40000800
 80053b8:	40000c00 	.word	0x40000c00
 80053bc:	40014000 	.word	0x40014000

080053c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e040      	b.n	8005454 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d106      	bne.n	80053e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f7fd f824 	bl	8002430 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2224      	movs	r2, #36	@ 0x24
 80053ec:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 0201 	bic.w	r2, r2, #1
 80053fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005402:	2b00      	cmp	r3, #0
 8005404:	d002      	beq.n	800540c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 fedc 	bl	80061c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 fc21 	bl	8005c54 <UART_SetConfig>
 8005412:	4603      	mov	r3, r0
 8005414:	2b01      	cmp	r3, #1
 8005416:	d101      	bne.n	800541c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e01b      	b.n	8005454 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	685a      	ldr	r2, [r3, #4]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800542a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	689a      	ldr	r2, [r3, #8]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800543a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f042 0201 	orr.w	r2, r2, #1
 800544a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 ff5b 	bl	8006308 <UART_CheckIdleState>
 8005452:	4603      	mov	r3, r0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3708      	adds	r7, #8
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b08a      	sub	sp, #40	@ 0x28
 8005460:	af02      	add	r7, sp, #8
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	603b      	str	r3, [r7, #0]
 8005468:	4613      	mov	r3, r2
 800546a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005470:	2b20      	cmp	r3, #32
 8005472:	d177      	bne.n	8005564 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d002      	beq.n	8005480 <HAL_UART_Transmit+0x24>
 800547a:	88fb      	ldrh	r3, [r7, #6]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d101      	bne.n	8005484 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e070      	b.n	8005566 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2221      	movs	r2, #33	@ 0x21
 8005490:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005492:	f7fd f93d 	bl	8002710 <HAL_GetTick>
 8005496:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	88fa      	ldrh	r2, [r7, #6]
 800549c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	88fa      	ldrh	r2, [r7, #6]
 80054a4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054b0:	d108      	bne.n	80054c4 <HAL_UART_Transmit+0x68>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d104      	bne.n	80054c4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80054ba:	2300      	movs	r3, #0
 80054bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	61bb      	str	r3, [r7, #24]
 80054c2:	e003      	b.n	80054cc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054c8:	2300      	movs	r3, #0
 80054ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80054cc:	e02f      	b.n	800552e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	2200      	movs	r2, #0
 80054d6:	2180      	movs	r1, #128	@ 0x80
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f000 ffbd 	bl	8006458 <UART_WaitOnFlagUntilTimeout>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d004      	beq.n	80054ee <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2220      	movs	r2, #32
 80054e8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e03b      	b.n	8005566 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d10b      	bne.n	800550c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	881a      	ldrh	r2, [r3, #0]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005500:	b292      	uxth	r2, r2
 8005502:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	3302      	adds	r3, #2
 8005508:	61bb      	str	r3, [r7, #24]
 800550a:	e007      	b.n	800551c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	781a      	ldrb	r2, [r3, #0]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	3301      	adds	r3, #1
 800551a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005522:	b29b      	uxth	r3, r3
 8005524:	3b01      	subs	r3, #1
 8005526:	b29a      	uxth	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005534:	b29b      	uxth	r3, r3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1c9      	bne.n	80054ce <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	9300      	str	r3, [sp, #0]
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	2200      	movs	r2, #0
 8005542:	2140      	movs	r1, #64	@ 0x40
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	f000 ff87 	bl	8006458 <UART_WaitOnFlagUntilTimeout>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d004      	beq.n	800555a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2220      	movs	r2, #32
 8005554:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e005      	b.n	8005566 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2220      	movs	r2, #32
 800555e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005560:	2300      	movs	r3, #0
 8005562:	e000      	b.n	8005566 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005564:	2302      	movs	r3, #2
  }
}
 8005566:	4618      	mov	r0, r3
 8005568:	3720      	adds	r7, #32
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
	...

08005570 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b08a      	sub	sp, #40	@ 0x28
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	4613      	mov	r3, r2
 800557c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005584:	2b20      	cmp	r3, #32
 8005586:	d137      	bne.n	80055f8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d002      	beq.n	8005594 <HAL_UART_Receive_IT+0x24>
 800558e:	88fb      	ldrh	r3, [r7, #6]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d101      	bne.n	8005598 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e030      	b.n	80055fa <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a18      	ldr	r2, [pc, #96]	@ (8005604 <HAL_UART_Receive_IT+0x94>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d01f      	beq.n	80055e8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d018      	beq.n	80055e8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	e853 3f00 	ldrex	r3, [r3]
 80055c2:	613b      	str	r3, [r7, #16]
   return(result);
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80055ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	461a      	mov	r2, r3
 80055d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d4:	623b      	str	r3, [r7, #32]
 80055d6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d8:	69f9      	ldr	r1, [r7, #28]
 80055da:	6a3a      	ldr	r2, [r7, #32]
 80055dc:	e841 2300 	strex	r3, r2, [r1]
 80055e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1e6      	bne.n	80055b6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80055e8:	88fb      	ldrh	r3, [r7, #6]
 80055ea:	461a      	mov	r2, r3
 80055ec:	68b9      	ldr	r1, [r7, #8]
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	f000 ffa0 	bl	8006534 <UART_Start_Receive_IT>
 80055f4:	4603      	mov	r3, r0
 80055f6:	e000      	b.n	80055fa <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80055f8:	2302      	movs	r3, #2
  }
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3728      	adds	r7, #40	@ 0x28
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	40008000 	.word	0x40008000

08005608 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b0ba      	sub	sp, #232	@ 0xe8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	69db      	ldr	r3, [r3, #28]
 8005616:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800562e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005632:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005636:	4013      	ands	r3, r2
 8005638:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800563c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005640:	2b00      	cmp	r3, #0
 8005642:	d115      	bne.n	8005670 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005648:	f003 0320 	and.w	r3, r3, #32
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00f      	beq.n	8005670 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005654:	f003 0320 	and.w	r3, r3, #32
 8005658:	2b00      	cmp	r3, #0
 800565a:	d009      	beq.n	8005670 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 82ca 	beq.w	8005bfa <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	4798      	blx	r3
      }
      return;
 800566e:	e2c4      	b.n	8005bfa <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005670:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005674:	2b00      	cmp	r3, #0
 8005676:	f000 8117 	beq.w	80058a8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800567a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800567e:	f003 0301 	and.w	r3, r3, #1
 8005682:	2b00      	cmp	r3, #0
 8005684:	d106      	bne.n	8005694 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005686:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800568a:	4b85      	ldr	r3, [pc, #532]	@ (80058a0 <HAL_UART_IRQHandler+0x298>)
 800568c:	4013      	ands	r3, r2
 800568e:	2b00      	cmp	r3, #0
 8005690:	f000 810a 	beq.w	80058a8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005698:	f003 0301 	and.w	r3, r3, #1
 800569c:	2b00      	cmp	r3, #0
 800569e:	d011      	beq.n	80056c4 <HAL_UART_IRQHandler+0xbc>
 80056a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d00b      	beq.n	80056c4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2201      	movs	r2, #1
 80056b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056ba:	f043 0201 	orr.w	r2, r3, #1
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056c8:	f003 0302 	and.w	r3, r3, #2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d011      	beq.n	80056f4 <HAL_UART_IRQHandler+0xec>
 80056d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056d4:	f003 0301 	and.w	r3, r3, #1
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00b      	beq.n	80056f4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2202      	movs	r2, #2
 80056e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056ea:	f043 0204 	orr.w	r2, r3, #4
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056f8:	f003 0304 	and.w	r3, r3, #4
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d011      	beq.n	8005724 <HAL_UART_IRQHandler+0x11c>
 8005700:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005704:	f003 0301 	and.w	r3, r3, #1
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00b      	beq.n	8005724 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2204      	movs	r2, #4
 8005712:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800571a:	f043 0202 	orr.w	r2, r3, #2
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005728:	f003 0308 	and.w	r3, r3, #8
 800572c:	2b00      	cmp	r3, #0
 800572e:	d017      	beq.n	8005760 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005734:	f003 0320 	and.w	r3, r3, #32
 8005738:	2b00      	cmp	r3, #0
 800573a:	d105      	bne.n	8005748 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800573c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005740:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00b      	beq.n	8005760 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2208      	movs	r2, #8
 800574e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005756:	f043 0208 	orr.w	r2, r3, #8
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005764:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005768:	2b00      	cmp	r3, #0
 800576a:	d012      	beq.n	8005792 <HAL_UART_IRQHandler+0x18a>
 800576c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005770:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00c      	beq.n	8005792 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005780:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005788:	f043 0220 	orr.w	r2, r3, #32
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005798:	2b00      	cmp	r3, #0
 800579a:	f000 8230 	beq.w	8005bfe <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800579e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057a2:	f003 0320 	and.w	r3, r3, #32
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00d      	beq.n	80057c6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80057aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057ae:	f003 0320 	and.w	r3, r3, #32
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d007      	beq.n	80057c6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d003      	beq.n	80057c6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057da:	2b40      	cmp	r3, #64	@ 0x40
 80057dc:	d005      	beq.n	80057ea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80057de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057e2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d04f      	beq.n	800588a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 ff68 	bl	80066c0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057fa:	2b40      	cmp	r3, #64	@ 0x40
 80057fc:	d141      	bne.n	8005882 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	3308      	adds	r3, #8
 8005804:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005808:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800580c:	e853 3f00 	ldrex	r3, [r3]
 8005810:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005814:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005818:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800581c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	3308      	adds	r3, #8
 8005826:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800582a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800582e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005832:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005836:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800583a:	e841 2300 	strex	r3, r2, [r1]
 800583e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005842:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1d9      	bne.n	80057fe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800584e:	2b00      	cmp	r3, #0
 8005850:	d013      	beq.n	800587a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005856:	4a13      	ldr	r2, [pc, #76]	@ (80058a4 <HAL_UART_IRQHandler+0x29c>)
 8005858:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800585e:	4618      	mov	r0, r3
 8005860:	f7fd f98e 	bl	8002b80 <HAL_DMA_Abort_IT>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d017      	beq.n	800589a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800586e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005874:	4610      	mov	r0, r2
 8005876:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005878:	e00f      	b.n	800589a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f9d4 	bl	8005c28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005880:	e00b      	b.n	800589a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f9d0 	bl	8005c28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005888:	e007      	b.n	800589a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 f9cc 	bl	8005c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005898:	e1b1      	b.n	8005bfe <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800589a:	bf00      	nop
    return;
 800589c:	e1af      	b.n	8005bfe <HAL_UART_IRQHandler+0x5f6>
 800589e:	bf00      	nop
 80058a0:	04000120 	.word	0x04000120
 80058a4:	08006789 	.word	0x08006789

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	f040 816a 	bne.w	8005b86 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80058b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058b6:	f003 0310 	and.w	r3, r3, #16
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f000 8163 	beq.w	8005b86 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80058c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058c4:	f003 0310 	and.w	r3, r3, #16
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 815c 	beq.w	8005b86 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2210      	movs	r2, #16
 80058d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058e0:	2b40      	cmp	r3, #64	@ 0x40
 80058e2:	f040 80d4 	bne.w	8005a8e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80058f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f000 80ad 	beq.w	8005a56 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005902:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005906:	429a      	cmp	r2, r3
 8005908:	f080 80a5 	bcs.w	8005a56 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005912:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0320 	and.w	r3, r3, #32
 8005922:	2b00      	cmp	r3, #0
 8005924:	f040 8086 	bne.w	8005a34 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005930:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005934:	e853 3f00 	ldrex	r3, [r3]
 8005938:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800593c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005940:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005944:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	461a      	mov	r2, r3
 800594e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005952:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005956:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800595e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005962:	e841 2300 	strex	r3, r2, [r1]
 8005966:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800596a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1da      	bne.n	8005928 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	3308      	adds	r3, #8
 8005978:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800597a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800597c:	e853 3f00 	ldrex	r3, [r3]
 8005980:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005982:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005984:	f023 0301 	bic.w	r3, r3, #1
 8005988:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	3308      	adds	r3, #8
 8005992:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005996:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800599a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800599e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80059a2:	e841 2300 	strex	r3, r2, [r1]
 80059a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80059a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1e1      	bne.n	8005972 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	3308      	adds	r3, #8
 80059b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80059b8:	e853 3f00 	ldrex	r3, [r3]
 80059bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80059be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80059c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	3308      	adds	r3, #8
 80059ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80059d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80059d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80059d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80059da:	e841 2300 	strex	r3, r2, [r1]
 80059de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80059e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1e3      	bne.n	80059ae <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2220      	movs	r2, #32
 80059ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059fc:	e853 3f00 	ldrex	r3, [r3]
 8005a00:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a04:	f023 0310 	bic.w	r3, r3, #16
 8005a08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	461a      	mov	r2, r3
 8005a12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005a16:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a18:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a1e:	e841 2300 	strex	r3, r2, [r1]
 8005a22:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1e4      	bne.n	80059f4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7fd f868 	bl	8002b04 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2202      	movs	r2, #2
 8005a38:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 f8f4 	bl	8005c3c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005a54:	e0d5      	b.n	8005c02 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005a5c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a60:	429a      	cmp	r2, r3
 8005a62:	f040 80ce 	bne.w	8005c02 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0320 	and.w	r3, r3, #32
 8005a72:	2b20      	cmp	r3, #32
 8005a74:	f040 80c5 	bne.w	8005c02 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005a84:	4619      	mov	r1, r3
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f8d8 	bl	8005c3c <HAL_UARTEx_RxEventCallback>
      return;
 8005a8c:	e0b9      	b.n	8005c02 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	f000 80ab 	beq.w	8005c06 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8005ab0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f000 80a6 	beq.w	8005c06 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ac2:	e853 3f00 	ldrex	r3, [r3]
 8005ac6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ace:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005adc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ade:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ae2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ae4:	e841 2300 	strex	r3, r2, [r1]
 8005ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005aea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d1e4      	bne.n	8005aba <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	3308      	adds	r3, #8
 8005af6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afa:	e853 3f00 	ldrex	r3, [r3]
 8005afe:	623b      	str	r3, [r7, #32]
   return(result);
 8005b00:	6a3b      	ldr	r3, [r7, #32]
 8005b02:	f023 0301 	bic.w	r3, r3, #1
 8005b06:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	3308      	adds	r3, #8
 8005b10:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005b14:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b18:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b1c:	e841 2300 	strex	r3, r2, [r1]
 8005b20:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d1e3      	bne.n	8005af0 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2220      	movs	r2, #32
 8005b2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	e853 3f00 	ldrex	r3, [r3]
 8005b48:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f023 0310 	bic.w	r3, r3, #16
 8005b50:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	461a      	mov	r2, r3
 8005b5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005b5e:	61fb      	str	r3, [r7, #28]
 8005b60:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b62:	69b9      	ldr	r1, [r7, #24]
 8005b64:	69fa      	ldr	r2, [r7, #28]
 8005b66:	e841 2300 	strex	r3, r2, [r1]
 8005b6a:	617b      	str	r3, [r7, #20]
   return(result);
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1e4      	bne.n	8005b3c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2202      	movs	r2, #2
 8005b76:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f85c 	bl	8005c3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b84:	e03f      	b.n	8005c06 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00e      	beq.n	8005bb0 <HAL_UART_IRQHandler+0x5a8>
 8005b92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d008      	beq.n	8005bb0 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005ba6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 ffe9 	bl	8006b80 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005bae:	e02d      	b.n	8005c0c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00e      	beq.n	8005bda <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d008      	beq.n	8005bda <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d01c      	beq.n	8005c0a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	4798      	blx	r3
    }
    return;
 8005bd8:	e017      	b.n	8005c0a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d012      	beq.n	8005c0c <HAL_UART_IRQHandler+0x604>
 8005be6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00c      	beq.n	8005c0c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 fdde 	bl	80067b4 <UART_EndTransmit_IT>
    return;
 8005bf8:	e008      	b.n	8005c0c <HAL_UART_IRQHandler+0x604>
      return;
 8005bfa:	bf00      	nop
 8005bfc:	e006      	b.n	8005c0c <HAL_UART_IRQHandler+0x604>
    return;
 8005bfe:	bf00      	nop
 8005c00:	e004      	b.n	8005c0c <HAL_UART_IRQHandler+0x604>
      return;
 8005c02:	bf00      	nop
 8005c04:	e002      	b.n	8005c0c <HAL_UART_IRQHandler+0x604>
      return;
 8005c06:	bf00      	nop
 8005c08:	e000      	b.n	8005c0c <HAL_UART_IRQHandler+0x604>
    return;
 8005c0a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005c0c:	37e8      	adds	r7, #232	@ 0xe8
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop

08005c14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	460b      	mov	r3, r1
 8005c46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c58:	b08a      	sub	sp, #40	@ 0x28
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	689a      	ldr	r2, [r3, #8]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	431a      	orrs	r2, r3
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	431a      	orrs	r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	69db      	ldr	r3, [r3, #28]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	4ba4      	ldr	r3, [pc, #656]	@ (8005f14 <UART_SetConfig+0x2c0>)
 8005c84:	4013      	ands	r3, r2
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	6812      	ldr	r2, [r2, #0]
 8005c8a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c8c:	430b      	orrs	r3, r1
 8005c8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	68da      	ldr	r2, [r3, #12]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a99      	ldr	r2, [pc, #612]	@ (8005f18 <UART_SetConfig+0x2c4>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d004      	beq.n	8005cc0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a90      	ldr	r2, [pc, #576]	@ (8005f1c <UART_SetConfig+0x2c8>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d126      	bne.n	8005d2c <UART_SetConfig+0xd8>
 8005cde:	4b90      	ldr	r3, [pc, #576]	@ (8005f20 <UART_SetConfig+0x2cc>)
 8005ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ce4:	f003 0303 	and.w	r3, r3, #3
 8005ce8:	2b03      	cmp	r3, #3
 8005cea:	d81b      	bhi.n	8005d24 <UART_SetConfig+0xd0>
 8005cec:	a201      	add	r2, pc, #4	@ (adr r2, 8005cf4 <UART_SetConfig+0xa0>)
 8005cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf2:	bf00      	nop
 8005cf4:	08005d05 	.word	0x08005d05
 8005cf8:	08005d15 	.word	0x08005d15
 8005cfc:	08005d0d 	.word	0x08005d0d
 8005d00:	08005d1d 	.word	0x08005d1d
 8005d04:	2301      	movs	r3, #1
 8005d06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d0a:	e116      	b.n	8005f3a <UART_SetConfig+0x2e6>
 8005d0c:	2302      	movs	r3, #2
 8005d0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d12:	e112      	b.n	8005f3a <UART_SetConfig+0x2e6>
 8005d14:	2304      	movs	r3, #4
 8005d16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d1a:	e10e      	b.n	8005f3a <UART_SetConfig+0x2e6>
 8005d1c:	2308      	movs	r3, #8
 8005d1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d22:	e10a      	b.n	8005f3a <UART_SetConfig+0x2e6>
 8005d24:	2310      	movs	r3, #16
 8005d26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d2a:	e106      	b.n	8005f3a <UART_SetConfig+0x2e6>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a7c      	ldr	r2, [pc, #496]	@ (8005f24 <UART_SetConfig+0x2d0>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d138      	bne.n	8005da8 <UART_SetConfig+0x154>
 8005d36:	4b7a      	ldr	r3, [pc, #488]	@ (8005f20 <UART_SetConfig+0x2cc>)
 8005d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d3c:	f003 030c 	and.w	r3, r3, #12
 8005d40:	2b0c      	cmp	r3, #12
 8005d42:	d82d      	bhi.n	8005da0 <UART_SetConfig+0x14c>
 8005d44:	a201      	add	r2, pc, #4	@ (adr r2, 8005d4c <UART_SetConfig+0xf8>)
 8005d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4a:	bf00      	nop
 8005d4c:	08005d81 	.word	0x08005d81
 8005d50:	08005da1 	.word	0x08005da1
 8005d54:	08005da1 	.word	0x08005da1
 8005d58:	08005da1 	.word	0x08005da1
 8005d5c:	08005d91 	.word	0x08005d91
 8005d60:	08005da1 	.word	0x08005da1
 8005d64:	08005da1 	.word	0x08005da1
 8005d68:	08005da1 	.word	0x08005da1
 8005d6c:	08005d89 	.word	0x08005d89
 8005d70:	08005da1 	.word	0x08005da1
 8005d74:	08005da1 	.word	0x08005da1
 8005d78:	08005da1 	.word	0x08005da1
 8005d7c:	08005d99 	.word	0x08005d99
 8005d80:	2300      	movs	r3, #0
 8005d82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d86:	e0d8      	b.n	8005f3a <UART_SetConfig+0x2e6>
 8005d88:	2302      	movs	r3, #2
 8005d8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d8e:	e0d4      	b.n	8005f3a <UART_SetConfig+0x2e6>
 8005d90:	2304      	movs	r3, #4
 8005d92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d96:	e0d0      	b.n	8005f3a <UART_SetConfig+0x2e6>
 8005d98:	2308      	movs	r3, #8
 8005d9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d9e:	e0cc      	b.n	8005f3a <UART_SetConfig+0x2e6>
 8005da0:	2310      	movs	r3, #16
 8005da2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005da6:	e0c8      	b.n	8005f3a <UART_SetConfig+0x2e6>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a5e      	ldr	r2, [pc, #376]	@ (8005f28 <UART_SetConfig+0x2d4>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d125      	bne.n	8005dfe <UART_SetConfig+0x1aa>
 8005db2:	4b5b      	ldr	r3, [pc, #364]	@ (8005f20 <UART_SetConfig+0x2cc>)
 8005db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005db8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005dbc:	2b30      	cmp	r3, #48	@ 0x30
 8005dbe:	d016      	beq.n	8005dee <UART_SetConfig+0x19a>
 8005dc0:	2b30      	cmp	r3, #48	@ 0x30
 8005dc2:	d818      	bhi.n	8005df6 <UART_SetConfig+0x1a2>
 8005dc4:	2b20      	cmp	r3, #32
 8005dc6:	d00a      	beq.n	8005dde <UART_SetConfig+0x18a>
 8005dc8:	2b20      	cmp	r3, #32
 8005dca:	d814      	bhi.n	8005df6 <UART_SetConfig+0x1a2>
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d002      	beq.n	8005dd6 <UART_SetConfig+0x182>
 8005dd0:	2b10      	cmp	r3, #16
 8005dd2:	d008      	beq.n	8005de6 <UART_SetConfig+0x192>
 8005dd4:	e00f      	b.n	8005df6 <UART_SetConfig+0x1a2>
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ddc:	e0ad      	b.n	8005f3a <UART_SetConfig+0x2e6>
 8005dde:	2302      	movs	r3, #2
 8005de0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005de4:	e0a9      	b.n	8005f3a <UART_SetConfig+0x2e6>
 8005de6:	2304      	movs	r3, #4
 8005de8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dec:	e0a5      	b.n	8005f3a <UART_SetConfig+0x2e6>
 8005dee:	2308      	movs	r3, #8
 8005df0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005df4:	e0a1      	b.n	8005f3a <UART_SetConfig+0x2e6>
 8005df6:	2310      	movs	r3, #16
 8005df8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dfc:	e09d      	b.n	8005f3a <UART_SetConfig+0x2e6>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a4a      	ldr	r2, [pc, #296]	@ (8005f2c <UART_SetConfig+0x2d8>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d125      	bne.n	8005e54 <UART_SetConfig+0x200>
 8005e08:	4b45      	ldr	r3, [pc, #276]	@ (8005f20 <UART_SetConfig+0x2cc>)
 8005e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e0e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005e12:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e14:	d016      	beq.n	8005e44 <UART_SetConfig+0x1f0>
 8005e16:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e18:	d818      	bhi.n	8005e4c <UART_SetConfig+0x1f8>
 8005e1a:	2b80      	cmp	r3, #128	@ 0x80
 8005e1c:	d00a      	beq.n	8005e34 <UART_SetConfig+0x1e0>
 8005e1e:	2b80      	cmp	r3, #128	@ 0x80
 8005e20:	d814      	bhi.n	8005e4c <UART_SetConfig+0x1f8>
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d002      	beq.n	8005e2c <UART_SetConfig+0x1d8>
 8005e26:	2b40      	cmp	r3, #64	@ 0x40
 8005e28:	d008      	beq.n	8005e3c <UART_SetConfig+0x1e8>
 8005e2a:	e00f      	b.n	8005e4c <UART_SetConfig+0x1f8>
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e32:	e082      	b.n	8005f3a <UART_SetConfig+0x2e6>
 8005e34:	2302      	movs	r3, #2
 8005e36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e3a:	e07e      	b.n	8005f3a <UART_SetConfig+0x2e6>
 8005e3c:	2304      	movs	r3, #4
 8005e3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e42:	e07a      	b.n	8005f3a <UART_SetConfig+0x2e6>
 8005e44:	2308      	movs	r3, #8
 8005e46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e4a:	e076      	b.n	8005f3a <UART_SetConfig+0x2e6>
 8005e4c:	2310      	movs	r3, #16
 8005e4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e52:	e072      	b.n	8005f3a <UART_SetConfig+0x2e6>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a35      	ldr	r2, [pc, #212]	@ (8005f30 <UART_SetConfig+0x2dc>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d12a      	bne.n	8005eb4 <UART_SetConfig+0x260>
 8005e5e:	4b30      	ldr	r3, [pc, #192]	@ (8005f20 <UART_SetConfig+0x2cc>)
 8005e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e6c:	d01a      	beq.n	8005ea4 <UART_SetConfig+0x250>
 8005e6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e72:	d81b      	bhi.n	8005eac <UART_SetConfig+0x258>
 8005e74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e78:	d00c      	beq.n	8005e94 <UART_SetConfig+0x240>
 8005e7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e7e:	d815      	bhi.n	8005eac <UART_SetConfig+0x258>
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d003      	beq.n	8005e8c <UART_SetConfig+0x238>
 8005e84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e88:	d008      	beq.n	8005e9c <UART_SetConfig+0x248>
 8005e8a:	e00f      	b.n	8005eac <UART_SetConfig+0x258>
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e92:	e052      	b.n	8005f3a <UART_SetConfig+0x2e6>
 8005e94:	2302      	movs	r3, #2
 8005e96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e9a:	e04e      	b.n	8005f3a <UART_SetConfig+0x2e6>
 8005e9c:	2304      	movs	r3, #4
 8005e9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ea2:	e04a      	b.n	8005f3a <UART_SetConfig+0x2e6>
 8005ea4:	2308      	movs	r3, #8
 8005ea6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eaa:	e046      	b.n	8005f3a <UART_SetConfig+0x2e6>
 8005eac:	2310      	movs	r3, #16
 8005eae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eb2:	e042      	b.n	8005f3a <UART_SetConfig+0x2e6>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a17      	ldr	r2, [pc, #92]	@ (8005f18 <UART_SetConfig+0x2c4>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d13a      	bne.n	8005f34 <UART_SetConfig+0x2e0>
 8005ebe:	4b18      	ldr	r3, [pc, #96]	@ (8005f20 <UART_SetConfig+0x2cc>)
 8005ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ec4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005ec8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ecc:	d01a      	beq.n	8005f04 <UART_SetConfig+0x2b0>
 8005ece:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ed2:	d81b      	bhi.n	8005f0c <UART_SetConfig+0x2b8>
 8005ed4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ed8:	d00c      	beq.n	8005ef4 <UART_SetConfig+0x2a0>
 8005eda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ede:	d815      	bhi.n	8005f0c <UART_SetConfig+0x2b8>
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d003      	beq.n	8005eec <UART_SetConfig+0x298>
 8005ee4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ee8:	d008      	beq.n	8005efc <UART_SetConfig+0x2a8>
 8005eea:	e00f      	b.n	8005f0c <UART_SetConfig+0x2b8>
 8005eec:	2300      	movs	r3, #0
 8005eee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ef2:	e022      	b.n	8005f3a <UART_SetConfig+0x2e6>
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005efa:	e01e      	b.n	8005f3a <UART_SetConfig+0x2e6>
 8005efc:	2304      	movs	r3, #4
 8005efe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f02:	e01a      	b.n	8005f3a <UART_SetConfig+0x2e6>
 8005f04:	2308      	movs	r3, #8
 8005f06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f0a:	e016      	b.n	8005f3a <UART_SetConfig+0x2e6>
 8005f0c:	2310      	movs	r3, #16
 8005f0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f12:	e012      	b.n	8005f3a <UART_SetConfig+0x2e6>
 8005f14:	efff69f3 	.word	0xefff69f3
 8005f18:	40008000 	.word	0x40008000
 8005f1c:	40013800 	.word	0x40013800
 8005f20:	40021000 	.word	0x40021000
 8005f24:	40004400 	.word	0x40004400
 8005f28:	40004800 	.word	0x40004800
 8005f2c:	40004c00 	.word	0x40004c00
 8005f30:	40005000 	.word	0x40005000
 8005f34:	2310      	movs	r3, #16
 8005f36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a9f      	ldr	r2, [pc, #636]	@ (80061bc <UART_SetConfig+0x568>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d17a      	bne.n	800603a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f44:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005f48:	2b08      	cmp	r3, #8
 8005f4a:	d824      	bhi.n	8005f96 <UART_SetConfig+0x342>
 8005f4c:	a201      	add	r2, pc, #4	@ (adr r2, 8005f54 <UART_SetConfig+0x300>)
 8005f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f52:	bf00      	nop
 8005f54:	08005f79 	.word	0x08005f79
 8005f58:	08005f97 	.word	0x08005f97
 8005f5c:	08005f81 	.word	0x08005f81
 8005f60:	08005f97 	.word	0x08005f97
 8005f64:	08005f87 	.word	0x08005f87
 8005f68:	08005f97 	.word	0x08005f97
 8005f6c:	08005f97 	.word	0x08005f97
 8005f70:	08005f97 	.word	0x08005f97
 8005f74:	08005f8f 	.word	0x08005f8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f78:	f7fd ffd6 	bl	8003f28 <HAL_RCC_GetPCLK1Freq>
 8005f7c:	61f8      	str	r0, [r7, #28]
        break;
 8005f7e:	e010      	b.n	8005fa2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f80:	4b8f      	ldr	r3, [pc, #572]	@ (80061c0 <UART_SetConfig+0x56c>)
 8005f82:	61fb      	str	r3, [r7, #28]
        break;
 8005f84:	e00d      	b.n	8005fa2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f86:	f7fd ff37 	bl	8003df8 <HAL_RCC_GetSysClockFreq>
 8005f8a:	61f8      	str	r0, [r7, #28]
        break;
 8005f8c:	e009      	b.n	8005fa2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f92:	61fb      	str	r3, [r7, #28]
        break;
 8005f94:	e005      	b.n	8005fa2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005f96:	2300      	movs	r3, #0
 8005f98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005fa0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f000 80fb 	beq.w	80061a0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	685a      	ldr	r2, [r3, #4]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	005b      	lsls	r3, r3, #1
 8005fb2:	4413      	add	r3, r2
 8005fb4:	69fa      	ldr	r2, [r7, #28]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d305      	bcc.n	8005fc6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005fc0:	69fa      	ldr	r2, [r7, #28]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d903      	bls.n	8005fce <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005fcc:	e0e8      	b.n	80061a0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	461c      	mov	r4, r3
 8005fd4:	4615      	mov	r5, r2
 8005fd6:	f04f 0200 	mov.w	r2, #0
 8005fda:	f04f 0300 	mov.w	r3, #0
 8005fde:	022b      	lsls	r3, r5, #8
 8005fe0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005fe4:	0222      	lsls	r2, r4, #8
 8005fe6:	68f9      	ldr	r1, [r7, #12]
 8005fe8:	6849      	ldr	r1, [r1, #4]
 8005fea:	0849      	lsrs	r1, r1, #1
 8005fec:	2000      	movs	r0, #0
 8005fee:	4688      	mov	r8, r1
 8005ff0:	4681      	mov	r9, r0
 8005ff2:	eb12 0a08 	adds.w	sl, r2, r8
 8005ff6:	eb43 0b09 	adc.w	fp, r3, r9
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	603b      	str	r3, [r7, #0]
 8006002:	607a      	str	r2, [r7, #4]
 8006004:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006008:	4650      	mov	r0, sl
 800600a:	4659      	mov	r1, fp
 800600c:	f7fa fdcc 	bl	8000ba8 <__aeabi_uldivmod>
 8006010:	4602      	mov	r2, r0
 8006012:	460b      	mov	r3, r1
 8006014:	4613      	mov	r3, r2
 8006016:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800601e:	d308      	bcc.n	8006032 <UART_SetConfig+0x3de>
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006026:	d204      	bcs.n	8006032 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	69ba      	ldr	r2, [r7, #24]
 800602e:	60da      	str	r2, [r3, #12]
 8006030:	e0b6      	b.n	80061a0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006038:	e0b2      	b.n	80061a0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	69db      	ldr	r3, [r3, #28]
 800603e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006042:	d15e      	bne.n	8006102 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006044:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006048:	2b08      	cmp	r3, #8
 800604a:	d828      	bhi.n	800609e <UART_SetConfig+0x44a>
 800604c:	a201      	add	r2, pc, #4	@ (adr r2, 8006054 <UART_SetConfig+0x400>)
 800604e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006052:	bf00      	nop
 8006054:	08006079 	.word	0x08006079
 8006058:	08006081 	.word	0x08006081
 800605c:	08006089 	.word	0x08006089
 8006060:	0800609f 	.word	0x0800609f
 8006064:	0800608f 	.word	0x0800608f
 8006068:	0800609f 	.word	0x0800609f
 800606c:	0800609f 	.word	0x0800609f
 8006070:	0800609f 	.word	0x0800609f
 8006074:	08006097 	.word	0x08006097
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006078:	f7fd ff56 	bl	8003f28 <HAL_RCC_GetPCLK1Freq>
 800607c:	61f8      	str	r0, [r7, #28]
        break;
 800607e:	e014      	b.n	80060aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006080:	f7fd ff68 	bl	8003f54 <HAL_RCC_GetPCLK2Freq>
 8006084:	61f8      	str	r0, [r7, #28]
        break;
 8006086:	e010      	b.n	80060aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006088:	4b4d      	ldr	r3, [pc, #308]	@ (80061c0 <UART_SetConfig+0x56c>)
 800608a:	61fb      	str	r3, [r7, #28]
        break;
 800608c:	e00d      	b.n	80060aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800608e:	f7fd feb3 	bl	8003df8 <HAL_RCC_GetSysClockFreq>
 8006092:	61f8      	str	r0, [r7, #28]
        break;
 8006094:	e009      	b.n	80060aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006096:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800609a:	61fb      	str	r3, [r7, #28]
        break;
 800609c:	e005      	b.n	80060aa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800609e:	2300      	movs	r3, #0
 80060a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80060a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d077      	beq.n	80061a0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	005a      	lsls	r2, r3, #1
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	085b      	lsrs	r3, r3, #1
 80060ba:	441a      	add	r2, r3
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060c4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	2b0f      	cmp	r3, #15
 80060ca:	d916      	bls.n	80060fa <UART_SetConfig+0x4a6>
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060d2:	d212      	bcs.n	80060fa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	f023 030f 	bic.w	r3, r3, #15
 80060dc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	085b      	lsrs	r3, r3, #1
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	f003 0307 	and.w	r3, r3, #7
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	8afb      	ldrh	r3, [r7, #22]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	8afa      	ldrh	r2, [r7, #22]
 80060f6:	60da      	str	r2, [r3, #12]
 80060f8:	e052      	b.n	80061a0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006100:	e04e      	b.n	80061a0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006102:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006106:	2b08      	cmp	r3, #8
 8006108:	d827      	bhi.n	800615a <UART_SetConfig+0x506>
 800610a:	a201      	add	r2, pc, #4	@ (adr r2, 8006110 <UART_SetConfig+0x4bc>)
 800610c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006110:	08006135 	.word	0x08006135
 8006114:	0800613d 	.word	0x0800613d
 8006118:	08006145 	.word	0x08006145
 800611c:	0800615b 	.word	0x0800615b
 8006120:	0800614b 	.word	0x0800614b
 8006124:	0800615b 	.word	0x0800615b
 8006128:	0800615b 	.word	0x0800615b
 800612c:	0800615b 	.word	0x0800615b
 8006130:	08006153 	.word	0x08006153
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006134:	f7fd fef8 	bl	8003f28 <HAL_RCC_GetPCLK1Freq>
 8006138:	61f8      	str	r0, [r7, #28]
        break;
 800613a:	e014      	b.n	8006166 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800613c:	f7fd ff0a 	bl	8003f54 <HAL_RCC_GetPCLK2Freq>
 8006140:	61f8      	str	r0, [r7, #28]
        break;
 8006142:	e010      	b.n	8006166 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006144:	4b1e      	ldr	r3, [pc, #120]	@ (80061c0 <UART_SetConfig+0x56c>)
 8006146:	61fb      	str	r3, [r7, #28]
        break;
 8006148:	e00d      	b.n	8006166 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800614a:	f7fd fe55 	bl	8003df8 <HAL_RCC_GetSysClockFreq>
 800614e:	61f8      	str	r0, [r7, #28]
        break;
 8006150:	e009      	b.n	8006166 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006152:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006156:	61fb      	str	r3, [r7, #28]
        break;
 8006158:	e005      	b.n	8006166 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800615a:	2300      	movs	r3, #0
 800615c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006164:	bf00      	nop
    }

    if (pclk != 0U)
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d019      	beq.n	80061a0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	085a      	lsrs	r2, r3, #1
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	441a      	add	r2, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	fbb2 f3f3 	udiv	r3, r2, r3
 800617e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	2b0f      	cmp	r3, #15
 8006184:	d909      	bls.n	800619a <UART_SetConfig+0x546>
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800618c:	d205      	bcs.n	800619a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	b29a      	uxth	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	60da      	str	r2, [r3, #12]
 8006198:	e002      	b.n	80061a0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2200      	movs	r2, #0
 80061aa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80061ac:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3728      	adds	r7, #40	@ 0x28
 80061b4:	46bd      	mov	sp, r7
 80061b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061ba:	bf00      	nop
 80061bc:	40008000 	.word	0x40008000
 80061c0:	00f42400 	.word	0x00f42400

080061c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d0:	f003 0308 	and.w	r3, r3, #8
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00a      	beq.n	80061ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	430a      	orrs	r2, r1
 80061ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f2:	f003 0301 	and.w	r3, r3, #1
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00a      	beq.n	8006210 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	430a      	orrs	r2, r1
 800620e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006214:	f003 0302 	and.w	r3, r3, #2
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00a      	beq.n	8006232 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	430a      	orrs	r2, r1
 8006230:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006236:	f003 0304 	and.w	r3, r3, #4
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00a      	beq.n	8006254 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	430a      	orrs	r2, r1
 8006252:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006258:	f003 0310 	and.w	r3, r3, #16
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00a      	beq.n	8006276 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	430a      	orrs	r2, r1
 8006274:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800627a:	f003 0320 	and.w	r3, r3, #32
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00a      	beq.n	8006298 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	430a      	orrs	r2, r1
 8006296:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800629c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d01a      	beq.n	80062da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	430a      	orrs	r2, r1
 80062b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062c2:	d10a      	bne.n	80062da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	430a      	orrs	r2, r1
 80062d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00a      	beq.n	80062fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	430a      	orrs	r2, r1
 80062fa:	605a      	str	r2, [r3, #4]
  }
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b098      	sub	sp, #96	@ 0x60
 800630c:	af02      	add	r7, sp, #8
 800630e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006318:	f7fc f9fa 	bl	8002710 <HAL_GetTick>
 800631c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0308 	and.w	r3, r3, #8
 8006328:	2b08      	cmp	r3, #8
 800632a:	d12e      	bne.n	800638a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800632c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006330:	9300      	str	r3, [sp, #0]
 8006332:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006334:	2200      	movs	r2, #0
 8006336:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 f88c 	bl	8006458 <UART_WaitOnFlagUntilTimeout>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d021      	beq.n	800638a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800634e:	e853 3f00 	ldrex	r3, [r3]
 8006352:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006356:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800635a:	653b      	str	r3, [r7, #80]	@ 0x50
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	461a      	mov	r2, r3
 8006362:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006364:	647b      	str	r3, [r7, #68]	@ 0x44
 8006366:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006368:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800636a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800636c:	e841 2300 	strex	r3, r2, [r1]
 8006370:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006372:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006374:	2b00      	cmp	r3, #0
 8006376:	d1e6      	bne.n	8006346 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2220      	movs	r2, #32
 800637c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e062      	b.n	8006450 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 0304 	and.w	r3, r3, #4
 8006394:	2b04      	cmp	r3, #4
 8006396:	d149      	bne.n	800642c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006398:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800639c:	9300      	str	r3, [sp, #0]
 800639e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063a0:	2200      	movs	r2, #0
 80063a2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f856 	bl	8006458 <UART_WaitOnFlagUntilTimeout>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d03c      	beq.n	800642c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ba:	e853 3f00 	ldrex	r3, [r3]
 80063be:	623b      	str	r3, [r7, #32]
   return(result);
 80063c0:	6a3b      	ldr	r3, [r7, #32]
 80063c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	461a      	mov	r2, r3
 80063ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80063d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063d8:	e841 2300 	strex	r3, r2, [r1]
 80063dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80063de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d1e6      	bne.n	80063b2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	3308      	adds	r3, #8
 80063ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	e853 3f00 	ldrex	r3, [r3]
 80063f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f023 0301 	bic.w	r3, r3, #1
 80063fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	3308      	adds	r3, #8
 8006402:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006404:	61fa      	str	r2, [r7, #28]
 8006406:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006408:	69b9      	ldr	r1, [r7, #24]
 800640a:	69fa      	ldr	r2, [r7, #28]
 800640c:	e841 2300 	strex	r3, r2, [r1]
 8006410:	617b      	str	r3, [r7, #20]
   return(result);
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1e5      	bne.n	80063e4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2220      	movs	r2, #32
 800641c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	e011      	b.n	8006450 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2220      	movs	r2, #32
 8006430:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2220      	movs	r2, #32
 8006436:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3758      	adds	r7, #88	@ 0x58
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	603b      	str	r3, [r7, #0]
 8006464:	4613      	mov	r3, r2
 8006466:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006468:	e04f      	b.n	800650a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006470:	d04b      	beq.n	800650a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006472:	f7fc f94d 	bl	8002710 <HAL_GetTick>
 8006476:	4602      	mov	r2, r0
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	69ba      	ldr	r2, [r7, #24]
 800647e:	429a      	cmp	r2, r3
 8006480:	d302      	bcc.n	8006488 <UART_WaitOnFlagUntilTimeout+0x30>
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d101      	bne.n	800648c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e04e      	b.n	800652a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0304 	and.w	r3, r3, #4
 8006496:	2b00      	cmp	r3, #0
 8006498:	d037      	beq.n	800650a <UART_WaitOnFlagUntilTimeout+0xb2>
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	2b80      	cmp	r3, #128	@ 0x80
 800649e:	d034      	beq.n	800650a <UART_WaitOnFlagUntilTimeout+0xb2>
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	2b40      	cmp	r3, #64	@ 0x40
 80064a4:	d031      	beq.n	800650a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	69db      	ldr	r3, [r3, #28]
 80064ac:	f003 0308 	and.w	r3, r3, #8
 80064b0:	2b08      	cmp	r3, #8
 80064b2:	d110      	bne.n	80064d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2208      	movs	r2, #8
 80064ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f000 f8ff 	bl	80066c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2208      	movs	r2, #8
 80064c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e029      	b.n	800652a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	69db      	ldr	r3, [r3, #28]
 80064dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064e4:	d111      	bne.n	800650a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80064ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064f0:	68f8      	ldr	r0, [r7, #12]
 80064f2:	f000 f8e5 	bl	80066c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2220      	movs	r2, #32
 80064fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e00f      	b.n	800652a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	69da      	ldr	r2, [r3, #28]
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	4013      	ands	r3, r2
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	429a      	cmp	r2, r3
 8006518:	bf0c      	ite	eq
 800651a:	2301      	moveq	r3, #1
 800651c:	2300      	movne	r3, #0
 800651e:	b2db      	uxtb	r3, r3
 8006520:	461a      	mov	r2, r3
 8006522:	79fb      	ldrb	r3, [r7, #7]
 8006524:	429a      	cmp	r2, r3
 8006526:	d0a0      	beq.n	800646a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
	...

08006534 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006534:	b480      	push	{r7}
 8006536:	b097      	sub	sp, #92	@ 0x5c
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	4613      	mov	r3, r2
 8006540:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	88fa      	ldrh	r2, [r7, #6]
 800654c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	88fa      	ldrh	r2, [r7, #6]
 8006554:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006566:	d10e      	bne.n	8006586 <UART_Start_Receive_IT+0x52>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d105      	bne.n	800657c <UART_Start_Receive_IT+0x48>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006576:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800657a:	e02d      	b.n	80065d8 <UART_Start_Receive_IT+0xa4>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	22ff      	movs	r2, #255	@ 0xff
 8006580:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006584:	e028      	b.n	80065d8 <UART_Start_Receive_IT+0xa4>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10d      	bne.n	80065aa <UART_Start_Receive_IT+0x76>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d104      	bne.n	80065a0 <UART_Start_Receive_IT+0x6c>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	22ff      	movs	r2, #255	@ 0xff
 800659a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800659e:	e01b      	b.n	80065d8 <UART_Start_Receive_IT+0xa4>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	227f      	movs	r2, #127	@ 0x7f
 80065a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80065a8:	e016      	b.n	80065d8 <UART_Start_Receive_IT+0xa4>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065b2:	d10d      	bne.n	80065d0 <UART_Start_Receive_IT+0x9c>
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d104      	bne.n	80065c6 <UART_Start_Receive_IT+0x92>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	227f      	movs	r2, #127	@ 0x7f
 80065c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80065c4:	e008      	b.n	80065d8 <UART_Start_Receive_IT+0xa4>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	223f      	movs	r2, #63	@ 0x3f
 80065ca:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80065ce:	e003      	b.n	80065d8 <UART_Start_Receive_IT+0xa4>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2222      	movs	r2, #34	@ 0x22
 80065e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	3308      	adds	r3, #8
 80065ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065f2:	e853 3f00 	ldrex	r3, [r3]
 80065f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80065f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065fa:	f043 0301 	orr.w	r3, r3, #1
 80065fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	3308      	adds	r3, #8
 8006606:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006608:	64ba      	str	r2, [r7, #72]	@ 0x48
 800660a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800660e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006610:	e841 2300 	strex	r3, r2, [r1]
 8006614:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006616:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006618:	2b00      	cmp	r3, #0
 800661a:	d1e5      	bne.n	80065e8 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006624:	d107      	bne.n	8006636 <UART_Start_Receive_IT+0x102>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d103      	bne.n	8006636 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	4a21      	ldr	r2, [pc, #132]	@ (80066b8 <UART_Start_Receive_IT+0x184>)
 8006632:	669a      	str	r2, [r3, #104]	@ 0x68
 8006634:	e002      	b.n	800663c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	4a20      	ldr	r2, [pc, #128]	@ (80066bc <UART_Start_Receive_IT+0x188>)
 800663a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d019      	beq.n	8006678 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800664c:	e853 3f00 	ldrex	r3, [r3]
 8006650:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006654:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006658:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	461a      	mov	r2, r3
 8006660:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006662:	637b      	str	r3, [r7, #52]	@ 0x34
 8006664:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006666:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006668:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800666a:	e841 2300 	strex	r3, r2, [r1]
 800666e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1e6      	bne.n	8006644 <UART_Start_Receive_IT+0x110>
 8006676:	e018      	b.n	80066aa <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	e853 3f00 	ldrex	r3, [r3]
 8006684:	613b      	str	r3, [r7, #16]
   return(result);
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	f043 0320 	orr.w	r3, r3, #32
 800668c:	653b      	str	r3, [r7, #80]	@ 0x50
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	461a      	mov	r2, r3
 8006694:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006696:	623b      	str	r3, [r7, #32]
 8006698:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669a:	69f9      	ldr	r1, [r7, #28]
 800669c:	6a3a      	ldr	r2, [r7, #32]
 800669e:	e841 2300 	strex	r3, r2, [r1]
 80066a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d1e6      	bne.n	8006678 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	375c      	adds	r7, #92	@ 0x5c
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr
 80066b8:	080069c5 	.word	0x080069c5
 80066bc:	08006809 	.word	0x08006809

080066c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b095      	sub	sp, #84	@ 0x54
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066d0:	e853 3f00 	ldrex	r3, [r3]
 80066d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80066d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	461a      	mov	r2, r3
 80066e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80066e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80066ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066ee:	e841 2300 	strex	r3, r2, [r1]
 80066f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80066f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1e6      	bne.n	80066c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	3308      	adds	r3, #8
 8006700:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006702:	6a3b      	ldr	r3, [r7, #32]
 8006704:	e853 3f00 	ldrex	r3, [r3]
 8006708:	61fb      	str	r3, [r7, #28]
   return(result);
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	f023 0301 	bic.w	r3, r3, #1
 8006710:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	3308      	adds	r3, #8
 8006718:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800671a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800671c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800671e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006720:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006722:	e841 2300 	strex	r3, r2, [r1]
 8006726:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1e5      	bne.n	80066fa <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006732:	2b01      	cmp	r3, #1
 8006734:	d118      	bne.n	8006768 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	e853 3f00 	ldrex	r3, [r3]
 8006742:	60bb      	str	r3, [r7, #8]
   return(result);
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	f023 0310 	bic.w	r3, r3, #16
 800674a:	647b      	str	r3, [r7, #68]	@ 0x44
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	461a      	mov	r2, r3
 8006752:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006754:	61bb      	str	r3, [r7, #24]
 8006756:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006758:	6979      	ldr	r1, [r7, #20]
 800675a:	69ba      	ldr	r2, [r7, #24]
 800675c:	e841 2300 	strex	r3, r2, [r1]
 8006760:	613b      	str	r3, [r7, #16]
   return(result);
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d1e6      	bne.n	8006736 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2220      	movs	r2, #32
 800676c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800677c:	bf00      	nop
 800677e:	3754      	adds	r7, #84	@ 0x54
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006794:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f7ff fa3e 	bl	8005c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067ac:	bf00      	nop
 80067ae:	3710      	adds	r7, #16
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b088      	sub	sp, #32
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	e853 3f00 	ldrex	r3, [r3]
 80067c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067d0:	61fb      	str	r3, [r7, #28]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	461a      	mov	r2, r3
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	61bb      	str	r3, [r7, #24]
 80067dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067de:	6979      	ldr	r1, [r7, #20]
 80067e0:	69ba      	ldr	r2, [r7, #24]
 80067e2:	e841 2300 	strex	r3, r2, [r1]
 80067e6:	613b      	str	r3, [r7, #16]
   return(result);
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1e6      	bne.n	80067bc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2220      	movs	r2, #32
 80067f2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f7ff fa0a 	bl	8005c14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006800:	bf00      	nop
 8006802:	3720      	adds	r7, #32
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b09c      	sub	sp, #112	@ 0x70
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006816:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006820:	2b22      	cmp	r3, #34	@ 0x22
 8006822:	f040 80be 	bne.w	80069a2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800682c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006830:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006834:	b2d9      	uxtb	r1, r3
 8006836:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800683a:	b2da      	uxtb	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006840:	400a      	ands	r2, r1
 8006842:	b2d2      	uxtb	r2, r2
 8006844:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800684a:	1c5a      	adds	r2, r3, #1
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006856:	b29b      	uxth	r3, r3
 8006858:	3b01      	subs	r3, #1
 800685a:	b29a      	uxth	r2, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006868:	b29b      	uxth	r3, r3
 800686a:	2b00      	cmp	r3, #0
 800686c:	f040 80a3 	bne.w	80069b6 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006876:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006878:	e853 3f00 	ldrex	r3, [r3]
 800687c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800687e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006880:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006884:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	461a      	mov	r2, r3
 800688c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800688e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006890:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006892:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006894:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006896:	e841 2300 	strex	r3, r2, [r1]
 800689a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800689c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1e6      	bne.n	8006870 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	3308      	adds	r3, #8
 80068a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ac:	e853 3f00 	ldrex	r3, [r3]
 80068b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80068b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068b4:	f023 0301 	bic.w	r3, r3, #1
 80068b8:	667b      	str	r3, [r7, #100]	@ 0x64
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	3308      	adds	r3, #8
 80068c0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80068c2:	647a      	str	r2, [r7, #68]	@ 0x44
 80068c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80068c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068ca:	e841 2300 	strex	r3, r2, [r1]
 80068ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80068d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1e5      	bne.n	80068a2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2220      	movs	r2, #32
 80068da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a34      	ldr	r2, [pc, #208]	@ (80069c0 <UART_RxISR_8BIT+0x1b8>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d01f      	beq.n	8006934 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d018      	beq.n	8006934 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800690a:	e853 3f00 	ldrex	r3, [r3]
 800690e:	623b      	str	r3, [r7, #32]
   return(result);
 8006910:	6a3b      	ldr	r3, [r7, #32]
 8006912:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006916:	663b      	str	r3, [r7, #96]	@ 0x60
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	461a      	mov	r2, r3
 800691e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006920:	633b      	str	r3, [r7, #48]	@ 0x30
 8006922:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006924:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006926:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006928:	e841 2300 	strex	r3, r2, [r1]
 800692c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800692e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006930:	2b00      	cmp	r3, #0
 8006932:	d1e6      	bne.n	8006902 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006938:	2b01      	cmp	r3, #1
 800693a:	d12e      	bne.n	800699a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	e853 3f00 	ldrex	r3, [r3]
 800694e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f023 0310 	bic.w	r3, r3, #16
 8006956:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	461a      	mov	r2, r3
 800695e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006960:	61fb      	str	r3, [r7, #28]
 8006962:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006964:	69b9      	ldr	r1, [r7, #24]
 8006966:	69fa      	ldr	r2, [r7, #28]
 8006968:	e841 2300 	strex	r3, r2, [r1]
 800696c:	617b      	str	r3, [r7, #20]
   return(result);
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d1e6      	bne.n	8006942 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	69db      	ldr	r3, [r3, #28]
 800697a:	f003 0310 	and.w	r3, r3, #16
 800697e:	2b10      	cmp	r3, #16
 8006980:	d103      	bne.n	800698a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2210      	movs	r2, #16
 8006988:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006990:	4619      	mov	r1, r3
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f7ff f952 	bl	8005c3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006998:	e00d      	b.n	80069b6 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f7fb fa5a 	bl	8001e54 <HAL_UART_RxCpltCallback>
}
 80069a0:	e009      	b.n	80069b6 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	8b1b      	ldrh	r3, [r3, #24]
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f042 0208 	orr.w	r2, r2, #8
 80069b2:	b292      	uxth	r2, r2
 80069b4:	831a      	strh	r2, [r3, #24]
}
 80069b6:	bf00      	nop
 80069b8:	3770      	adds	r7, #112	@ 0x70
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	40008000 	.word	0x40008000

080069c4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b09c      	sub	sp, #112	@ 0x70
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80069d2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069dc:	2b22      	cmp	r3, #34	@ 0x22
 80069de:	f040 80be 	bne.w	8006b5e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80069e8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069f0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80069f2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80069f6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80069fa:	4013      	ands	r3, r2
 80069fc:	b29a      	uxth	r2, r3
 80069fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a00:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a06:	1c9a      	adds	r2, r3, #2
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	3b01      	subs	r3, #1
 8006a16:	b29a      	uxth	r2, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f040 80a3 	bne.w	8006b72 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a34:	e853 3f00 	ldrex	r3, [r3]
 8006a38:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006a3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a40:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	461a      	mov	r2, r3
 8006a48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a4a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a4c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006a50:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006a52:	e841 2300 	strex	r3, r2, [r1]
 8006a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006a58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1e6      	bne.n	8006a2c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	3308      	adds	r3, #8
 8006a64:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a68:	e853 3f00 	ldrex	r3, [r3]
 8006a6c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a70:	f023 0301 	bic.w	r3, r3, #1
 8006a74:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	3308      	adds	r3, #8
 8006a7c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006a7e:	643a      	str	r2, [r7, #64]	@ 0x40
 8006a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a82:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a86:	e841 2300 	strex	r3, r2, [r1]
 8006a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1e5      	bne.n	8006a5e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2220      	movs	r2, #32
 8006a96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a34      	ldr	r2, [pc, #208]	@ (8006b7c <UART_RxISR_16BIT+0x1b8>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d01f      	beq.n	8006af0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d018      	beq.n	8006af0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac4:	6a3b      	ldr	r3, [r7, #32]
 8006ac6:	e853 3f00 	ldrex	r3, [r3]
 8006aca:	61fb      	str	r3, [r7, #28]
   return(result);
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006ad2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	461a      	mov	r2, r3
 8006ada:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ade:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ae2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ae4:	e841 2300 	strex	r3, r2, [r1]
 8006ae8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d1e6      	bne.n	8006abe <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d12e      	bne.n	8006b56 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	e853 3f00 	ldrex	r3, [r3]
 8006b0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	f023 0310 	bic.w	r3, r3, #16
 8006b12:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	461a      	mov	r2, r3
 8006b1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006b1c:	61bb      	str	r3, [r7, #24]
 8006b1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b20:	6979      	ldr	r1, [r7, #20]
 8006b22:	69ba      	ldr	r2, [r7, #24]
 8006b24:	e841 2300 	strex	r3, r2, [r1]
 8006b28:	613b      	str	r3, [r7, #16]
   return(result);
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1e6      	bne.n	8006afe <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	69db      	ldr	r3, [r3, #28]
 8006b36:	f003 0310 	and.w	r3, r3, #16
 8006b3a:	2b10      	cmp	r3, #16
 8006b3c:	d103      	bne.n	8006b46 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2210      	movs	r2, #16
 8006b44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f7ff f874 	bl	8005c3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b54:	e00d      	b.n	8006b72 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f7fb f97c 	bl	8001e54 <HAL_UART_RxCpltCallback>
}
 8006b5c:	e009      	b.n	8006b72 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	8b1b      	ldrh	r3, [r3, #24]
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f042 0208 	orr.w	r2, r2, #8
 8006b6e:	b292      	uxth	r2, r2
 8006b70:	831a      	strh	r2, [r3, #24]
}
 8006b72:	bf00      	nop
 8006b74:	3770      	adds	r7, #112	@ 0x70
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	40008000 	.word	0x40008000

08006b80 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006b88:	bf00      	nop
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <__cvt>:
 8006b94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b98:	ec57 6b10 	vmov	r6, r7, d0
 8006b9c:	2f00      	cmp	r7, #0
 8006b9e:	460c      	mov	r4, r1
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	463b      	mov	r3, r7
 8006ba4:	bfbb      	ittet	lt
 8006ba6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006baa:	461f      	movlt	r7, r3
 8006bac:	2300      	movge	r3, #0
 8006bae:	232d      	movlt	r3, #45	@ 0x2d
 8006bb0:	700b      	strb	r3, [r1, #0]
 8006bb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006bb4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006bb8:	4691      	mov	r9, r2
 8006bba:	f023 0820 	bic.w	r8, r3, #32
 8006bbe:	bfbc      	itt	lt
 8006bc0:	4632      	movlt	r2, r6
 8006bc2:	4616      	movlt	r6, r2
 8006bc4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006bc8:	d005      	beq.n	8006bd6 <__cvt+0x42>
 8006bca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006bce:	d100      	bne.n	8006bd2 <__cvt+0x3e>
 8006bd0:	3401      	adds	r4, #1
 8006bd2:	2102      	movs	r1, #2
 8006bd4:	e000      	b.n	8006bd8 <__cvt+0x44>
 8006bd6:	2103      	movs	r1, #3
 8006bd8:	ab03      	add	r3, sp, #12
 8006bda:	9301      	str	r3, [sp, #4]
 8006bdc:	ab02      	add	r3, sp, #8
 8006bde:	9300      	str	r3, [sp, #0]
 8006be0:	ec47 6b10 	vmov	d0, r6, r7
 8006be4:	4653      	mov	r3, sl
 8006be6:	4622      	mov	r2, r4
 8006be8:	f000 ff3e 	bl	8007a68 <_dtoa_r>
 8006bec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006bf0:	4605      	mov	r5, r0
 8006bf2:	d119      	bne.n	8006c28 <__cvt+0x94>
 8006bf4:	f019 0f01 	tst.w	r9, #1
 8006bf8:	d00e      	beq.n	8006c18 <__cvt+0x84>
 8006bfa:	eb00 0904 	add.w	r9, r0, r4
 8006bfe:	2200      	movs	r2, #0
 8006c00:	2300      	movs	r3, #0
 8006c02:	4630      	mov	r0, r6
 8006c04:	4639      	mov	r1, r7
 8006c06:	f7f9 ff5f 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c0a:	b108      	cbz	r0, 8006c10 <__cvt+0x7c>
 8006c0c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006c10:	2230      	movs	r2, #48	@ 0x30
 8006c12:	9b03      	ldr	r3, [sp, #12]
 8006c14:	454b      	cmp	r3, r9
 8006c16:	d31e      	bcc.n	8006c56 <__cvt+0xc2>
 8006c18:	9b03      	ldr	r3, [sp, #12]
 8006c1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006c1c:	1b5b      	subs	r3, r3, r5
 8006c1e:	4628      	mov	r0, r5
 8006c20:	6013      	str	r3, [r2, #0]
 8006c22:	b004      	add	sp, #16
 8006c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c28:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006c2c:	eb00 0904 	add.w	r9, r0, r4
 8006c30:	d1e5      	bne.n	8006bfe <__cvt+0x6a>
 8006c32:	7803      	ldrb	r3, [r0, #0]
 8006c34:	2b30      	cmp	r3, #48	@ 0x30
 8006c36:	d10a      	bne.n	8006c4e <__cvt+0xba>
 8006c38:	2200      	movs	r2, #0
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	4630      	mov	r0, r6
 8006c3e:	4639      	mov	r1, r7
 8006c40:	f7f9 ff42 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c44:	b918      	cbnz	r0, 8006c4e <__cvt+0xba>
 8006c46:	f1c4 0401 	rsb	r4, r4, #1
 8006c4a:	f8ca 4000 	str.w	r4, [sl]
 8006c4e:	f8da 3000 	ldr.w	r3, [sl]
 8006c52:	4499      	add	r9, r3
 8006c54:	e7d3      	b.n	8006bfe <__cvt+0x6a>
 8006c56:	1c59      	adds	r1, r3, #1
 8006c58:	9103      	str	r1, [sp, #12]
 8006c5a:	701a      	strb	r2, [r3, #0]
 8006c5c:	e7d9      	b.n	8006c12 <__cvt+0x7e>

08006c5e <__exponent>:
 8006c5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c60:	2900      	cmp	r1, #0
 8006c62:	bfba      	itte	lt
 8006c64:	4249      	neglt	r1, r1
 8006c66:	232d      	movlt	r3, #45	@ 0x2d
 8006c68:	232b      	movge	r3, #43	@ 0x2b
 8006c6a:	2909      	cmp	r1, #9
 8006c6c:	7002      	strb	r2, [r0, #0]
 8006c6e:	7043      	strb	r3, [r0, #1]
 8006c70:	dd29      	ble.n	8006cc6 <__exponent+0x68>
 8006c72:	f10d 0307 	add.w	r3, sp, #7
 8006c76:	461d      	mov	r5, r3
 8006c78:	270a      	movs	r7, #10
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006c80:	fb07 1416 	mls	r4, r7, r6, r1
 8006c84:	3430      	adds	r4, #48	@ 0x30
 8006c86:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006c8a:	460c      	mov	r4, r1
 8006c8c:	2c63      	cmp	r4, #99	@ 0x63
 8006c8e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006c92:	4631      	mov	r1, r6
 8006c94:	dcf1      	bgt.n	8006c7a <__exponent+0x1c>
 8006c96:	3130      	adds	r1, #48	@ 0x30
 8006c98:	1e94      	subs	r4, r2, #2
 8006c9a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006c9e:	1c41      	adds	r1, r0, #1
 8006ca0:	4623      	mov	r3, r4
 8006ca2:	42ab      	cmp	r3, r5
 8006ca4:	d30a      	bcc.n	8006cbc <__exponent+0x5e>
 8006ca6:	f10d 0309 	add.w	r3, sp, #9
 8006caa:	1a9b      	subs	r3, r3, r2
 8006cac:	42ac      	cmp	r4, r5
 8006cae:	bf88      	it	hi
 8006cb0:	2300      	movhi	r3, #0
 8006cb2:	3302      	adds	r3, #2
 8006cb4:	4403      	add	r3, r0
 8006cb6:	1a18      	subs	r0, r3, r0
 8006cb8:	b003      	add	sp, #12
 8006cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cbc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006cc0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006cc4:	e7ed      	b.n	8006ca2 <__exponent+0x44>
 8006cc6:	2330      	movs	r3, #48	@ 0x30
 8006cc8:	3130      	adds	r1, #48	@ 0x30
 8006cca:	7083      	strb	r3, [r0, #2]
 8006ccc:	70c1      	strb	r1, [r0, #3]
 8006cce:	1d03      	adds	r3, r0, #4
 8006cd0:	e7f1      	b.n	8006cb6 <__exponent+0x58>
	...

08006cd4 <_printf_float>:
 8006cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd8:	b08d      	sub	sp, #52	@ 0x34
 8006cda:	460c      	mov	r4, r1
 8006cdc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006ce0:	4616      	mov	r6, r2
 8006ce2:	461f      	mov	r7, r3
 8006ce4:	4605      	mov	r5, r0
 8006ce6:	f000 fdbf 	bl	8007868 <_localeconv_r>
 8006cea:	6803      	ldr	r3, [r0, #0]
 8006cec:	9304      	str	r3, [sp, #16]
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7f9 fabe 	bl	8000270 <strlen>
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cf8:	f8d8 3000 	ldr.w	r3, [r8]
 8006cfc:	9005      	str	r0, [sp, #20]
 8006cfe:	3307      	adds	r3, #7
 8006d00:	f023 0307 	bic.w	r3, r3, #7
 8006d04:	f103 0208 	add.w	r2, r3, #8
 8006d08:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006d0c:	f8d4 b000 	ldr.w	fp, [r4]
 8006d10:	f8c8 2000 	str.w	r2, [r8]
 8006d14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d18:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006d1c:	9307      	str	r3, [sp, #28]
 8006d1e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006d22:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006d26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d2a:	4b9c      	ldr	r3, [pc, #624]	@ (8006f9c <_printf_float+0x2c8>)
 8006d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d30:	f7f9 fefc 	bl	8000b2c <__aeabi_dcmpun>
 8006d34:	bb70      	cbnz	r0, 8006d94 <_printf_float+0xc0>
 8006d36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d3a:	4b98      	ldr	r3, [pc, #608]	@ (8006f9c <_printf_float+0x2c8>)
 8006d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d40:	f7f9 fed6 	bl	8000af0 <__aeabi_dcmple>
 8006d44:	bb30      	cbnz	r0, 8006d94 <_printf_float+0xc0>
 8006d46:	2200      	movs	r2, #0
 8006d48:	2300      	movs	r3, #0
 8006d4a:	4640      	mov	r0, r8
 8006d4c:	4649      	mov	r1, r9
 8006d4e:	f7f9 fec5 	bl	8000adc <__aeabi_dcmplt>
 8006d52:	b110      	cbz	r0, 8006d5a <_printf_float+0x86>
 8006d54:	232d      	movs	r3, #45	@ 0x2d
 8006d56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d5a:	4a91      	ldr	r2, [pc, #580]	@ (8006fa0 <_printf_float+0x2cc>)
 8006d5c:	4b91      	ldr	r3, [pc, #580]	@ (8006fa4 <_printf_float+0x2d0>)
 8006d5e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006d62:	bf94      	ite	ls
 8006d64:	4690      	movls	r8, r2
 8006d66:	4698      	movhi	r8, r3
 8006d68:	2303      	movs	r3, #3
 8006d6a:	6123      	str	r3, [r4, #16]
 8006d6c:	f02b 0304 	bic.w	r3, fp, #4
 8006d70:	6023      	str	r3, [r4, #0]
 8006d72:	f04f 0900 	mov.w	r9, #0
 8006d76:	9700      	str	r7, [sp, #0]
 8006d78:	4633      	mov	r3, r6
 8006d7a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006d7c:	4621      	mov	r1, r4
 8006d7e:	4628      	mov	r0, r5
 8006d80:	f000 f9d2 	bl	8007128 <_printf_common>
 8006d84:	3001      	adds	r0, #1
 8006d86:	f040 808d 	bne.w	8006ea4 <_printf_float+0x1d0>
 8006d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d8e:	b00d      	add	sp, #52	@ 0x34
 8006d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d94:	4642      	mov	r2, r8
 8006d96:	464b      	mov	r3, r9
 8006d98:	4640      	mov	r0, r8
 8006d9a:	4649      	mov	r1, r9
 8006d9c:	f7f9 fec6 	bl	8000b2c <__aeabi_dcmpun>
 8006da0:	b140      	cbz	r0, 8006db4 <_printf_float+0xe0>
 8006da2:	464b      	mov	r3, r9
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	bfbc      	itt	lt
 8006da8:	232d      	movlt	r3, #45	@ 0x2d
 8006daa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006dae:	4a7e      	ldr	r2, [pc, #504]	@ (8006fa8 <_printf_float+0x2d4>)
 8006db0:	4b7e      	ldr	r3, [pc, #504]	@ (8006fac <_printf_float+0x2d8>)
 8006db2:	e7d4      	b.n	8006d5e <_printf_float+0x8a>
 8006db4:	6863      	ldr	r3, [r4, #4]
 8006db6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006dba:	9206      	str	r2, [sp, #24]
 8006dbc:	1c5a      	adds	r2, r3, #1
 8006dbe:	d13b      	bne.n	8006e38 <_printf_float+0x164>
 8006dc0:	2306      	movs	r3, #6
 8006dc2:	6063      	str	r3, [r4, #4]
 8006dc4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006dc8:	2300      	movs	r3, #0
 8006dca:	6022      	str	r2, [r4, #0]
 8006dcc:	9303      	str	r3, [sp, #12]
 8006dce:	ab0a      	add	r3, sp, #40	@ 0x28
 8006dd0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006dd4:	ab09      	add	r3, sp, #36	@ 0x24
 8006dd6:	9300      	str	r3, [sp, #0]
 8006dd8:	6861      	ldr	r1, [r4, #4]
 8006dda:	ec49 8b10 	vmov	d0, r8, r9
 8006dde:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006de2:	4628      	mov	r0, r5
 8006de4:	f7ff fed6 	bl	8006b94 <__cvt>
 8006de8:	9b06      	ldr	r3, [sp, #24]
 8006dea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006dec:	2b47      	cmp	r3, #71	@ 0x47
 8006dee:	4680      	mov	r8, r0
 8006df0:	d129      	bne.n	8006e46 <_printf_float+0x172>
 8006df2:	1cc8      	adds	r0, r1, #3
 8006df4:	db02      	blt.n	8006dfc <_printf_float+0x128>
 8006df6:	6863      	ldr	r3, [r4, #4]
 8006df8:	4299      	cmp	r1, r3
 8006dfa:	dd41      	ble.n	8006e80 <_printf_float+0x1ac>
 8006dfc:	f1aa 0a02 	sub.w	sl, sl, #2
 8006e00:	fa5f fa8a 	uxtb.w	sl, sl
 8006e04:	3901      	subs	r1, #1
 8006e06:	4652      	mov	r2, sl
 8006e08:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006e0c:	9109      	str	r1, [sp, #36]	@ 0x24
 8006e0e:	f7ff ff26 	bl	8006c5e <__exponent>
 8006e12:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006e14:	1813      	adds	r3, r2, r0
 8006e16:	2a01      	cmp	r2, #1
 8006e18:	4681      	mov	r9, r0
 8006e1a:	6123      	str	r3, [r4, #16]
 8006e1c:	dc02      	bgt.n	8006e24 <_printf_float+0x150>
 8006e1e:	6822      	ldr	r2, [r4, #0]
 8006e20:	07d2      	lsls	r2, r2, #31
 8006e22:	d501      	bpl.n	8006e28 <_printf_float+0x154>
 8006e24:	3301      	adds	r3, #1
 8006e26:	6123      	str	r3, [r4, #16]
 8006e28:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d0a2      	beq.n	8006d76 <_printf_float+0xa2>
 8006e30:	232d      	movs	r3, #45	@ 0x2d
 8006e32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e36:	e79e      	b.n	8006d76 <_printf_float+0xa2>
 8006e38:	9a06      	ldr	r2, [sp, #24]
 8006e3a:	2a47      	cmp	r2, #71	@ 0x47
 8006e3c:	d1c2      	bne.n	8006dc4 <_printf_float+0xf0>
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d1c0      	bne.n	8006dc4 <_printf_float+0xf0>
 8006e42:	2301      	movs	r3, #1
 8006e44:	e7bd      	b.n	8006dc2 <_printf_float+0xee>
 8006e46:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006e4a:	d9db      	bls.n	8006e04 <_printf_float+0x130>
 8006e4c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006e50:	d118      	bne.n	8006e84 <_printf_float+0x1b0>
 8006e52:	2900      	cmp	r1, #0
 8006e54:	6863      	ldr	r3, [r4, #4]
 8006e56:	dd0b      	ble.n	8006e70 <_printf_float+0x19c>
 8006e58:	6121      	str	r1, [r4, #16]
 8006e5a:	b913      	cbnz	r3, 8006e62 <_printf_float+0x18e>
 8006e5c:	6822      	ldr	r2, [r4, #0]
 8006e5e:	07d0      	lsls	r0, r2, #31
 8006e60:	d502      	bpl.n	8006e68 <_printf_float+0x194>
 8006e62:	3301      	adds	r3, #1
 8006e64:	440b      	add	r3, r1
 8006e66:	6123      	str	r3, [r4, #16]
 8006e68:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006e6a:	f04f 0900 	mov.w	r9, #0
 8006e6e:	e7db      	b.n	8006e28 <_printf_float+0x154>
 8006e70:	b913      	cbnz	r3, 8006e78 <_printf_float+0x1a4>
 8006e72:	6822      	ldr	r2, [r4, #0]
 8006e74:	07d2      	lsls	r2, r2, #31
 8006e76:	d501      	bpl.n	8006e7c <_printf_float+0x1a8>
 8006e78:	3302      	adds	r3, #2
 8006e7a:	e7f4      	b.n	8006e66 <_printf_float+0x192>
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e7f2      	b.n	8006e66 <_printf_float+0x192>
 8006e80:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006e84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e86:	4299      	cmp	r1, r3
 8006e88:	db05      	blt.n	8006e96 <_printf_float+0x1c2>
 8006e8a:	6823      	ldr	r3, [r4, #0]
 8006e8c:	6121      	str	r1, [r4, #16]
 8006e8e:	07d8      	lsls	r0, r3, #31
 8006e90:	d5ea      	bpl.n	8006e68 <_printf_float+0x194>
 8006e92:	1c4b      	adds	r3, r1, #1
 8006e94:	e7e7      	b.n	8006e66 <_printf_float+0x192>
 8006e96:	2900      	cmp	r1, #0
 8006e98:	bfd4      	ite	le
 8006e9a:	f1c1 0202 	rsble	r2, r1, #2
 8006e9e:	2201      	movgt	r2, #1
 8006ea0:	4413      	add	r3, r2
 8006ea2:	e7e0      	b.n	8006e66 <_printf_float+0x192>
 8006ea4:	6823      	ldr	r3, [r4, #0]
 8006ea6:	055a      	lsls	r2, r3, #21
 8006ea8:	d407      	bmi.n	8006eba <_printf_float+0x1e6>
 8006eaa:	6923      	ldr	r3, [r4, #16]
 8006eac:	4642      	mov	r2, r8
 8006eae:	4631      	mov	r1, r6
 8006eb0:	4628      	mov	r0, r5
 8006eb2:	47b8      	blx	r7
 8006eb4:	3001      	adds	r0, #1
 8006eb6:	d12b      	bne.n	8006f10 <_printf_float+0x23c>
 8006eb8:	e767      	b.n	8006d8a <_printf_float+0xb6>
 8006eba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006ebe:	f240 80dd 	bls.w	800707c <_printf_float+0x3a8>
 8006ec2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	2300      	movs	r3, #0
 8006eca:	f7f9 fdfd 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ece:	2800      	cmp	r0, #0
 8006ed0:	d033      	beq.n	8006f3a <_printf_float+0x266>
 8006ed2:	4a37      	ldr	r2, [pc, #220]	@ (8006fb0 <_printf_float+0x2dc>)
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	4631      	mov	r1, r6
 8006ed8:	4628      	mov	r0, r5
 8006eda:	47b8      	blx	r7
 8006edc:	3001      	adds	r0, #1
 8006ede:	f43f af54 	beq.w	8006d8a <_printf_float+0xb6>
 8006ee2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006ee6:	4543      	cmp	r3, r8
 8006ee8:	db02      	blt.n	8006ef0 <_printf_float+0x21c>
 8006eea:	6823      	ldr	r3, [r4, #0]
 8006eec:	07d8      	lsls	r0, r3, #31
 8006eee:	d50f      	bpl.n	8006f10 <_printf_float+0x23c>
 8006ef0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ef4:	4631      	mov	r1, r6
 8006ef6:	4628      	mov	r0, r5
 8006ef8:	47b8      	blx	r7
 8006efa:	3001      	adds	r0, #1
 8006efc:	f43f af45 	beq.w	8006d8a <_printf_float+0xb6>
 8006f00:	f04f 0900 	mov.w	r9, #0
 8006f04:	f108 38ff 	add.w	r8, r8, #4294967295
 8006f08:	f104 0a1a 	add.w	sl, r4, #26
 8006f0c:	45c8      	cmp	r8, r9
 8006f0e:	dc09      	bgt.n	8006f24 <_printf_float+0x250>
 8006f10:	6823      	ldr	r3, [r4, #0]
 8006f12:	079b      	lsls	r3, r3, #30
 8006f14:	f100 8103 	bmi.w	800711e <_printf_float+0x44a>
 8006f18:	68e0      	ldr	r0, [r4, #12]
 8006f1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f1c:	4298      	cmp	r0, r3
 8006f1e:	bfb8      	it	lt
 8006f20:	4618      	movlt	r0, r3
 8006f22:	e734      	b.n	8006d8e <_printf_float+0xba>
 8006f24:	2301      	movs	r3, #1
 8006f26:	4652      	mov	r2, sl
 8006f28:	4631      	mov	r1, r6
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	47b8      	blx	r7
 8006f2e:	3001      	adds	r0, #1
 8006f30:	f43f af2b 	beq.w	8006d8a <_printf_float+0xb6>
 8006f34:	f109 0901 	add.w	r9, r9, #1
 8006f38:	e7e8      	b.n	8006f0c <_printf_float+0x238>
 8006f3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	dc39      	bgt.n	8006fb4 <_printf_float+0x2e0>
 8006f40:	4a1b      	ldr	r2, [pc, #108]	@ (8006fb0 <_printf_float+0x2dc>)
 8006f42:	2301      	movs	r3, #1
 8006f44:	4631      	mov	r1, r6
 8006f46:	4628      	mov	r0, r5
 8006f48:	47b8      	blx	r7
 8006f4a:	3001      	adds	r0, #1
 8006f4c:	f43f af1d 	beq.w	8006d8a <_printf_float+0xb6>
 8006f50:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006f54:	ea59 0303 	orrs.w	r3, r9, r3
 8006f58:	d102      	bne.n	8006f60 <_printf_float+0x28c>
 8006f5a:	6823      	ldr	r3, [r4, #0]
 8006f5c:	07d9      	lsls	r1, r3, #31
 8006f5e:	d5d7      	bpl.n	8006f10 <_printf_float+0x23c>
 8006f60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f64:	4631      	mov	r1, r6
 8006f66:	4628      	mov	r0, r5
 8006f68:	47b8      	blx	r7
 8006f6a:	3001      	adds	r0, #1
 8006f6c:	f43f af0d 	beq.w	8006d8a <_printf_float+0xb6>
 8006f70:	f04f 0a00 	mov.w	sl, #0
 8006f74:	f104 0b1a 	add.w	fp, r4, #26
 8006f78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f7a:	425b      	negs	r3, r3
 8006f7c:	4553      	cmp	r3, sl
 8006f7e:	dc01      	bgt.n	8006f84 <_printf_float+0x2b0>
 8006f80:	464b      	mov	r3, r9
 8006f82:	e793      	b.n	8006eac <_printf_float+0x1d8>
 8006f84:	2301      	movs	r3, #1
 8006f86:	465a      	mov	r2, fp
 8006f88:	4631      	mov	r1, r6
 8006f8a:	4628      	mov	r0, r5
 8006f8c:	47b8      	blx	r7
 8006f8e:	3001      	adds	r0, #1
 8006f90:	f43f aefb 	beq.w	8006d8a <_printf_float+0xb6>
 8006f94:	f10a 0a01 	add.w	sl, sl, #1
 8006f98:	e7ee      	b.n	8006f78 <_printf_float+0x2a4>
 8006f9a:	bf00      	nop
 8006f9c:	7fefffff 	.word	0x7fefffff
 8006fa0:	0800a0e0 	.word	0x0800a0e0
 8006fa4:	0800a0e4 	.word	0x0800a0e4
 8006fa8:	0800a0e8 	.word	0x0800a0e8
 8006fac:	0800a0ec 	.word	0x0800a0ec
 8006fb0:	0800a0f0 	.word	0x0800a0f0
 8006fb4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006fb6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006fba:	4553      	cmp	r3, sl
 8006fbc:	bfa8      	it	ge
 8006fbe:	4653      	movge	r3, sl
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	4699      	mov	r9, r3
 8006fc4:	dc36      	bgt.n	8007034 <_printf_float+0x360>
 8006fc6:	f04f 0b00 	mov.w	fp, #0
 8006fca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006fce:	f104 021a 	add.w	r2, r4, #26
 8006fd2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006fd4:	9306      	str	r3, [sp, #24]
 8006fd6:	eba3 0309 	sub.w	r3, r3, r9
 8006fda:	455b      	cmp	r3, fp
 8006fdc:	dc31      	bgt.n	8007042 <_printf_float+0x36e>
 8006fde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fe0:	459a      	cmp	sl, r3
 8006fe2:	dc3a      	bgt.n	800705a <_printf_float+0x386>
 8006fe4:	6823      	ldr	r3, [r4, #0]
 8006fe6:	07da      	lsls	r2, r3, #31
 8006fe8:	d437      	bmi.n	800705a <_printf_float+0x386>
 8006fea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fec:	ebaa 0903 	sub.w	r9, sl, r3
 8006ff0:	9b06      	ldr	r3, [sp, #24]
 8006ff2:	ebaa 0303 	sub.w	r3, sl, r3
 8006ff6:	4599      	cmp	r9, r3
 8006ff8:	bfa8      	it	ge
 8006ffa:	4699      	movge	r9, r3
 8006ffc:	f1b9 0f00 	cmp.w	r9, #0
 8007000:	dc33      	bgt.n	800706a <_printf_float+0x396>
 8007002:	f04f 0800 	mov.w	r8, #0
 8007006:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800700a:	f104 0b1a 	add.w	fp, r4, #26
 800700e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007010:	ebaa 0303 	sub.w	r3, sl, r3
 8007014:	eba3 0309 	sub.w	r3, r3, r9
 8007018:	4543      	cmp	r3, r8
 800701a:	f77f af79 	ble.w	8006f10 <_printf_float+0x23c>
 800701e:	2301      	movs	r3, #1
 8007020:	465a      	mov	r2, fp
 8007022:	4631      	mov	r1, r6
 8007024:	4628      	mov	r0, r5
 8007026:	47b8      	blx	r7
 8007028:	3001      	adds	r0, #1
 800702a:	f43f aeae 	beq.w	8006d8a <_printf_float+0xb6>
 800702e:	f108 0801 	add.w	r8, r8, #1
 8007032:	e7ec      	b.n	800700e <_printf_float+0x33a>
 8007034:	4642      	mov	r2, r8
 8007036:	4631      	mov	r1, r6
 8007038:	4628      	mov	r0, r5
 800703a:	47b8      	blx	r7
 800703c:	3001      	adds	r0, #1
 800703e:	d1c2      	bne.n	8006fc6 <_printf_float+0x2f2>
 8007040:	e6a3      	b.n	8006d8a <_printf_float+0xb6>
 8007042:	2301      	movs	r3, #1
 8007044:	4631      	mov	r1, r6
 8007046:	4628      	mov	r0, r5
 8007048:	9206      	str	r2, [sp, #24]
 800704a:	47b8      	blx	r7
 800704c:	3001      	adds	r0, #1
 800704e:	f43f ae9c 	beq.w	8006d8a <_printf_float+0xb6>
 8007052:	9a06      	ldr	r2, [sp, #24]
 8007054:	f10b 0b01 	add.w	fp, fp, #1
 8007058:	e7bb      	b.n	8006fd2 <_printf_float+0x2fe>
 800705a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800705e:	4631      	mov	r1, r6
 8007060:	4628      	mov	r0, r5
 8007062:	47b8      	blx	r7
 8007064:	3001      	adds	r0, #1
 8007066:	d1c0      	bne.n	8006fea <_printf_float+0x316>
 8007068:	e68f      	b.n	8006d8a <_printf_float+0xb6>
 800706a:	9a06      	ldr	r2, [sp, #24]
 800706c:	464b      	mov	r3, r9
 800706e:	4442      	add	r2, r8
 8007070:	4631      	mov	r1, r6
 8007072:	4628      	mov	r0, r5
 8007074:	47b8      	blx	r7
 8007076:	3001      	adds	r0, #1
 8007078:	d1c3      	bne.n	8007002 <_printf_float+0x32e>
 800707a:	e686      	b.n	8006d8a <_printf_float+0xb6>
 800707c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007080:	f1ba 0f01 	cmp.w	sl, #1
 8007084:	dc01      	bgt.n	800708a <_printf_float+0x3b6>
 8007086:	07db      	lsls	r3, r3, #31
 8007088:	d536      	bpl.n	80070f8 <_printf_float+0x424>
 800708a:	2301      	movs	r3, #1
 800708c:	4642      	mov	r2, r8
 800708e:	4631      	mov	r1, r6
 8007090:	4628      	mov	r0, r5
 8007092:	47b8      	blx	r7
 8007094:	3001      	adds	r0, #1
 8007096:	f43f ae78 	beq.w	8006d8a <_printf_float+0xb6>
 800709a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800709e:	4631      	mov	r1, r6
 80070a0:	4628      	mov	r0, r5
 80070a2:	47b8      	blx	r7
 80070a4:	3001      	adds	r0, #1
 80070a6:	f43f ae70 	beq.w	8006d8a <_printf_float+0xb6>
 80070aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80070ae:	2200      	movs	r2, #0
 80070b0:	2300      	movs	r3, #0
 80070b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070b6:	f7f9 fd07 	bl	8000ac8 <__aeabi_dcmpeq>
 80070ba:	b9c0      	cbnz	r0, 80070ee <_printf_float+0x41a>
 80070bc:	4653      	mov	r3, sl
 80070be:	f108 0201 	add.w	r2, r8, #1
 80070c2:	4631      	mov	r1, r6
 80070c4:	4628      	mov	r0, r5
 80070c6:	47b8      	blx	r7
 80070c8:	3001      	adds	r0, #1
 80070ca:	d10c      	bne.n	80070e6 <_printf_float+0x412>
 80070cc:	e65d      	b.n	8006d8a <_printf_float+0xb6>
 80070ce:	2301      	movs	r3, #1
 80070d0:	465a      	mov	r2, fp
 80070d2:	4631      	mov	r1, r6
 80070d4:	4628      	mov	r0, r5
 80070d6:	47b8      	blx	r7
 80070d8:	3001      	adds	r0, #1
 80070da:	f43f ae56 	beq.w	8006d8a <_printf_float+0xb6>
 80070de:	f108 0801 	add.w	r8, r8, #1
 80070e2:	45d0      	cmp	r8, sl
 80070e4:	dbf3      	blt.n	80070ce <_printf_float+0x3fa>
 80070e6:	464b      	mov	r3, r9
 80070e8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80070ec:	e6df      	b.n	8006eae <_printf_float+0x1da>
 80070ee:	f04f 0800 	mov.w	r8, #0
 80070f2:	f104 0b1a 	add.w	fp, r4, #26
 80070f6:	e7f4      	b.n	80070e2 <_printf_float+0x40e>
 80070f8:	2301      	movs	r3, #1
 80070fa:	4642      	mov	r2, r8
 80070fc:	e7e1      	b.n	80070c2 <_printf_float+0x3ee>
 80070fe:	2301      	movs	r3, #1
 8007100:	464a      	mov	r2, r9
 8007102:	4631      	mov	r1, r6
 8007104:	4628      	mov	r0, r5
 8007106:	47b8      	blx	r7
 8007108:	3001      	adds	r0, #1
 800710a:	f43f ae3e 	beq.w	8006d8a <_printf_float+0xb6>
 800710e:	f108 0801 	add.w	r8, r8, #1
 8007112:	68e3      	ldr	r3, [r4, #12]
 8007114:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007116:	1a5b      	subs	r3, r3, r1
 8007118:	4543      	cmp	r3, r8
 800711a:	dcf0      	bgt.n	80070fe <_printf_float+0x42a>
 800711c:	e6fc      	b.n	8006f18 <_printf_float+0x244>
 800711e:	f04f 0800 	mov.w	r8, #0
 8007122:	f104 0919 	add.w	r9, r4, #25
 8007126:	e7f4      	b.n	8007112 <_printf_float+0x43e>

08007128 <_printf_common>:
 8007128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800712c:	4616      	mov	r6, r2
 800712e:	4698      	mov	r8, r3
 8007130:	688a      	ldr	r2, [r1, #8]
 8007132:	690b      	ldr	r3, [r1, #16]
 8007134:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007138:	4293      	cmp	r3, r2
 800713a:	bfb8      	it	lt
 800713c:	4613      	movlt	r3, r2
 800713e:	6033      	str	r3, [r6, #0]
 8007140:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007144:	4607      	mov	r7, r0
 8007146:	460c      	mov	r4, r1
 8007148:	b10a      	cbz	r2, 800714e <_printf_common+0x26>
 800714a:	3301      	adds	r3, #1
 800714c:	6033      	str	r3, [r6, #0]
 800714e:	6823      	ldr	r3, [r4, #0]
 8007150:	0699      	lsls	r1, r3, #26
 8007152:	bf42      	ittt	mi
 8007154:	6833      	ldrmi	r3, [r6, #0]
 8007156:	3302      	addmi	r3, #2
 8007158:	6033      	strmi	r3, [r6, #0]
 800715a:	6825      	ldr	r5, [r4, #0]
 800715c:	f015 0506 	ands.w	r5, r5, #6
 8007160:	d106      	bne.n	8007170 <_printf_common+0x48>
 8007162:	f104 0a19 	add.w	sl, r4, #25
 8007166:	68e3      	ldr	r3, [r4, #12]
 8007168:	6832      	ldr	r2, [r6, #0]
 800716a:	1a9b      	subs	r3, r3, r2
 800716c:	42ab      	cmp	r3, r5
 800716e:	dc26      	bgt.n	80071be <_printf_common+0x96>
 8007170:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007174:	6822      	ldr	r2, [r4, #0]
 8007176:	3b00      	subs	r3, #0
 8007178:	bf18      	it	ne
 800717a:	2301      	movne	r3, #1
 800717c:	0692      	lsls	r2, r2, #26
 800717e:	d42b      	bmi.n	80071d8 <_printf_common+0xb0>
 8007180:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007184:	4641      	mov	r1, r8
 8007186:	4638      	mov	r0, r7
 8007188:	47c8      	blx	r9
 800718a:	3001      	adds	r0, #1
 800718c:	d01e      	beq.n	80071cc <_printf_common+0xa4>
 800718e:	6823      	ldr	r3, [r4, #0]
 8007190:	6922      	ldr	r2, [r4, #16]
 8007192:	f003 0306 	and.w	r3, r3, #6
 8007196:	2b04      	cmp	r3, #4
 8007198:	bf02      	ittt	eq
 800719a:	68e5      	ldreq	r5, [r4, #12]
 800719c:	6833      	ldreq	r3, [r6, #0]
 800719e:	1aed      	subeq	r5, r5, r3
 80071a0:	68a3      	ldr	r3, [r4, #8]
 80071a2:	bf0c      	ite	eq
 80071a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071a8:	2500      	movne	r5, #0
 80071aa:	4293      	cmp	r3, r2
 80071ac:	bfc4      	itt	gt
 80071ae:	1a9b      	subgt	r3, r3, r2
 80071b0:	18ed      	addgt	r5, r5, r3
 80071b2:	2600      	movs	r6, #0
 80071b4:	341a      	adds	r4, #26
 80071b6:	42b5      	cmp	r5, r6
 80071b8:	d11a      	bne.n	80071f0 <_printf_common+0xc8>
 80071ba:	2000      	movs	r0, #0
 80071bc:	e008      	b.n	80071d0 <_printf_common+0xa8>
 80071be:	2301      	movs	r3, #1
 80071c0:	4652      	mov	r2, sl
 80071c2:	4641      	mov	r1, r8
 80071c4:	4638      	mov	r0, r7
 80071c6:	47c8      	blx	r9
 80071c8:	3001      	adds	r0, #1
 80071ca:	d103      	bne.n	80071d4 <_printf_common+0xac>
 80071cc:	f04f 30ff 	mov.w	r0, #4294967295
 80071d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071d4:	3501      	adds	r5, #1
 80071d6:	e7c6      	b.n	8007166 <_printf_common+0x3e>
 80071d8:	18e1      	adds	r1, r4, r3
 80071da:	1c5a      	adds	r2, r3, #1
 80071dc:	2030      	movs	r0, #48	@ 0x30
 80071de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80071e2:	4422      	add	r2, r4
 80071e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80071e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80071ec:	3302      	adds	r3, #2
 80071ee:	e7c7      	b.n	8007180 <_printf_common+0x58>
 80071f0:	2301      	movs	r3, #1
 80071f2:	4622      	mov	r2, r4
 80071f4:	4641      	mov	r1, r8
 80071f6:	4638      	mov	r0, r7
 80071f8:	47c8      	blx	r9
 80071fa:	3001      	adds	r0, #1
 80071fc:	d0e6      	beq.n	80071cc <_printf_common+0xa4>
 80071fe:	3601      	adds	r6, #1
 8007200:	e7d9      	b.n	80071b6 <_printf_common+0x8e>
	...

08007204 <_printf_i>:
 8007204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007208:	7e0f      	ldrb	r7, [r1, #24]
 800720a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800720c:	2f78      	cmp	r7, #120	@ 0x78
 800720e:	4691      	mov	r9, r2
 8007210:	4680      	mov	r8, r0
 8007212:	460c      	mov	r4, r1
 8007214:	469a      	mov	sl, r3
 8007216:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800721a:	d807      	bhi.n	800722c <_printf_i+0x28>
 800721c:	2f62      	cmp	r7, #98	@ 0x62
 800721e:	d80a      	bhi.n	8007236 <_printf_i+0x32>
 8007220:	2f00      	cmp	r7, #0
 8007222:	f000 80d2 	beq.w	80073ca <_printf_i+0x1c6>
 8007226:	2f58      	cmp	r7, #88	@ 0x58
 8007228:	f000 80b9 	beq.w	800739e <_printf_i+0x19a>
 800722c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007230:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007234:	e03a      	b.n	80072ac <_printf_i+0xa8>
 8007236:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800723a:	2b15      	cmp	r3, #21
 800723c:	d8f6      	bhi.n	800722c <_printf_i+0x28>
 800723e:	a101      	add	r1, pc, #4	@ (adr r1, 8007244 <_printf_i+0x40>)
 8007240:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007244:	0800729d 	.word	0x0800729d
 8007248:	080072b1 	.word	0x080072b1
 800724c:	0800722d 	.word	0x0800722d
 8007250:	0800722d 	.word	0x0800722d
 8007254:	0800722d 	.word	0x0800722d
 8007258:	0800722d 	.word	0x0800722d
 800725c:	080072b1 	.word	0x080072b1
 8007260:	0800722d 	.word	0x0800722d
 8007264:	0800722d 	.word	0x0800722d
 8007268:	0800722d 	.word	0x0800722d
 800726c:	0800722d 	.word	0x0800722d
 8007270:	080073b1 	.word	0x080073b1
 8007274:	080072db 	.word	0x080072db
 8007278:	0800736b 	.word	0x0800736b
 800727c:	0800722d 	.word	0x0800722d
 8007280:	0800722d 	.word	0x0800722d
 8007284:	080073d3 	.word	0x080073d3
 8007288:	0800722d 	.word	0x0800722d
 800728c:	080072db 	.word	0x080072db
 8007290:	0800722d 	.word	0x0800722d
 8007294:	0800722d 	.word	0x0800722d
 8007298:	08007373 	.word	0x08007373
 800729c:	6833      	ldr	r3, [r6, #0]
 800729e:	1d1a      	adds	r2, r3, #4
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	6032      	str	r2, [r6, #0]
 80072a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80072a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80072ac:	2301      	movs	r3, #1
 80072ae:	e09d      	b.n	80073ec <_printf_i+0x1e8>
 80072b0:	6833      	ldr	r3, [r6, #0]
 80072b2:	6820      	ldr	r0, [r4, #0]
 80072b4:	1d19      	adds	r1, r3, #4
 80072b6:	6031      	str	r1, [r6, #0]
 80072b8:	0606      	lsls	r6, r0, #24
 80072ba:	d501      	bpl.n	80072c0 <_printf_i+0xbc>
 80072bc:	681d      	ldr	r5, [r3, #0]
 80072be:	e003      	b.n	80072c8 <_printf_i+0xc4>
 80072c0:	0645      	lsls	r5, r0, #25
 80072c2:	d5fb      	bpl.n	80072bc <_printf_i+0xb8>
 80072c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80072c8:	2d00      	cmp	r5, #0
 80072ca:	da03      	bge.n	80072d4 <_printf_i+0xd0>
 80072cc:	232d      	movs	r3, #45	@ 0x2d
 80072ce:	426d      	negs	r5, r5
 80072d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072d4:	4859      	ldr	r0, [pc, #356]	@ (800743c <_printf_i+0x238>)
 80072d6:	230a      	movs	r3, #10
 80072d8:	e011      	b.n	80072fe <_printf_i+0xfa>
 80072da:	6821      	ldr	r1, [r4, #0]
 80072dc:	6833      	ldr	r3, [r6, #0]
 80072de:	0608      	lsls	r0, r1, #24
 80072e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80072e4:	d402      	bmi.n	80072ec <_printf_i+0xe8>
 80072e6:	0649      	lsls	r1, r1, #25
 80072e8:	bf48      	it	mi
 80072ea:	b2ad      	uxthmi	r5, r5
 80072ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80072ee:	4853      	ldr	r0, [pc, #332]	@ (800743c <_printf_i+0x238>)
 80072f0:	6033      	str	r3, [r6, #0]
 80072f2:	bf14      	ite	ne
 80072f4:	230a      	movne	r3, #10
 80072f6:	2308      	moveq	r3, #8
 80072f8:	2100      	movs	r1, #0
 80072fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80072fe:	6866      	ldr	r6, [r4, #4]
 8007300:	60a6      	str	r6, [r4, #8]
 8007302:	2e00      	cmp	r6, #0
 8007304:	bfa2      	ittt	ge
 8007306:	6821      	ldrge	r1, [r4, #0]
 8007308:	f021 0104 	bicge.w	r1, r1, #4
 800730c:	6021      	strge	r1, [r4, #0]
 800730e:	b90d      	cbnz	r5, 8007314 <_printf_i+0x110>
 8007310:	2e00      	cmp	r6, #0
 8007312:	d04b      	beq.n	80073ac <_printf_i+0x1a8>
 8007314:	4616      	mov	r6, r2
 8007316:	fbb5 f1f3 	udiv	r1, r5, r3
 800731a:	fb03 5711 	mls	r7, r3, r1, r5
 800731e:	5dc7      	ldrb	r7, [r0, r7]
 8007320:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007324:	462f      	mov	r7, r5
 8007326:	42bb      	cmp	r3, r7
 8007328:	460d      	mov	r5, r1
 800732a:	d9f4      	bls.n	8007316 <_printf_i+0x112>
 800732c:	2b08      	cmp	r3, #8
 800732e:	d10b      	bne.n	8007348 <_printf_i+0x144>
 8007330:	6823      	ldr	r3, [r4, #0]
 8007332:	07df      	lsls	r7, r3, #31
 8007334:	d508      	bpl.n	8007348 <_printf_i+0x144>
 8007336:	6923      	ldr	r3, [r4, #16]
 8007338:	6861      	ldr	r1, [r4, #4]
 800733a:	4299      	cmp	r1, r3
 800733c:	bfde      	ittt	le
 800733e:	2330      	movle	r3, #48	@ 0x30
 8007340:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007344:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007348:	1b92      	subs	r2, r2, r6
 800734a:	6122      	str	r2, [r4, #16]
 800734c:	f8cd a000 	str.w	sl, [sp]
 8007350:	464b      	mov	r3, r9
 8007352:	aa03      	add	r2, sp, #12
 8007354:	4621      	mov	r1, r4
 8007356:	4640      	mov	r0, r8
 8007358:	f7ff fee6 	bl	8007128 <_printf_common>
 800735c:	3001      	adds	r0, #1
 800735e:	d14a      	bne.n	80073f6 <_printf_i+0x1f2>
 8007360:	f04f 30ff 	mov.w	r0, #4294967295
 8007364:	b004      	add	sp, #16
 8007366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800736a:	6823      	ldr	r3, [r4, #0]
 800736c:	f043 0320 	orr.w	r3, r3, #32
 8007370:	6023      	str	r3, [r4, #0]
 8007372:	4833      	ldr	r0, [pc, #204]	@ (8007440 <_printf_i+0x23c>)
 8007374:	2778      	movs	r7, #120	@ 0x78
 8007376:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800737a:	6823      	ldr	r3, [r4, #0]
 800737c:	6831      	ldr	r1, [r6, #0]
 800737e:	061f      	lsls	r7, r3, #24
 8007380:	f851 5b04 	ldr.w	r5, [r1], #4
 8007384:	d402      	bmi.n	800738c <_printf_i+0x188>
 8007386:	065f      	lsls	r7, r3, #25
 8007388:	bf48      	it	mi
 800738a:	b2ad      	uxthmi	r5, r5
 800738c:	6031      	str	r1, [r6, #0]
 800738e:	07d9      	lsls	r1, r3, #31
 8007390:	bf44      	itt	mi
 8007392:	f043 0320 	orrmi.w	r3, r3, #32
 8007396:	6023      	strmi	r3, [r4, #0]
 8007398:	b11d      	cbz	r5, 80073a2 <_printf_i+0x19e>
 800739a:	2310      	movs	r3, #16
 800739c:	e7ac      	b.n	80072f8 <_printf_i+0xf4>
 800739e:	4827      	ldr	r0, [pc, #156]	@ (800743c <_printf_i+0x238>)
 80073a0:	e7e9      	b.n	8007376 <_printf_i+0x172>
 80073a2:	6823      	ldr	r3, [r4, #0]
 80073a4:	f023 0320 	bic.w	r3, r3, #32
 80073a8:	6023      	str	r3, [r4, #0]
 80073aa:	e7f6      	b.n	800739a <_printf_i+0x196>
 80073ac:	4616      	mov	r6, r2
 80073ae:	e7bd      	b.n	800732c <_printf_i+0x128>
 80073b0:	6833      	ldr	r3, [r6, #0]
 80073b2:	6825      	ldr	r5, [r4, #0]
 80073b4:	6961      	ldr	r1, [r4, #20]
 80073b6:	1d18      	adds	r0, r3, #4
 80073b8:	6030      	str	r0, [r6, #0]
 80073ba:	062e      	lsls	r6, r5, #24
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	d501      	bpl.n	80073c4 <_printf_i+0x1c0>
 80073c0:	6019      	str	r1, [r3, #0]
 80073c2:	e002      	b.n	80073ca <_printf_i+0x1c6>
 80073c4:	0668      	lsls	r0, r5, #25
 80073c6:	d5fb      	bpl.n	80073c0 <_printf_i+0x1bc>
 80073c8:	8019      	strh	r1, [r3, #0]
 80073ca:	2300      	movs	r3, #0
 80073cc:	6123      	str	r3, [r4, #16]
 80073ce:	4616      	mov	r6, r2
 80073d0:	e7bc      	b.n	800734c <_printf_i+0x148>
 80073d2:	6833      	ldr	r3, [r6, #0]
 80073d4:	1d1a      	adds	r2, r3, #4
 80073d6:	6032      	str	r2, [r6, #0]
 80073d8:	681e      	ldr	r6, [r3, #0]
 80073da:	6862      	ldr	r2, [r4, #4]
 80073dc:	2100      	movs	r1, #0
 80073de:	4630      	mov	r0, r6
 80073e0:	f7f8 fef6 	bl	80001d0 <memchr>
 80073e4:	b108      	cbz	r0, 80073ea <_printf_i+0x1e6>
 80073e6:	1b80      	subs	r0, r0, r6
 80073e8:	6060      	str	r0, [r4, #4]
 80073ea:	6863      	ldr	r3, [r4, #4]
 80073ec:	6123      	str	r3, [r4, #16]
 80073ee:	2300      	movs	r3, #0
 80073f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073f4:	e7aa      	b.n	800734c <_printf_i+0x148>
 80073f6:	6923      	ldr	r3, [r4, #16]
 80073f8:	4632      	mov	r2, r6
 80073fa:	4649      	mov	r1, r9
 80073fc:	4640      	mov	r0, r8
 80073fe:	47d0      	blx	sl
 8007400:	3001      	adds	r0, #1
 8007402:	d0ad      	beq.n	8007360 <_printf_i+0x15c>
 8007404:	6823      	ldr	r3, [r4, #0]
 8007406:	079b      	lsls	r3, r3, #30
 8007408:	d413      	bmi.n	8007432 <_printf_i+0x22e>
 800740a:	68e0      	ldr	r0, [r4, #12]
 800740c:	9b03      	ldr	r3, [sp, #12]
 800740e:	4298      	cmp	r0, r3
 8007410:	bfb8      	it	lt
 8007412:	4618      	movlt	r0, r3
 8007414:	e7a6      	b.n	8007364 <_printf_i+0x160>
 8007416:	2301      	movs	r3, #1
 8007418:	4632      	mov	r2, r6
 800741a:	4649      	mov	r1, r9
 800741c:	4640      	mov	r0, r8
 800741e:	47d0      	blx	sl
 8007420:	3001      	adds	r0, #1
 8007422:	d09d      	beq.n	8007360 <_printf_i+0x15c>
 8007424:	3501      	adds	r5, #1
 8007426:	68e3      	ldr	r3, [r4, #12]
 8007428:	9903      	ldr	r1, [sp, #12]
 800742a:	1a5b      	subs	r3, r3, r1
 800742c:	42ab      	cmp	r3, r5
 800742e:	dcf2      	bgt.n	8007416 <_printf_i+0x212>
 8007430:	e7eb      	b.n	800740a <_printf_i+0x206>
 8007432:	2500      	movs	r5, #0
 8007434:	f104 0619 	add.w	r6, r4, #25
 8007438:	e7f5      	b.n	8007426 <_printf_i+0x222>
 800743a:	bf00      	nop
 800743c:	0800a0f2 	.word	0x0800a0f2
 8007440:	0800a103 	.word	0x0800a103

08007444 <std>:
 8007444:	2300      	movs	r3, #0
 8007446:	b510      	push	{r4, lr}
 8007448:	4604      	mov	r4, r0
 800744a:	e9c0 3300 	strd	r3, r3, [r0]
 800744e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007452:	6083      	str	r3, [r0, #8]
 8007454:	8181      	strh	r1, [r0, #12]
 8007456:	6643      	str	r3, [r0, #100]	@ 0x64
 8007458:	81c2      	strh	r2, [r0, #14]
 800745a:	6183      	str	r3, [r0, #24]
 800745c:	4619      	mov	r1, r3
 800745e:	2208      	movs	r2, #8
 8007460:	305c      	adds	r0, #92	@ 0x5c
 8007462:	f000 f9f9 	bl	8007858 <memset>
 8007466:	4b0d      	ldr	r3, [pc, #52]	@ (800749c <std+0x58>)
 8007468:	6263      	str	r3, [r4, #36]	@ 0x24
 800746a:	4b0d      	ldr	r3, [pc, #52]	@ (80074a0 <std+0x5c>)
 800746c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800746e:	4b0d      	ldr	r3, [pc, #52]	@ (80074a4 <std+0x60>)
 8007470:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007472:	4b0d      	ldr	r3, [pc, #52]	@ (80074a8 <std+0x64>)
 8007474:	6323      	str	r3, [r4, #48]	@ 0x30
 8007476:	4b0d      	ldr	r3, [pc, #52]	@ (80074ac <std+0x68>)
 8007478:	6224      	str	r4, [r4, #32]
 800747a:	429c      	cmp	r4, r3
 800747c:	d006      	beq.n	800748c <std+0x48>
 800747e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007482:	4294      	cmp	r4, r2
 8007484:	d002      	beq.n	800748c <std+0x48>
 8007486:	33d0      	adds	r3, #208	@ 0xd0
 8007488:	429c      	cmp	r4, r3
 800748a:	d105      	bne.n	8007498 <std+0x54>
 800748c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007494:	f000 ba5c 	b.w	8007950 <__retarget_lock_init_recursive>
 8007498:	bd10      	pop	{r4, pc}
 800749a:	bf00      	nop
 800749c:	080076a9 	.word	0x080076a9
 80074a0:	080076cb 	.word	0x080076cb
 80074a4:	08007703 	.word	0x08007703
 80074a8:	08007727 	.word	0x08007727
 80074ac:	20005cb0 	.word	0x20005cb0

080074b0 <stdio_exit_handler>:
 80074b0:	4a02      	ldr	r2, [pc, #8]	@ (80074bc <stdio_exit_handler+0xc>)
 80074b2:	4903      	ldr	r1, [pc, #12]	@ (80074c0 <stdio_exit_handler+0x10>)
 80074b4:	4803      	ldr	r0, [pc, #12]	@ (80074c4 <stdio_exit_handler+0x14>)
 80074b6:	f000 b869 	b.w	800758c <_fwalk_sglue>
 80074ba:	bf00      	nop
 80074bc:	20000014 	.word	0x20000014
 80074c0:	08009281 	.word	0x08009281
 80074c4:	20000024 	.word	0x20000024

080074c8 <cleanup_stdio>:
 80074c8:	6841      	ldr	r1, [r0, #4]
 80074ca:	4b0c      	ldr	r3, [pc, #48]	@ (80074fc <cleanup_stdio+0x34>)
 80074cc:	4299      	cmp	r1, r3
 80074ce:	b510      	push	{r4, lr}
 80074d0:	4604      	mov	r4, r0
 80074d2:	d001      	beq.n	80074d8 <cleanup_stdio+0x10>
 80074d4:	f001 fed4 	bl	8009280 <_fflush_r>
 80074d8:	68a1      	ldr	r1, [r4, #8]
 80074da:	4b09      	ldr	r3, [pc, #36]	@ (8007500 <cleanup_stdio+0x38>)
 80074dc:	4299      	cmp	r1, r3
 80074de:	d002      	beq.n	80074e6 <cleanup_stdio+0x1e>
 80074e0:	4620      	mov	r0, r4
 80074e2:	f001 fecd 	bl	8009280 <_fflush_r>
 80074e6:	68e1      	ldr	r1, [r4, #12]
 80074e8:	4b06      	ldr	r3, [pc, #24]	@ (8007504 <cleanup_stdio+0x3c>)
 80074ea:	4299      	cmp	r1, r3
 80074ec:	d004      	beq.n	80074f8 <cleanup_stdio+0x30>
 80074ee:	4620      	mov	r0, r4
 80074f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074f4:	f001 bec4 	b.w	8009280 <_fflush_r>
 80074f8:	bd10      	pop	{r4, pc}
 80074fa:	bf00      	nop
 80074fc:	20005cb0 	.word	0x20005cb0
 8007500:	20005d18 	.word	0x20005d18
 8007504:	20005d80 	.word	0x20005d80

08007508 <global_stdio_init.part.0>:
 8007508:	b510      	push	{r4, lr}
 800750a:	4b0b      	ldr	r3, [pc, #44]	@ (8007538 <global_stdio_init.part.0+0x30>)
 800750c:	4c0b      	ldr	r4, [pc, #44]	@ (800753c <global_stdio_init.part.0+0x34>)
 800750e:	4a0c      	ldr	r2, [pc, #48]	@ (8007540 <global_stdio_init.part.0+0x38>)
 8007510:	601a      	str	r2, [r3, #0]
 8007512:	4620      	mov	r0, r4
 8007514:	2200      	movs	r2, #0
 8007516:	2104      	movs	r1, #4
 8007518:	f7ff ff94 	bl	8007444 <std>
 800751c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007520:	2201      	movs	r2, #1
 8007522:	2109      	movs	r1, #9
 8007524:	f7ff ff8e 	bl	8007444 <std>
 8007528:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800752c:	2202      	movs	r2, #2
 800752e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007532:	2112      	movs	r1, #18
 8007534:	f7ff bf86 	b.w	8007444 <std>
 8007538:	20005de8 	.word	0x20005de8
 800753c:	20005cb0 	.word	0x20005cb0
 8007540:	080074b1 	.word	0x080074b1

08007544 <__sfp_lock_acquire>:
 8007544:	4801      	ldr	r0, [pc, #4]	@ (800754c <__sfp_lock_acquire+0x8>)
 8007546:	f000 ba04 	b.w	8007952 <__retarget_lock_acquire_recursive>
 800754a:	bf00      	nop
 800754c:	20005df1 	.word	0x20005df1

08007550 <__sfp_lock_release>:
 8007550:	4801      	ldr	r0, [pc, #4]	@ (8007558 <__sfp_lock_release+0x8>)
 8007552:	f000 b9ff 	b.w	8007954 <__retarget_lock_release_recursive>
 8007556:	bf00      	nop
 8007558:	20005df1 	.word	0x20005df1

0800755c <__sinit>:
 800755c:	b510      	push	{r4, lr}
 800755e:	4604      	mov	r4, r0
 8007560:	f7ff fff0 	bl	8007544 <__sfp_lock_acquire>
 8007564:	6a23      	ldr	r3, [r4, #32]
 8007566:	b11b      	cbz	r3, 8007570 <__sinit+0x14>
 8007568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800756c:	f7ff bff0 	b.w	8007550 <__sfp_lock_release>
 8007570:	4b04      	ldr	r3, [pc, #16]	@ (8007584 <__sinit+0x28>)
 8007572:	6223      	str	r3, [r4, #32]
 8007574:	4b04      	ldr	r3, [pc, #16]	@ (8007588 <__sinit+0x2c>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d1f5      	bne.n	8007568 <__sinit+0xc>
 800757c:	f7ff ffc4 	bl	8007508 <global_stdio_init.part.0>
 8007580:	e7f2      	b.n	8007568 <__sinit+0xc>
 8007582:	bf00      	nop
 8007584:	080074c9 	.word	0x080074c9
 8007588:	20005de8 	.word	0x20005de8

0800758c <_fwalk_sglue>:
 800758c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007590:	4607      	mov	r7, r0
 8007592:	4688      	mov	r8, r1
 8007594:	4614      	mov	r4, r2
 8007596:	2600      	movs	r6, #0
 8007598:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800759c:	f1b9 0901 	subs.w	r9, r9, #1
 80075a0:	d505      	bpl.n	80075ae <_fwalk_sglue+0x22>
 80075a2:	6824      	ldr	r4, [r4, #0]
 80075a4:	2c00      	cmp	r4, #0
 80075a6:	d1f7      	bne.n	8007598 <_fwalk_sglue+0xc>
 80075a8:	4630      	mov	r0, r6
 80075aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075ae:	89ab      	ldrh	r3, [r5, #12]
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d907      	bls.n	80075c4 <_fwalk_sglue+0x38>
 80075b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80075b8:	3301      	adds	r3, #1
 80075ba:	d003      	beq.n	80075c4 <_fwalk_sglue+0x38>
 80075bc:	4629      	mov	r1, r5
 80075be:	4638      	mov	r0, r7
 80075c0:	47c0      	blx	r8
 80075c2:	4306      	orrs	r6, r0
 80075c4:	3568      	adds	r5, #104	@ 0x68
 80075c6:	e7e9      	b.n	800759c <_fwalk_sglue+0x10>

080075c8 <iprintf>:
 80075c8:	b40f      	push	{r0, r1, r2, r3}
 80075ca:	b507      	push	{r0, r1, r2, lr}
 80075cc:	4906      	ldr	r1, [pc, #24]	@ (80075e8 <iprintf+0x20>)
 80075ce:	ab04      	add	r3, sp, #16
 80075d0:	6808      	ldr	r0, [r1, #0]
 80075d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80075d6:	6881      	ldr	r1, [r0, #8]
 80075d8:	9301      	str	r3, [sp, #4]
 80075da:	f001 fcb5 	bl	8008f48 <_vfiprintf_r>
 80075de:	b003      	add	sp, #12
 80075e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80075e4:	b004      	add	sp, #16
 80075e6:	4770      	bx	lr
 80075e8:	20000020 	.word	0x20000020

080075ec <_puts_r>:
 80075ec:	6a03      	ldr	r3, [r0, #32]
 80075ee:	b570      	push	{r4, r5, r6, lr}
 80075f0:	6884      	ldr	r4, [r0, #8]
 80075f2:	4605      	mov	r5, r0
 80075f4:	460e      	mov	r6, r1
 80075f6:	b90b      	cbnz	r3, 80075fc <_puts_r+0x10>
 80075f8:	f7ff ffb0 	bl	800755c <__sinit>
 80075fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80075fe:	07db      	lsls	r3, r3, #31
 8007600:	d405      	bmi.n	800760e <_puts_r+0x22>
 8007602:	89a3      	ldrh	r3, [r4, #12]
 8007604:	0598      	lsls	r0, r3, #22
 8007606:	d402      	bmi.n	800760e <_puts_r+0x22>
 8007608:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800760a:	f000 f9a2 	bl	8007952 <__retarget_lock_acquire_recursive>
 800760e:	89a3      	ldrh	r3, [r4, #12]
 8007610:	0719      	lsls	r1, r3, #28
 8007612:	d502      	bpl.n	800761a <_puts_r+0x2e>
 8007614:	6923      	ldr	r3, [r4, #16]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d135      	bne.n	8007686 <_puts_r+0x9a>
 800761a:	4621      	mov	r1, r4
 800761c:	4628      	mov	r0, r5
 800761e:	f000 f8c5 	bl	80077ac <__swsetup_r>
 8007622:	b380      	cbz	r0, 8007686 <_puts_r+0x9a>
 8007624:	f04f 35ff 	mov.w	r5, #4294967295
 8007628:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800762a:	07da      	lsls	r2, r3, #31
 800762c:	d405      	bmi.n	800763a <_puts_r+0x4e>
 800762e:	89a3      	ldrh	r3, [r4, #12]
 8007630:	059b      	lsls	r3, r3, #22
 8007632:	d402      	bmi.n	800763a <_puts_r+0x4e>
 8007634:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007636:	f000 f98d 	bl	8007954 <__retarget_lock_release_recursive>
 800763a:	4628      	mov	r0, r5
 800763c:	bd70      	pop	{r4, r5, r6, pc}
 800763e:	2b00      	cmp	r3, #0
 8007640:	da04      	bge.n	800764c <_puts_r+0x60>
 8007642:	69a2      	ldr	r2, [r4, #24]
 8007644:	429a      	cmp	r2, r3
 8007646:	dc17      	bgt.n	8007678 <_puts_r+0x8c>
 8007648:	290a      	cmp	r1, #10
 800764a:	d015      	beq.n	8007678 <_puts_r+0x8c>
 800764c:	6823      	ldr	r3, [r4, #0]
 800764e:	1c5a      	adds	r2, r3, #1
 8007650:	6022      	str	r2, [r4, #0]
 8007652:	7019      	strb	r1, [r3, #0]
 8007654:	68a3      	ldr	r3, [r4, #8]
 8007656:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800765a:	3b01      	subs	r3, #1
 800765c:	60a3      	str	r3, [r4, #8]
 800765e:	2900      	cmp	r1, #0
 8007660:	d1ed      	bne.n	800763e <_puts_r+0x52>
 8007662:	2b00      	cmp	r3, #0
 8007664:	da11      	bge.n	800768a <_puts_r+0x9e>
 8007666:	4622      	mov	r2, r4
 8007668:	210a      	movs	r1, #10
 800766a:	4628      	mov	r0, r5
 800766c:	f000 f85f 	bl	800772e <__swbuf_r>
 8007670:	3001      	adds	r0, #1
 8007672:	d0d7      	beq.n	8007624 <_puts_r+0x38>
 8007674:	250a      	movs	r5, #10
 8007676:	e7d7      	b.n	8007628 <_puts_r+0x3c>
 8007678:	4622      	mov	r2, r4
 800767a:	4628      	mov	r0, r5
 800767c:	f000 f857 	bl	800772e <__swbuf_r>
 8007680:	3001      	adds	r0, #1
 8007682:	d1e7      	bne.n	8007654 <_puts_r+0x68>
 8007684:	e7ce      	b.n	8007624 <_puts_r+0x38>
 8007686:	3e01      	subs	r6, #1
 8007688:	e7e4      	b.n	8007654 <_puts_r+0x68>
 800768a:	6823      	ldr	r3, [r4, #0]
 800768c:	1c5a      	adds	r2, r3, #1
 800768e:	6022      	str	r2, [r4, #0]
 8007690:	220a      	movs	r2, #10
 8007692:	701a      	strb	r2, [r3, #0]
 8007694:	e7ee      	b.n	8007674 <_puts_r+0x88>
	...

08007698 <puts>:
 8007698:	4b02      	ldr	r3, [pc, #8]	@ (80076a4 <puts+0xc>)
 800769a:	4601      	mov	r1, r0
 800769c:	6818      	ldr	r0, [r3, #0]
 800769e:	f7ff bfa5 	b.w	80075ec <_puts_r>
 80076a2:	bf00      	nop
 80076a4:	20000020 	.word	0x20000020

080076a8 <__sread>:
 80076a8:	b510      	push	{r4, lr}
 80076aa:	460c      	mov	r4, r1
 80076ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076b0:	f000 f900 	bl	80078b4 <_read_r>
 80076b4:	2800      	cmp	r0, #0
 80076b6:	bfab      	itete	ge
 80076b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80076ba:	89a3      	ldrhlt	r3, [r4, #12]
 80076bc:	181b      	addge	r3, r3, r0
 80076be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80076c2:	bfac      	ite	ge
 80076c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80076c6:	81a3      	strhlt	r3, [r4, #12]
 80076c8:	bd10      	pop	{r4, pc}

080076ca <__swrite>:
 80076ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076ce:	461f      	mov	r7, r3
 80076d0:	898b      	ldrh	r3, [r1, #12]
 80076d2:	05db      	lsls	r3, r3, #23
 80076d4:	4605      	mov	r5, r0
 80076d6:	460c      	mov	r4, r1
 80076d8:	4616      	mov	r6, r2
 80076da:	d505      	bpl.n	80076e8 <__swrite+0x1e>
 80076dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076e0:	2302      	movs	r3, #2
 80076e2:	2200      	movs	r2, #0
 80076e4:	f000 f8d4 	bl	8007890 <_lseek_r>
 80076e8:	89a3      	ldrh	r3, [r4, #12]
 80076ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80076f2:	81a3      	strh	r3, [r4, #12]
 80076f4:	4632      	mov	r2, r6
 80076f6:	463b      	mov	r3, r7
 80076f8:	4628      	mov	r0, r5
 80076fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076fe:	f000 b8eb 	b.w	80078d8 <_write_r>

08007702 <__sseek>:
 8007702:	b510      	push	{r4, lr}
 8007704:	460c      	mov	r4, r1
 8007706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800770a:	f000 f8c1 	bl	8007890 <_lseek_r>
 800770e:	1c43      	adds	r3, r0, #1
 8007710:	89a3      	ldrh	r3, [r4, #12]
 8007712:	bf15      	itete	ne
 8007714:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007716:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800771a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800771e:	81a3      	strheq	r3, [r4, #12]
 8007720:	bf18      	it	ne
 8007722:	81a3      	strhne	r3, [r4, #12]
 8007724:	bd10      	pop	{r4, pc}

08007726 <__sclose>:
 8007726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800772a:	f000 b8a1 	b.w	8007870 <_close_r>

0800772e <__swbuf_r>:
 800772e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007730:	460e      	mov	r6, r1
 8007732:	4614      	mov	r4, r2
 8007734:	4605      	mov	r5, r0
 8007736:	b118      	cbz	r0, 8007740 <__swbuf_r+0x12>
 8007738:	6a03      	ldr	r3, [r0, #32]
 800773a:	b90b      	cbnz	r3, 8007740 <__swbuf_r+0x12>
 800773c:	f7ff ff0e 	bl	800755c <__sinit>
 8007740:	69a3      	ldr	r3, [r4, #24]
 8007742:	60a3      	str	r3, [r4, #8]
 8007744:	89a3      	ldrh	r3, [r4, #12]
 8007746:	071a      	lsls	r2, r3, #28
 8007748:	d501      	bpl.n	800774e <__swbuf_r+0x20>
 800774a:	6923      	ldr	r3, [r4, #16]
 800774c:	b943      	cbnz	r3, 8007760 <__swbuf_r+0x32>
 800774e:	4621      	mov	r1, r4
 8007750:	4628      	mov	r0, r5
 8007752:	f000 f82b 	bl	80077ac <__swsetup_r>
 8007756:	b118      	cbz	r0, 8007760 <__swbuf_r+0x32>
 8007758:	f04f 37ff 	mov.w	r7, #4294967295
 800775c:	4638      	mov	r0, r7
 800775e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007760:	6823      	ldr	r3, [r4, #0]
 8007762:	6922      	ldr	r2, [r4, #16]
 8007764:	1a98      	subs	r0, r3, r2
 8007766:	6963      	ldr	r3, [r4, #20]
 8007768:	b2f6      	uxtb	r6, r6
 800776a:	4283      	cmp	r3, r0
 800776c:	4637      	mov	r7, r6
 800776e:	dc05      	bgt.n	800777c <__swbuf_r+0x4e>
 8007770:	4621      	mov	r1, r4
 8007772:	4628      	mov	r0, r5
 8007774:	f001 fd84 	bl	8009280 <_fflush_r>
 8007778:	2800      	cmp	r0, #0
 800777a:	d1ed      	bne.n	8007758 <__swbuf_r+0x2a>
 800777c:	68a3      	ldr	r3, [r4, #8]
 800777e:	3b01      	subs	r3, #1
 8007780:	60a3      	str	r3, [r4, #8]
 8007782:	6823      	ldr	r3, [r4, #0]
 8007784:	1c5a      	adds	r2, r3, #1
 8007786:	6022      	str	r2, [r4, #0]
 8007788:	701e      	strb	r6, [r3, #0]
 800778a:	6962      	ldr	r2, [r4, #20]
 800778c:	1c43      	adds	r3, r0, #1
 800778e:	429a      	cmp	r2, r3
 8007790:	d004      	beq.n	800779c <__swbuf_r+0x6e>
 8007792:	89a3      	ldrh	r3, [r4, #12]
 8007794:	07db      	lsls	r3, r3, #31
 8007796:	d5e1      	bpl.n	800775c <__swbuf_r+0x2e>
 8007798:	2e0a      	cmp	r6, #10
 800779a:	d1df      	bne.n	800775c <__swbuf_r+0x2e>
 800779c:	4621      	mov	r1, r4
 800779e:	4628      	mov	r0, r5
 80077a0:	f001 fd6e 	bl	8009280 <_fflush_r>
 80077a4:	2800      	cmp	r0, #0
 80077a6:	d0d9      	beq.n	800775c <__swbuf_r+0x2e>
 80077a8:	e7d6      	b.n	8007758 <__swbuf_r+0x2a>
	...

080077ac <__swsetup_r>:
 80077ac:	b538      	push	{r3, r4, r5, lr}
 80077ae:	4b29      	ldr	r3, [pc, #164]	@ (8007854 <__swsetup_r+0xa8>)
 80077b0:	4605      	mov	r5, r0
 80077b2:	6818      	ldr	r0, [r3, #0]
 80077b4:	460c      	mov	r4, r1
 80077b6:	b118      	cbz	r0, 80077c0 <__swsetup_r+0x14>
 80077b8:	6a03      	ldr	r3, [r0, #32]
 80077ba:	b90b      	cbnz	r3, 80077c0 <__swsetup_r+0x14>
 80077bc:	f7ff fece 	bl	800755c <__sinit>
 80077c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077c4:	0719      	lsls	r1, r3, #28
 80077c6:	d422      	bmi.n	800780e <__swsetup_r+0x62>
 80077c8:	06da      	lsls	r2, r3, #27
 80077ca:	d407      	bmi.n	80077dc <__swsetup_r+0x30>
 80077cc:	2209      	movs	r2, #9
 80077ce:	602a      	str	r2, [r5, #0]
 80077d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077d4:	81a3      	strh	r3, [r4, #12]
 80077d6:	f04f 30ff 	mov.w	r0, #4294967295
 80077da:	e033      	b.n	8007844 <__swsetup_r+0x98>
 80077dc:	0758      	lsls	r0, r3, #29
 80077de:	d512      	bpl.n	8007806 <__swsetup_r+0x5a>
 80077e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80077e2:	b141      	cbz	r1, 80077f6 <__swsetup_r+0x4a>
 80077e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80077e8:	4299      	cmp	r1, r3
 80077ea:	d002      	beq.n	80077f2 <__swsetup_r+0x46>
 80077ec:	4628      	mov	r0, r5
 80077ee:	f000 feff 	bl	80085f0 <_free_r>
 80077f2:	2300      	movs	r3, #0
 80077f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80077f6:	89a3      	ldrh	r3, [r4, #12]
 80077f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80077fc:	81a3      	strh	r3, [r4, #12]
 80077fe:	2300      	movs	r3, #0
 8007800:	6063      	str	r3, [r4, #4]
 8007802:	6923      	ldr	r3, [r4, #16]
 8007804:	6023      	str	r3, [r4, #0]
 8007806:	89a3      	ldrh	r3, [r4, #12]
 8007808:	f043 0308 	orr.w	r3, r3, #8
 800780c:	81a3      	strh	r3, [r4, #12]
 800780e:	6923      	ldr	r3, [r4, #16]
 8007810:	b94b      	cbnz	r3, 8007826 <__swsetup_r+0x7a>
 8007812:	89a3      	ldrh	r3, [r4, #12]
 8007814:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007818:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800781c:	d003      	beq.n	8007826 <__swsetup_r+0x7a>
 800781e:	4621      	mov	r1, r4
 8007820:	4628      	mov	r0, r5
 8007822:	f001 fd7b 	bl	800931c <__smakebuf_r>
 8007826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800782a:	f013 0201 	ands.w	r2, r3, #1
 800782e:	d00a      	beq.n	8007846 <__swsetup_r+0x9a>
 8007830:	2200      	movs	r2, #0
 8007832:	60a2      	str	r2, [r4, #8]
 8007834:	6962      	ldr	r2, [r4, #20]
 8007836:	4252      	negs	r2, r2
 8007838:	61a2      	str	r2, [r4, #24]
 800783a:	6922      	ldr	r2, [r4, #16]
 800783c:	b942      	cbnz	r2, 8007850 <__swsetup_r+0xa4>
 800783e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007842:	d1c5      	bne.n	80077d0 <__swsetup_r+0x24>
 8007844:	bd38      	pop	{r3, r4, r5, pc}
 8007846:	0799      	lsls	r1, r3, #30
 8007848:	bf58      	it	pl
 800784a:	6962      	ldrpl	r2, [r4, #20]
 800784c:	60a2      	str	r2, [r4, #8]
 800784e:	e7f4      	b.n	800783a <__swsetup_r+0x8e>
 8007850:	2000      	movs	r0, #0
 8007852:	e7f7      	b.n	8007844 <__swsetup_r+0x98>
 8007854:	20000020 	.word	0x20000020

08007858 <memset>:
 8007858:	4402      	add	r2, r0
 800785a:	4603      	mov	r3, r0
 800785c:	4293      	cmp	r3, r2
 800785e:	d100      	bne.n	8007862 <memset+0xa>
 8007860:	4770      	bx	lr
 8007862:	f803 1b01 	strb.w	r1, [r3], #1
 8007866:	e7f9      	b.n	800785c <memset+0x4>

08007868 <_localeconv_r>:
 8007868:	4800      	ldr	r0, [pc, #0]	@ (800786c <_localeconv_r+0x4>)
 800786a:	4770      	bx	lr
 800786c:	20000160 	.word	0x20000160

08007870 <_close_r>:
 8007870:	b538      	push	{r3, r4, r5, lr}
 8007872:	4d06      	ldr	r5, [pc, #24]	@ (800788c <_close_r+0x1c>)
 8007874:	2300      	movs	r3, #0
 8007876:	4604      	mov	r4, r0
 8007878:	4608      	mov	r0, r1
 800787a:	602b      	str	r3, [r5, #0]
 800787c:	f7fa fca6 	bl	80021cc <_close>
 8007880:	1c43      	adds	r3, r0, #1
 8007882:	d102      	bne.n	800788a <_close_r+0x1a>
 8007884:	682b      	ldr	r3, [r5, #0]
 8007886:	b103      	cbz	r3, 800788a <_close_r+0x1a>
 8007888:	6023      	str	r3, [r4, #0]
 800788a:	bd38      	pop	{r3, r4, r5, pc}
 800788c:	20005dec 	.word	0x20005dec

08007890 <_lseek_r>:
 8007890:	b538      	push	{r3, r4, r5, lr}
 8007892:	4d07      	ldr	r5, [pc, #28]	@ (80078b0 <_lseek_r+0x20>)
 8007894:	4604      	mov	r4, r0
 8007896:	4608      	mov	r0, r1
 8007898:	4611      	mov	r1, r2
 800789a:	2200      	movs	r2, #0
 800789c:	602a      	str	r2, [r5, #0]
 800789e:	461a      	mov	r2, r3
 80078a0:	f7fa fcbb 	bl	800221a <_lseek>
 80078a4:	1c43      	adds	r3, r0, #1
 80078a6:	d102      	bne.n	80078ae <_lseek_r+0x1e>
 80078a8:	682b      	ldr	r3, [r5, #0]
 80078aa:	b103      	cbz	r3, 80078ae <_lseek_r+0x1e>
 80078ac:	6023      	str	r3, [r4, #0]
 80078ae:	bd38      	pop	{r3, r4, r5, pc}
 80078b0:	20005dec 	.word	0x20005dec

080078b4 <_read_r>:
 80078b4:	b538      	push	{r3, r4, r5, lr}
 80078b6:	4d07      	ldr	r5, [pc, #28]	@ (80078d4 <_read_r+0x20>)
 80078b8:	4604      	mov	r4, r0
 80078ba:	4608      	mov	r0, r1
 80078bc:	4611      	mov	r1, r2
 80078be:	2200      	movs	r2, #0
 80078c0:	602a      	str	r2, [r5, #0]
 80078c2:	461a      	mov	r2, r3
 80078c4:	f7fa fc65 	bl	8002192 <_read>
 80078c8:	1c43      	adds	r3, r0, #1
 80078ca:	d102      	bne.n	80078d2 <_read_r+0x1e>
 80078cc:	682b      	ldr	r3, [r5, #0]
 80078ce:	b103      	cbz	r3, 80078d2 <_read_r+0x1e>
 80078d0:	6023      	str	r3, [r4, #0]
 80078d2:	bd38      	pop	{r3, r4, r5, pc}
 80078d4:	20005dec 	.word	0x20005dec

080078d8 <_write_r>:
 80078d8:	b538      	push	{r3, r4, r5, lr}
 80078da:	4d07      	ldr	r5, [pc, #28]	@ (80078f8 <_write_r+0x20>)
 80078dc:	4604      	mov	r4, r0
 80078de:	4608      	mov	r0, r1
 80078e0:	4611      	mov	r1, r2
 80078e2:	2200      	movs	r2, #0
 80078e4:	602a      	str	r2, [r5, #0]
 80078e6:	461a      	mov	r2, r3
 80078e8:	f7fa f9f6 	bl	8001cd8 <_write>
 80078ec:	1c43      	adds	r3, r0, #1
 80078ee:	d102      	bne.n	80078f6 <_write_r+0x1e>
 80078f0:	682b      	ldr	r3, [r5, #0]
 80078f2:	b103      	cbz	r3, 80078f6 <_write_r+0x1e>
 80078f4:	6023      	str	r3, [r4, #0]
 80078f6:	bd38      	pop	{r3, r4, r5, pc}
 80078f8:	20005dec 	.word	0x20005dec

080078fc <__errno>:
 80078fc:	4b01      	ldr	r3, [pc, #4]	@ (8007904 <__errno+0x8>)
 80078fe:	6818      	ldr	r0, [r3, #0]
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop
 8007904:	20000020 	.word	0x20000020

08007908 <__libc_init_array>:
 8007908:	b570      	push	{r4, r5, r6, lr}
 800790a:	4d0d      	ldr	r5, [pc, #52]	@ (8007940 <__libc_init_array+0x38>)
 800790c:	4c0d      	ldr	r4, [pc, #52]	@ (8007944 <__libc_init_array+0x3c>)
 800790e:	1b64      	subs	r4, r4, r5
 8007910:	10a4      	asrs	r4, r4, #2
 8007912:	2600      	movs	r6, #0
 8007914:	42a6      	cmp	r6, r4
 8007916:	d109      	bne.n	800792c <__libc_init_array+0x24>
 8007918:	4d0b      	ldr	r5, [pc, #44]	@ (8007948 <__libc_init_array+0x40>)
 800791a:	4c0c      	ldr	r4, [pc, #48]	@ (800794c <__libc_init_array+0x44>)
 800791c:	f001 fe2a 	bl	8009574 <_init>
 8007920:	1b64      	subs	r4, r4, r5
 8007922:	10a4      	asrs	r4, r4, #2
 8007924:	2600      	movs	r6, #0
 8007926:	42a6      	cmp	r6, r4
 8007928:	d105      	bne.n	8007936 <__libc_init_array+0x2e>
 800792a:	bd70      	pop	{r4, r5, r6, pc}
 800792c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007930:	4798      	blx	r3
 8007932:	3601      	adds	r6, #1
 8007934:	e7ee      	b.n	8007914 <__libc_init_array+0xc>
 8007936:	f855 3b04 	ldr.w	r3, [r5], #4
 800793a:	4798      	blx	r3
 800793c:	3601      	adds	r6, #1
 800793e:	e7f2      	b.n	8007926 <__libc_init_array+0x1e>
 8007940:	0800a458 	.word	0x0800a458
 8007944:	0800a458 	.word	0x0800a458
 8007948:	0800a458 	.word	0x0800a458
 800794c:	0800a45c 	.word	0x0800a45c

08007950 <__retarget_lock_init_recursive>:
 8007950:	4770      	bx	lr

08007952 <__retarget_lock_acquire_recursive>:
 8007952:	4770      	bx	lr

08007954 <__retarget_lock_release_recursive>:
 8007954:	4770      	bx	lr

08007956 <quorem>:
 8007956:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800795a:	6903      	ldr	r3, [r0, #16]
 800795c:	690c      	ldr	r4, [r1, #16]
 800795e:	42a3      	cmp	r3, r4
 8007960:	4607      	mov	r7, r0
 8007962:	db7e      	blt.n	8007a62 <quorem+0x10c>
 8007964:	3c01      	subs	r4, #1
 8007966:	f101 0814 	add.w	r8, r1, #20
 800796a:	00a3      	lsls	r3, r4, #2
 800796c:	f100 0514 	add.w	r5, r0, #20
 8007970:	9300      	str	r3, [sp, #0]
 8007972:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007976:	9301      	str	r3, [sp, #4]
 8007978:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800797c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007980:	3301      	adds	r3, #1
 8007982:	429a      	cmp	r2, r3
 8007984:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007988:	fbb2 f6f3 	udiv	r6, r2, r3
 800798c:	d32e      	bcc.n	80079ec <quorem+0x96>
 800798e:	f04f 0a00 	mov.w	sl, #0
 8007992:	46c4      	mov	ip, r8
 8007994:	46ae      	mov	lr, r5
 8007996:	46d3      	mov	fp, sl
 8007998:	f85c 3b04 	ldr.w	r3, [ip], #4
 800799c:	b298      	uxth	r0, r3
 800799e:	fb06 a000 	mla	r0, r6, r0, sl
 80079a2:	0c02      	lsrs	r2, r0, #16
 80079a4:	0c1b      	lsrs	r3, r3, #16
 80079a6:	fb06 2303 	mla	r3, r6, r3, r2
 80079aa:	f8de 2000 	ldr.w	r2, [lr]
 80079ae:	b280      	uxth	r0, r0
 80079b0:	b292      	uxth	r2, r2
 80079b2:	1a12      	subs	r2, r2, r0
 80079b4:	445a      	add	r2, fp
 80079b6:	f8de 0000 	ldr.w	r0, [lr]
 80079ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079be:	b29b      	uxth	r3, r3
 80079c0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80079c4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80079c8:	b292      	uxth	r2, r2
 80079ca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80079ce:	45e1      	cmp	r9, ip
 80079d0:	f84e 2b04 	str.w	r2, [lr], #4
 80079d4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80079d8:	d2de      	bcs.n	8007998 <quorem+0x42>
 80079da:	9b00      	ldr	r3, [sp, #0]
 80079dc:	58eb      	ldr	r3, [r5, r3]
 80079de:	b92b      	cbnz	r3, 80079ec <quorem+0x96>
 80079e0:	9b01      	ldr	r3, [sp, #4]
 80079e2:	3b04      	subs	r3, #4
 80079e4:	429d      	cmp	r5, r3
 80079e6:	461a      	mov	r2, r3
 80079e8:	d32f      	bcc.n	8007a4a <quorem+0xf4>
 80079ea:	613c      	str	r4, [r7, #16]
 80079ec:	4638      	mov	r0, r7
 80079ee:	f001 f979 	bl	8008ce4 <__mcmp>
 80079f2:	2800      	cmp	r0, #0
 80079f4:	db25      	blt.n	8007a42 <quorem+0xec>
 80079f6:	4629      	mov	r1, r5
 80079f8:	2000      	movs	r0, #0
 80079fa:	f858 2b04 	ldr.w	r2, [r8], #4
 80079fe:	f8d1 c000 	ldr.w	ip, [r1]
 8007a02:	fa1f fe82 	uxth.w	lr, r2
 8007a06:	fa1f f38c 	uxth.w	r3, ip
 8007a0a:	eba3 030e 	sub.w	r3, r3, lr
 8007a0e:	4403      	add	r3, r0
 8007a10:	0c12      	lsrs	r2, r2, #16
 8007a12:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007a16:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a20:	45c1      	cmp	r9, r8
 8007a22:	f841 3b04 	str.w	r3, [r1], #4
 8007a26:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007a2a:	d2e6      	bcs.n	80079fa <quorem+0xa4>
 8007a2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a34:	b922      	cbnz	r2, 8007a40 <quorem+0xea>
 8007a36:	3b04      	subs	r3, #4
 8007a38:	429d      	cmp	r5, r3
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	d30b      	bcc.n	8007a56 <quorem+0x100>
 8007a3e:	613c      	str	r4, [r7, #16]
 8007a40:	3601      	adds	r6, #1
 8007a42:	4630      	mov	r0, r6
 8007a44:	b003      	add	sp, #12
 8007a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a4a:	6812      	ldr	r2, [r2, #0]
 8007a4c:	3b04      	subs	r3, #4
 8007a4e:	2a00      	cmp	r2, #0
 8007a50:	d1cb      	bne.n	80079ea <quorem+0x94>
 8007a52:	3c01      	subs	r4, #1
 8007a54:	e7c6      	b.n	80079e4 <quorem+0x8e>
 8007a56:	6812      	ldr	r2, [r2, #0]
 8007a58:	3b04      	subs	r3, #4
 8007a5a:	2a00      	cmp	r2, #0
 8007a5c:	d1ef      	bne.n	8007a3e <quorem+0xe8>
 8007a5e:	3c01      	subs	r4, #1
 8007a60:	e7ea      	b.n	8007a38 <quorem+0xe2>
 8007a62:	2000      	movs	r0, #0
 8007a64:	e7ee      	b.n	8007a44 <quorem+0xee>
	...

08007a68 <_dtoa_r>:
 8007a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a6c:	69c7      	ldr	r7, [r0, #28]
 8007a6e:	b099      	sub	sp, #100	@ 0x64
 8007a70:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007a74:	ec55 4b10 	vmov	r4, r5, d0
 8007a78:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007a7a:	9109      	str	r1, [sp, #36]	@ 0x24
 8007a7c:	4683      	mov	fp, r0
 8007a7e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007a80:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007a82:	b97f      	cbnz	r7, 8007aa4 <_dtoa_r+0x3c>
 8007a84:	2010      	movs	r0, #16
 8007a86:	f000 fdfd 	bl	8008684 <malloc>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007a90:	b920      	cbnz	r0, 8007a9c <_dtoa_r+0x34>
 8007a92:	4ba7      	ldr	r3, [pc, #668]	@ (8007d30 <_dtoa_r+0x2c8>)
 8007a94:	21ef      	movs	r1, #239	@ 0xef
 8007a96:	48a7      	ldr	r0, [pc, #668]	@ (8007d34 <_dtoa_r+0x2cc>)
 8007a98:	f001 fcbc 	bl	8009414 <__assert_func>
 8007a9c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007aa0:	6007      	str	r7, [r0, #0]
 8007aa2:	60c7      	str	r7, [r0, #12]
 8007aa4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007aa8:	6819      	ldr	r1, [r3, #0]
 8007aaa:	b159      	cbz	r1, 8007ac4 <_dtoa_r+0x5c>
 8007aac:	685a      	ldr	r2, [r3, #4]
 8007aae:	604a      	str	r2, [r1, #4]
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	4093      	lsls	r3, r2
 8007ab4:	608b      	str	r3, [r1, #8]
 8007ab6:	4658      	mov	r0, fp
 8007ab8:	f000 feda 	bl	8008870 <_Bfree>
 8007abc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	601a      	str	r2, [r3, #0]
 8007ac4:	1e2b      	subs	r3, r5, #0
 8007ac6:	bfb9      	ittee	lt
 8007ac8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007acc:	9303      	strlt	r3, [sp, #12]
 8007ace:	2300      	movge	r3, #0
 8007ad0:	6033      	strge	r3, [r6, #0]
 8007ad2:	9f03      	ldr	r7, [sp, #12]
 8007ad4:	4b98      	ldr	r3, [pc, #608]	@ (8007d38 <_dtoa_r+0x2d0>)
 8007ad6:	bfbc      	itt	lt
 8007ad8:	2201      	movlt	r2, #1
 8007ada:	6032      	strlt	r2, [r6, #0]
 8007adc:	43bb      	bics	r3, r7
 8007ade:	d112      	bne.n	8007b06 <_dtoa_r+0x9e>
 8007ae0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007ae2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007ae6:	6013      	str	r3, [r2, #0]
 8007ae8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007aec:	4323      	orrs	r3, r4
 8007aee:	f000 854d 	beq.w	800858c <_dtoa_r+0xb24>
 8007af2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007af4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007d4c <_dtoa_r+0x2e4>
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	f000 854f 	beq.w	800859c <_dtoa_r+0xb34>
 8007afe:	f10a 0303 	add.w	r3, sl, #3
 8007b02:	f000 bd49 	b.w	8008598 <_dtoa_r+0xb30>
 8007b06:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	ec51 0b17 	vmov	r0, r1, d7
 8007b10:	2300      	movs	r3, #0
 8007b12:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007b16:	f7f8 ffd7 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b1a:	4680      	mov	r8, r0
 8007b1c:	b158      	cbz	r0, 8007b36 <_dtoa_r+0xce>
 8007b1e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007b20:	2301      	movs	r3, #1
 8007b22:	6013      	str	r3, [r2, #0]
 8007b24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007b26:	b113      	cbz	r3, 8007b2e <_dtoa_r+0xc6>
 8007b28:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007b2a:	4b84      	ldr	r3, [pc, #528]	@ (8007d3c <_dtoa_r+0x2d4>)
 8007b2c:	6013      	str	r3, [r2, #0]
 8007b2e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007d50 <_dtoa_r+0x2e8>
 8007b32:	f000 bd33 	b.w	800859c <_dtoa_r+0xb34>
 8007b36:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007b3a:	aa16      	add	r2, sp, #88	@ 0x58
 8007b3c:	a917      	add	r1, sp, #92	@ 0x5c
 8007b3e:	4658      	mov	r0, fp
 8007b40:	f001 f980 	bl	8008e44 <__d2b>
 8007b44:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007b48:	4681      	mov	r9, r0
 8007b4a:	2e00      	cmp	r6, #0
 8007b4c:	d077      	beq.n	8007c3e <_dtoa_r+0x1d6>
 8007b4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b50:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007b54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b5c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007b60:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007b64:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007b68:	4619      	mov	r1, r3
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	4b74      	ldr	r3, [pc, #464]	@ (8007d40 <_dtoa_r+0x2d8>)
 8007b6e:	f7f8 fb8b 	bl	8000288 <__aeabi_dsub>
 8007b72:	a369      	add	r3, pc, #420	@ (adr r3, 8007d18 <_dtoa_r+0x2b0>)
 8007b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b78:	f7f8 fd3e 	bl	80005f8 <__aeabi_dmul>
 8007b7c:	a368      	add	r3, pc, #416	@ (adr r3, 8007d20 <_dtoa_r+0x2b8>)
 8007b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b82:	f7f8 fb83 	bl	800028c <__adddf3>
 8007b86:	4604      	mov	r4, r0
 8007b88:	4630      	mov	r0, r6
 8007b8a:	460d      	mov	r5, r1
 8007b8c:	f7f8 fcca 	bl	8000524 <__aeabi_i2d>
 8007b90:	a365      	add	r3, pc, #404	@ (adr r3, 8007d28 <_dtoa_r+0x2c0>)
 8007b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b96:	f7f8 fd2f 	bl	80005f8 <__aeabi_dmul>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	4629      	mov	r1, r5
 8007ba2:	f7f8 fb73 	bl	800028c <__adddf3>
 8007ba6:	4604      	mov	r4, r0
 8007ba8:	460d      	mov	r5, r1
 8007baa:	f7f8 ffd5 	bl	8000b58 <__aeabi_d2iz>
 8007bae:	2200      	movs	r2, #0
 8007bb0:	4607      	mov	r7, r0
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	4620      	mov	r0, r4
 8007bb6:	4629      	mov	r1, r5
 8007bb8:	f7f8 ff90 	bl	8000adc <__aeabi_dcmplt>
 8007bbc:	b140      	cbz	r0, 8007bd0 <_dtoa_r+0x168>
 8007bbe:	4638      	mov	r0, r7
 8007bc0:	f7f8 fcb0 	bl	8000524 <__aeabi_i2d>
 8007bc4:	4622      	mov	r2, r4
 8007bc6:	462b      	mov	r3, r5
 8007bc8:	f7f8 ff7e 	bl	8000ac8 <__aeabi_dcmpeq>
 8007bcc:	b900      	cbnz	r0, 8007bd0 <_dtoa_r+0x168>
 8007bce:	3f01      	subs	r7, #1
 8007bd0:	2f16      	cmp	r7, #22
 8007bd2:	d851      	bhi.n	8007c78 <_dtoa_r+0x210>
 8007bd4:	4b5b      	ldr	r3, [pc, #364]	@ (8007d44 <_dtoa_r+0x2dc>)
 8007bd6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007be2:	f7f8 ff7b 	bl	8000adc <__aeabi_dcmplt>
 8007be6:	2800      	cmp	r0, #0
 8007be8:	d048      	beq.n	8007c7c <_dtoa_r+0x214>
 8007bea:	3f01      	subs	r7, #1
 8007bec:	2300      	movs	r3, #0
 8007bee:	9312      	str	r3, [sp, #72]	@ 0x48
 8007bf0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007bf2:	1b9b      	subs	r3, r3, r6
 8007bf4:	1e5a      	subs	r2, r3, #1
 8007bf6:	bf44      	itt	mi
 8007bf8:	f1c3 0801 	rsbmi	r8, r3, #1
 8007bfc:	2300      	movmi	r3, #0
 8007bfe:	9208      	str	r2, [sp, #32]
 8007c00:	bf54      	ite	pl
 8007c02:	f04f 0800 	movpl.w	r8, #0
 8007c06:	9308      	strmi	r3, [sp, #32]
 8007c08:	2f00      	cmp	r7, #0
 8007c0a:	db39      	blt.n	8007c80 <_dtoa_r+0x218>
 8007c0c:	9b08      	ldr	r3, [sp, #32]
 8007c0e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007c10:	443b      	add	r3, r7
 8007c12:	9308      	str	r3, [sp, #32]
 8007c14:	2300      	movs	r3, #0
 8007c16:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c1a:	2b09      	cmp	r3, #9
 8007c1c:	d864      	bhi.n	8007ce8 <_dtoa_r+0x280>
 8007c1e:	2b05      	cmp	r3, #5
 8007c20:	bfc4      	itt	gt
 8007c22:	3b04      	subgt	r3, #4
 8007c24:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007c26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c28:	f1a3 0302 	sub.w	r3, r3, #2
 8007c2c:	bfcc      	ite	gt
 8007c2e:	2400      	movgt	r4, #0
 8007c30:	2401      	movle	r4, #1
 8007c32:	2b03      	cmp	r3, #3
 8007c34:	d863      	bhi.n	8007cfe <_dtoa_r+0x296>
 8007c36:	e8df f003 	tbb	[pc, r3]
 8007c3a:	372a      	.short	0x372a
 8007c3c:	5535      	.short	0x5535
 8007c3e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007c42:	441e      	add	r6, r3
 8007c44:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007c48:	2b20      	cmp	r3, #32
 8007c4a:	bfc1      	itttt	gt
 8007c4c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007c50:	409f      	lslgt	r7, r3
 8007c52:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007c56:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007c5a:	bfd6      	itet	le
 8007c5c:	f1c3 0320 	rsble	r3, r3, #32
 8007c60:	ea47 0003 	orrgt.w	r0, r7, r3
 8007c64:	fa04 f003 	lslle.w	r0, r4, r3
 8007c68:	f7f8 fc4c 	bl	8000504 <__aeabi_ui2d>
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007c72:	3e01      	subs	r6, #1
 8007c74:	9214      	str	r2, [sp, #80]	@ 0x50
 8007c76:	e777      	b.n	8007b68 <_dtoa_r+0x100>
 8007c78:	2301      	movs	r3, #1
 8007c7a:	e7b8      	b.n	8007bee <_dtoa_r+0x186>
 8007c7c:	9012      	str	r0, [sp, #72]	@ 0x48
 8007c7e:	e7b7      	b.n	8007bf0 <_dtoa_r+0x188>
 8007c80:	427b      	negs	r3, r7
 8007c82:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c84:	2300      	movs	r3, #0
 8007c86:	eba8 0807 	sub.w	r8, r8, r7
 8007c8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007c8c:	e7c4      	b.n	8007c18 <_dtoa_r+0x1b0>
 8007c8e:	2300      	movs	r3, #0
 8007c90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	dc35      	bgt.n	8007d04 <_dtoa_r+0x29c>
 8007c98:	2301      	movs	r3, #1
 8007c9a:	9300      	str	r3, [sp, #0]
 8007c9c:	9307      	str	r3, [sp, #28]
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	920e      	str	r2, [sp, #56]	@ 0x38
 8007ca2:	e00b      	b.n	8007cbc <_dtoa_r+0x254>
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	e7f3      	b.n	8007c90 <_dtoa_r+0x228>
 8007ca8:	2300      	movs	r3, #0
 8007caa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007cac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007cae:	18fb      	adds	r3, r7, r3
 8007cb0:	9300      	str	r3, [sp, #0]
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	9307      	str	r3, [sp, #28]
 8007cb8:	bfb8      	it	lt
 8007cba:	2301      	movlt	r3, #1
 8007cbc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	2204      	movs	r2, #4
 8007cc4:	f102 0514 	add.w	r5, r2, #20
 8007cc8:	429d      	cmp	r5, r3
 8007cca:	d91f      	bls.n	8007d0c <_dtoa_r+0x2a4>
 8007ccc:	6041      	str	r1, [r0, #4]
 8007cce:	4658      	mov	r0, fp
 8007cd0:	f000 fd8e 	bl	80087f0 <_Balloc>
 8007cd4:	4682      	mov	sl, r0
 8007cd6:	2800      	cmp	r0, #0
 8007cd8:	d13c      	bne.n	8007d54 <_dtoa_r+0x2ec>
 8007cda:	4b1b      	ldr	r3, [pc, #108]	@ (8007d48 <_dtoa_r+0x2e0>)
 8007cdc:	4602      	mov	r2, r0
 8007cde:	f240 11af 	movw	r1, #431	@ 0x1af
 8007ce2:	e6d8      	b.n	8007a96 <_dtoa_r+0x2e>
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e7e0      	b.n	8007caa <_dtoa_r+0x242>
 8007ce8:	2401      	movs	r4, #1
 8007cea:	2300      	movs	r3, #0
 8007cec:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cee:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8007cf4:	9300      	str	r3, [sp, #0]
 8007cf6:	9307      	str	r3, [sp, #28]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	2312      	movs	r3, #18
 8007cfc:	e7d0      	b.n	8007ca0 <_dtoa_r+0x238>
 8007cfe:	2301      	movs	r3, #1
 8007d00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d02:	e7f5      	b.n	8007cf0 <_dtoa_r+0x288>
 8007d04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d06:	9300      	str	r3, [sp, #0]
 8007d08:	9307      	str	r3, [sp, #28]
 8007d0a:	e7d7      	b.n	8007cbc <_dtoa_r+0x254>
 8007d0c:	3101      	adds	r1, #1
 8007d0e:	0052      	lsls	r2, r2, #1
 8007d10:	e7d8      	b.n	8007cc4 <_dtoa_r+0x25c>
 8007d12:	bf00      	nop
 8007d14:	f3af 8000 	nop.w
 8007d18:	636f4361 	.word	0x636f4361
 8007d1c:	3fd287a7 	.word	0x3fd287a7
 8007d20:	8b60c8b3 	.word	0x8b60c8b3
 8007d24:	3fc68a28 	.word	0x3fc68a28
 8007d28:	509f79fb 	.word	0x509f79fb
 8007d2c:	3fd34413 	.word	0x3fd34413
 8007d30:	0800a121 	.word	0x0800a121
 8007d34:	0800a138 	.word	0x0800a138
 8007d38:	7ff00000 	.word	0x7ff00000
 8007d3c:	0800a0f1 	.word	0x0800a0f1
 8007d40:	3ff80000 	.word	0x3ff80000
 8007d44:	0800a230 	.word	0x0800a230
 8007d48:	0800a190 	.word	0x0800a190
 8007d4c:	0800a11d 	.word	0x0800a11d
 8007d50:	0800a0f0 	.word	0x0800a0f0
 8007d54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007d58:	6018      	str	r0, [r3, #0]
 8007d5a:	9b07      	ldr	r3, [sp, #28]
 8007d5c:	2b0e      	cmp	r3, #14
 8007d5e:	f200 80a4 	bhi.w	8007eaa <_dtoa_r+0x442>
 8007d62:	2c00      	cmp	r4, #0
 8007d64:	f000 80a1 	beq.w	8007eaa <_dtoa_r+0x442>
 8007d68:	2f00      	cmp	r7, #0
 8007d6a:	dd33      	ble.n	8007dd4 <_dtoa_r+0x36c>
 8007d6c:	4bad      	ldr	r3, [pc, #692]	@ (8008024 <_dtoa_r+0x5bc>)
 8007d6e:	f007 020f 	and.w	r2, r7, #15
 8007d72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d76:	ed93 7b00 	vldr	d7, [r3]
 8007d7a:	05f8      	lsls	r0, r7, #23
 8007d7c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007d80:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007d84:	d516      	bpl.n	8007db4 <_dtoa_r+0x34c>
 8007d86:	4ba8      	ldr	r3, [pc, #672]	@ (8008028 <_dtoa_r+0x5c0>)
 8007d88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d90:	f7f8 fd5c 	bl	800084c <__aeabi_ddiv>
 8007d94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d98:	f004 040f 	and.w	r4, r4, #15
 8007d9c:	2603      	movs	r6, #3
 8007d9e:	4da2      	ldr	r5, [pc, #648]	@ (8008028 <_dtoa_r+0x5c0>)
 8007da0:	b954      	cbnz	r4, 8007db8 <_dtoa_r+0x350>
 8007da2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007da6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007daa:	f7f8 fd4f 	bl	800084c <__aeabi_ddiv>
 8007dae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007db2:	e028      	b.n	8007e06 <_dtoa_r+0x39e>
 8007db4:	2602      	movs	r6, #2
 8007db6:	e7f2      	b.n	8007d9e <_dtoa_r+0x336>
 8007db8:	07e1      	lsls	r1, r4, #31
 8007dba:	d508      	bpl.n	8007dce <_dtoa_r+0x366>
 8007dbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007dc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007dc4:	f7f8 fc18 	bl	80005f8 <__aeabi_dmul>
 8007dc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007dcc:	3601      	adds	r6, #1
 8007dce:	1064      	asrs	r4, r4, #1
 8007dd0:	3508      	adds	r5, #8
 8007dd2:	e7e5      	b.n	8007da0 <_dtoa_r+0x338>
 8007dd4:	f000 80d2 	beq.w	8007f7c <_dtoa_r+0x514>
 8007dd8:	427c      	negs	r4, r7
 8007dda:	4b92      	ldr	r3, [pc, #584]	@ (8008024 <_dtoa_r+0x5bc>)
 8007ddc:	4d92      	ldr	r5, [pc, #584]	@ (8008028 <_dtoa_r+0x5c0>)
 8007dde:	f004 020f 	and.w	r2, r4, #15
 8007de2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007dee:	f7f8 fc03 	bl	80005f8 <__aeabi_dmul>
 8007df2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007df6:	1124      	asrs	r4, r4, #4
 8007df8:	2300      	movs	r3, #0
 8007dfa:	2602      	movs	r6, #2
 8007dfc:	2c00      	cmp	r4, #0
 8007dfe:	f040 80b2 	bne.w	8007f66 <_dtoa_r+0x4fe>
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1d3      	bne.n	8007dae <_dtoa_r+0x346>
 8007e06:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007e08:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	f000 80b7 	beq.w	8007f80 <_dtoa_r+0x518>
 8007e12:	4b86      	ldr	r3, [pc, #536]	@ (800802c <_dtoa_r+0x5c4>)
 8007e14:	2200      	movs	r2, #0
 8007e16:	4620      	mov	r0, r4
 8007e18:	4629      	mov	r1, r5
 8007e1a:	f7f8 fe5f 	bl	8000adc <__aeabi_dcmplt>
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	f000 80ae 	beq.w	8007f80 <_dtoa_r+0x518>
 8007e24:	9b07      	ldr	r3, [sp, #28]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	f000 80aa 	beq.w	8007f80 <_dtoa_r+0x518>
 8007e2c:	9b00      	ldr	r3, [sp, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	dd37      	ble.n	8007ea2 <_dtoa_r+0x43a>
 8007e32:	1e7b      	subs	r3, r7, #1
 8007e34:	9304      	str	r3, [sp, #16]
 8007e36:	4620      	mov	r0, r4
 8007e38:	4b7d      	ldr	r3, [pc, #500]	@ (8008030 <_dtoa_r+0x5c8>)
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	4629      	mov	r1, r5
 8007e3e:	f7f8 fbdb 	bl	80005f8 <__aeabi_dmul>
 8007e42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e46:	9c00      	ldr	r4, [sp, #0]
 8007e48:	3601      	adds	r6, #1
 8007e4a:	4630      	mov	r0, r6
 8007e4c:	f7f8 fb6a 	bl	8000524 <__aeabi_i2d>
 8007e50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e54:	f7f8 fbd0 	bl	80005f8 <__aeabi_dmul>
 8007e58:	4b76      	ldr	r3, [pc, #472]	@ (8008034 <_dtoa_r+0x5cc>)
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f7f8 fa16 	bl	800028c <__adddf3>
 8007e60:	4605      	mov	r5, r0
 8007e62:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007e66:	2c00      	cmp	r4, #0
 8007e68:	f040 808d 	bne.w	8007f86 <_dtoa_r+0x51e>
 8007e6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e70:	4b71      	ldr	r3, [pc, #452]	@ (8008038 <_dtoa_r+0x5d0>)
 8007e72:	2200      	movs	r2, #0
 8007e74:	f7f8 fa08 	bl	8000288 <__aeabi_dsub>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e80:	462a      	mov	r2, r5
 8007e82:	4633      	mov	r3, r6
 8007e84:	f7f8 fe48 	bl	8000b18 <__aeabi_dcmpgt>
 8007e88:	2800      	cmp	r0, #0
 8007e8a:	f040 828b 	bne.w	80083a4 <_dtoa_r+0x93c>
 8007e8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e92:	462a      	mov	r2, r5
 8007e94:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007e98:	f7f8 fe20 	bl	8000adc <__aeabi_dcmplt>
 8007e9c:	2800      	cmp	r0, #0
 8007e9e:	f040 8128 	bne.w	80080f2 <_dtoa_r+0x68a>
 8007ea2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007ea6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007eaa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f2c0 815a 	blt.w	8008166 <_dtoa_r+0x6fe>
 8007eb2:	2f0e      	cmp	r7, #14
 8007eb4:	f300 8157 	bgt.w	8008166 <_dtoa_r+0x6fe>
 8007eb8:	4b5a      	ldr	r3, [pc, #360]	@ (8008024 <_dtoa_r+0x5bc>)
 8007eba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007ebe:	ed93 7b00 	vldr	d7, [r3]
 8007ec2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	ed8d 7b00 	vstr	d7, [sp]
 8007eca:	da03      	bge.n	8007ed4 <_dtoa_r+0x46c>
 8007ecc:	9b07      	ldr	r3, [sp, #28]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	f340 8101 	ble.w	80080d6 <_dtoa_r+0x66e>
 8007ed4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007ed8:	4656      	mov	r6, sl
 8007eda:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ede:	4620      	mov	r0, r4
 8007ee0:	4629      	mov	r1, r5
 8007ee2:	f7f8 fcb3 	bl	800084c <__aeabi_ddiv>
 8007ee6:	f7f8 fe37 	bl	8000b58 <__aeabi_d2iz>
 8007eea:	4680      	mov	r8, r0
 8007eec:	f7f8 fb1a 	bl	8000524 <__aeabi_i2d>
 8007ef0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ef4:	f7f8 fb80 	bl	80005f8 <__aeabi_dmul>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	460b      	mov	r3, r1
 8007efc:	4620      	mov	r0, r4
 8007efe:	4629      	mov	r1, r5
 8007f00:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007f04:	f7f8 f9c0 	bl	8000288 <__aeabi_dsub>
 8007f08:	f806 4b01 	strb.w	r4, [r6], #1
 8007f0c:	9d07      	ldr	r5, [sp, #28]
 8007f0e:	eba6 040a 	sub.w	r4, r6, sl
 8007f12:	42a5      	cmp	r5, r4
 8007f14:	4602      	mov	r2, r0
 8007f16:	460b      	mov	r3, r1
 8007f18:	f040 8117 	bne.w	800814a <_dtoa_r+0x6e2>
 8007f1c:	f7f8 f9b6 	bl	800028c <__adddf3>
 8007f20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f24:	4604      	mov	r4, r0
 8007f26:	460d      	mov	r5, r1
 8007f28:	f7f8 fdf6 	bl	8000b18 <__aeabi_dcmpgt>
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	f040 80f9 	bne.w	8008124 <_dtoa_r+0x6bc>
 8007f32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f36:	4620      	mov	r0, r4
 8007f38:	4629      	mov	r1, r5
 8007f3a:	f7f8 fdc5 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f3e:	b118      	cbz	r0, 8007f48 <_dtoa_r+0x4e0>
 8007f40:	f018 0f01 	tst.w	r8, #1
 8007f44:	f040 80ee 	bne.w	8008124 <_dtoa_r+0x6bc>
 8007f48:	4649      	mov	r1, r9
 8007f4a:	4658      	mov	r0, fp
 8007f4c:	f000 fc90 	bl	8008870 <_Bfree>
 8007f50:	2300      	movs	r3, #0
 8007f52:	7033      	strb	r3, [r6, #0]
 8007f54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007f56:	3701      	adds	r7, #1
 8007f58:	601f      	str	r7, [r3, #0]
 8007f5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	f000 831d 	beq.w	800859c <_dtoa_r+0xb34>
 8007f62:	601e      	str	r6, [r3, #0]
 8007f64:	e31a      	b.n	800859c <_dtoa_r+0xb34>
 8007f66:	07e2      	lsls	r2, r4, #31
 8007f68:	d505      	bpl.n	8007f76 <_dtoa_r+0x50e>
 8007f6a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007f6e:	f7f8 fb43 	bl	80005f8 <__aeabi_dmul>
 8007f72:	3601      	adds	r6, #1
 8007f74:	2301      	movs	r3, #1
 8007f76:	1064      	asrs	r4, r4, #1
 8007f78:	3508      	adds	r5, #8
 8007f7a:	e73f      	b.n	8007dfc <_dtoa_r+0x394>
 8007f7c:	2602      	movs	r6, #2
 8007f7e:	e742      	b.n	8007e06 <_dtoa_r+0x39e>
 8007f80:	9c07      	ldr	r4, [sp, #28]
 8007f82:	9704      	str	r7, [sp, #16]
 8007f84:	e761      	b.n	8007e4a <_dtoa_r+0x3e2>
 8007f86:	4b27      	ldr	r3, [pc, #156]	@ (8008024 <_dtoa_r+0x5bc>)
 8007f88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007f8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007f8e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f92:	4454      	add	r4, sl
 8007f94:	2900      	cmp	r1, #0
 8007f96:	d053      	beq.n	8008040 <_dtoa_r+0x5d8>
 8007f98:	4928      	ldr	r1, [pc, #160]	@ (800803c <_dtoa_r+0x5d4>)
 8007f9a:	2000      	movs	r0, #0
 8007f9c:	f7f8 fc56 	bl	800084c <__aeabi_ddiv>
 8007fa0:	4633      	mov	r3, r6
 8007fa2:	462a      	mov	r2, r5
 8007fa4:	f7f8 f970 	bl	8000288 <__aeabi_dsub>
 8007fa8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007fac:	4656      	mov	r6, sl
 8007fae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fb2:	f7f8 fdd1 	bl	8000b58 <__aeabi_d2iz>
 8007fb6:	4605      	mov	r5, r0
 8007fb8:	f7f8 fab4 	bl	8000524 <__aeabi_i2d>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fc4:	f7f8 f960 	bl	8000288 <__aeabi_dsub>
 8007fc8:	3530      	adds	r5, #48	@ 0x30
 8007fca:	4602      	mov	r2, r0
 8007fcc:	460b      	mov	r3, r1
 8007fce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007fd2:	f806 5b01 	strb.w	r5, [r6], #1
 8007fd6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007fda:	f7f8 fd7f 	bl	8000adc <__aeabi_dcmplt>
 8007fde:	2800      	cmp	r0, #0
 8007fe0:	d171      	bne.n	80080c6 <_dtoa_r+0x65e>
 8007fe2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007fe6:	4911      	ldr	r1, [pc, #68]	@ (800802c <_dtoa_r+0x5c4>)
 8007fe8:	2000      	movs	r0, #0
 8007fea:	f7f8 f94d 	bl	8000288 <__aeabi_dsub>
 8007fee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007ff2:	f7f8 fd73 	bl	8000adc <__aeabi_dcmplt>
 8007ff6:	2800      	cmp	r0, #0
 8007ff8:	f040 8095 	bne.w	8008126 <_dtoa_r+0x6be>
 8007ffc:	42a6      	cmp	r6, r4
 8007ffe:	f43f af50 	beq.w	8007ea2 <_dtoa_r+0x43a>
 8008002:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008006:	4b0a      	ldr	r3, [pc, #40]	@ (8008030 <_dtoa_r+0x5c8>)
 8008008:	2200      	movs	r2, #0
 800800a:	f7f8 faf5 	bl	80005f8 <__aeabi_dmul>
 800800e:	4b08      	ldr	r3, [pc, #32]	@ (8008030 <_dtoa_r+0x5c8>)
 8008010:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008014:	2200      	movs	r2, #0
 8008016:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800801a:	f7f8 faed 	bl	80005f8 <__aeabi_dmul>
 800801e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008022:	e7c4      	b.n	8007fae <_dtoa_r+0x546>
 8008024:	0800a230 	.word	0x0800a230
 8008028:	0800a208 	.word	0x0800a208
 800802c:	3ff00000 	.word	0x3ff00000
 8008030:	40240000 	.word	0x40240000
 8008034:	401c0000 	.word	0x401c0000
 8008038:	40140000 	.word	0x40140000
 800803c:	3fe00000 	.word	0x3fe00000
 8008040:	4631      	mov	r1, r6
 8008042:	4628      	mov	r0, r5
 8008044:	f7f8 fad8 	bl	80005f8 <__aeabi_dmul>
 8008048:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800804c:	9415      	str	r4, [sp, #84]	@ 0x54
 800804e:	4656      	mov	r6, sl
 8008050:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008054:	f7f8 fd80 	bl	8000b58 <__aeabi_d2iz>
 8008058:	4605      	mov	r5, r0
 800805a:	f7f8 fa63 	bl	8000524 <__aeabi_i2d>
 800805e:	4602      	mov	r2, r0
 8008060:	460b      	mov	r3, r1
 8008062:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008066:	f7f8 f90f 	bl	8000288 <__aeabi_dsub>
 800806a:	3530      	adds	r5, #48	@ 0x30
 800806c:	f806 5b01 	strb.w	r5, [r6], #1
 8008070:	4602      	mov	r2, r0
 8008072:	460b      	mov	r3, r1
 8008074:	42a6      	cmp	r6, r4
 8008076:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800807a:	f04f 0200 	mov.w	r2, #0
 800807e:	d124      	bne.n	80080ca <_dtoa_r+0x662>
 8008080:	4bac      	ldr	r3, [pc, #688]	@ (8008334 <_dtoa_r+0x8cc>)
 8008082:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008086:	f7f8 f901 	bl	800028c <__adddf3>
 800808a:	4602      	mov	r2, r0
 800808c:	460b      	mov	r3, r1
 800808e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008092:	f7f8 fd41 	bl	8000b18 <__aeabi_dcmpgt>
 8008096:	2800      	cmp	r0, #0
 8008098:	d145      	bne.n	8008126 <_dtoa_r+0x6be>
 800809a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800809e:	49a5      	ldr	r1, [pc, #660]	@ (8008334 <_dtoa_r+0x8cc>)
 80080a0:	2000      	movs	r0, #0
 80080a2:	f7f8 f8f1 	bl	8000288 <__aeabi_dsub>
 80080a6:	4602      	mov	r2, r0
 80080a8:	460b      	mov	r3, r1
 80080aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080ae:	f7f8 fd15 	bl	8000adc <__aeabi_dcmplt>
 80080b2:	2800      	cmp	r0, #0
 80080b4:	f43f aef5 	beq.w	8007ea2 <_dtoa_r+0x43a>
 80080b8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80080ba:	1e73      	subs	r3, r6, #1
 80080bc:	9315      	str	r3, [sp, #84]	@ 0x54
 80080be:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80080c2:	2b30      	cmp	r3, #48	@ 0x30
 80080c4:	d0f8      	beq.n	80080b8 <_dtoa_r+0x650>
 80080c6:	9f04      	ldr	r7, [sp, #16]
 80080c8:	e73e      	b.n	8007f48 <_dtoa_r+0x4e0>
 80080ca:	4b9b      	ldr	r3, [pc, #620]	@ (8008338 <_dtoa_r+0x8d0>)
 80080cc:	f7f8 fa94 	bl	80005f8 <__aeabi_dmul>
 80080d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080d4:	e7bc      	b.n	8008050 <_dtoa_r+0x5e8>
 80080d6:	d10c      	bne.n	80080f2 <_dtoa_r+0x68a>
 80080d8:	4b98      	ldr	r3, [pc, #608]	@ (800833c <_dtoa_r+0x8d4>)
 80080da:	2200      	movs	r2, #0
 80080dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80080e0:	f7f8 fa8a 	bl	80005f8 <__aeabi_dmul>
 80080e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80080e8:	f7f8 fd0c 	bl	8000b04 <__aeabi_dcmpge>
 80080ec:	2800      	cmp	r0, #0
 80080ee:	f000 8157 	beq.w	80083a0 <_dtoa_r+0x938>
 80080f2:	2400      	movs	r4, #0
 80080f4:	4625      	mov	r5, r4
 80080f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080f8:	43db      	mvns	r3, r3
 80080fa:	9304      	str	r3, [sp, #16]
 80080fc:	4656      	mov	r6, sl
 80080fe:	2700      	movs	r7, #0
 8008100:	4621      	mov	r1, r4
 8008102:	4658      	mov	r0, fp
 8008104:	f000 fbb4 	bl	8008870 <_Bfree>
 8008108:	2d00      	cmp	r5, #0
 800810a:	d0dc      	beq.n	80080c6 <_dtoa_r+0x65e>
 800810c:	b12f      	cbz	r7, 800811a <_dtoa_r+0x6b2>
 800810e:	42af      	cmp	r7, r5
 8008110:	d003      	beq.n	800811a <_dtoa_r+0x6b2>
 8008112:	4639      	mov	r1, r7
 8008114:	4658      	mov	r0, fp
 8008116:	f000 fbab 	bl	8008870 <_Bfree>
 800811a:	4629      	mov	r1, r5
 800811c:	4658      	mov	r0, fp
 800811e:	f000 fba7 	bl	8008870 <_Bfree>
 8008122:	e7d0      	b.n	80080c6 <_dtoa_r+0x65e>
 8008124:	9704      	str	r7, [sp, #16]
 8008126:	4633      	mov	r3, r6
 8008128:	461e      	mov	r6, r3
 800812a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800812e:	2a39      	cmp	r2, #57	@ 0x39
 8008130:	d107      	bne.n	8008142 <_dtoa_r+0x6da>
 8008132:	459a      	cmp	sl, r3
 8008134:	d1f8      	bne.n	8008128 <_dtoa_r+0x6c0>
 8008136:	9a04      	ldr	r2, [sp, #16]
 8008138:	3201      	adds	r2, #1
 800813a:	9204      	str	r2, [sp, #16]
 800813c:	2230      	movs	r2, #48	@ 0x30
 800813e:	f88a 2000 	strb.w	r2, [sl]
 8008142:	781a      	ldrb	r2, [r3, #0]
 8008144:	3201      	adds	r2, #1
 8008146:	701a      	strb	r2, [r3, #0]
 8008148:	e7bd      	b.n	80080c6 <_dtoa_r+0x65e>
 800814a:	4b7b      	ldr	r3, [pc, #492]	@ (8008338 <_dtoa_r+0x8d0>)
 800814c:	2200      	movs	r2, #0
 800814e:	f7f8 fa53 	bl	80005f8 <__aeabi_dmul>
 8008152:	2200      	movs	r2, #0
 8008154:	2300      	movs	r3, #0
 8008156:	4604      	mov	r4, r0
 8008158:	460d      	mov	r5, r1
 800815a:	f7f8 fcb5 	bl	8000ac8 <__aeabi_dcmpeq>
 800815e:	2800      	cmp	r0, #0
 8008160:	f43f aebb 	beq.w	8007eda <_dtoa_r+0x472>
 8008164:	e6f0      	b.n	8007f48 <_dtoa_r+0x4e0>
 8008166:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008168:	2a00      	cmp	r2, #0
 800816a:	f000 80db 	beq.w	8008324 <_dtoa_r+0x8bc>
 800816e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008170:	2a01      	cmp	r2, #1
 8008172:	f300 80bf 	bgt.w	80082f4 <_dtoa_r+0x88c>
 8008176:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008178:	2a00      	cmp	r2, #0
 800817a:	f000 80b7 	beq.w	80082ec <_dtoa_r+0x884>
 800817e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008182:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008184:	4646      	mov	r6, r8
 8008186:	9a08      	ldr	r2, [sp, #32]
 8008188:	2101      	movs	r1, #1
 800818a:	441a      	add	r2, r3
 800818c:	4658      	mov	r0, fp
 800818e:	4498      	add	r8, r3
 8008190:	9208      	str	r2, [sp, #32]
 8008192:	f000 fc21 	bl	80089d8 <__i2b>
 8008196:	4605      	mov	r5, r0
 8008198:	b15e      	cbz	r6, 80081b2 <_dtoa_r+0x74a>
 800819a:	9b08      	ldr	r3, [sp, #32]
 800819c:	2b00      	cmp	r3, #0
 800819e:	dd08      	ble.n	80081b2 <_dtoa_r+0x74a>
 80081a0:	42b3      	cmp	r3, r6
 80081a2:	9a08      	ldr	r2, [sp, #32]
 80081a4:	bfa8      	it	ge
 80081a6:	4633      	movge	r3, r6
 80081a8:	eba8 0803 	sub.w	r8, r8, r3
 80081ac:	1af6      	subs	r6, r6, r3
 80081ae:	1ad3      	subs	r3, r2, r3
 80081b0:	9308      	str	r3, [sp, #32]
 80081b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081b4:	b1f3      	cbz	r3, 80081f4 <_dtoa_r+0x78c>
 80081b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	f000 80b7 	beq.w	800832c <_dtoa_r+0x8c4>
 80081be:	b18c      	cbz	r4, 80081e4 <_dtoa_r+0x77c>
 80081c0:	4629      	mov	r1, r5
 80081c2:	4622      	mov	r2, r4
 80081c4:	4658      	mov	r0, fp
 80081c6:	f000 fcc7 	bl	8008b58 <__pow5mult>
 80081ca:	464a      	mov	r2, r9
 80081cc:	4601      	mov	r1, r0
 80081ce:	4605      	mov	r5, r0
 80081d0:	4658      	mov	r0, fp
 80081d2:	f000 fc17 	bl	8008a04 <__multiply>
 80081d6:	4649      	mov	r1, r9
 80081d8:	9004      	str	r0, [sp, #16]
 80081da:	4658      	mov	r0, fp
 80081dc:	f000 fb48 	bl	8008870 <_Bfree>
 80081e0:	9b04      	ldr	r3, [sp, #16]
 80081e2:	4699      	mov	r9, r3
 80081e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081e6:	1b1a      	subs	r2, r3, r4
 80081e8:	d004      	beq.n	80081f4 <_dtoa_r+0x78c>
 80081ea:	4649      	mov	r1, r9
 80081ec:	4658      	mov	r0, fp
 80081ee:	f000 fcb3 	bl	8008b58 <__pow5mult>
 80081f2:	4681      	mov	r9, r0
 80081f4:	2101      	movs	r1, #1
 80081f6:	4658      	mov	r0, fp
 80081f8:	f000 fbee 	bl	80089d8 <__i2b>
 80081fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081fe:	4604      	mov	r4, r0
 8008200:	2b00      	cmp	r3, #0
 8008202:	f000 81cf 	beq.w	80085a4 <_dtoa_r+0xb3c>
 8008206:	461a      	mov	r2, r3
 8008208:	4601      	mov	r1, r0
 800820a:	4658      	mov	r0, fp
 800820c:	f000 fca4 	bl	8008b58 <__pow5mult>
 8008210:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008212:	2b01      	cmp	r3, #1
 8008214:	4604      	mov	r4, r0
 8008216:	f300 8095 	bgt.w	8008344 <_dtoa_r+0x8dc>
 800821a:	9b02      	ldr	r3, [sp, #8]
 800821c:	2b00      	cmp	r3, #0
 800821e:	f040 8087 	bne.w	8008330 <_dtoa_r+0x8c8>
 8008222:	9b03      	ldr	r3, [sp, #12]
 8008224:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008228:	2b00      	cmp	r3, #0
 800822a:	f040 8089 	bne.w	8008340 <_dtoa_r+0x8d8>
 800822e:	9b03      	ldr	r3, [sp, #12]
 8008230:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008234:	0d1b      	lsrs	r3, r3, #20
 8008236:	051b      	lsls	r3, r3, #20
 8008238:	b12b      	cbz	r3, 8008246 <_dtoa_r+0x7de>
 800823a:	9b08      	ldr	r3, [sp, #32]
 800823c:	3301      	adds	r3, #1
 800823e:	9308      	str	r3, [sp, #32]
 8008240:	f108 0801 	add.w	r8, r8, #1
 8008244:	2301      	movs	r3, #1
 8008246:	930a      	str	r3, [sp, #40]	@ 0x28
 8008248:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800824a:	2b00      	cmp	r3, #0
 800824c:	f000 81b0 	beq.w	80085b0 <_dtoa_r+0xb48>
 8008250:	6923      	ldr	r3, [r4, #16]
 8008252:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008256:	6918      	ldr	r0, [r3, #16]
 8008258:	f000 fb72 	bl	8008940 <__hi0bits>
 800825c:	f1c0 0020 	rsb	r0, r0, #32
 8008260:	9b08      	ldr	r3, [sp, #32]
 8008262:	4418      	add	r0, r3
 8008264:	f010 001f 	ands.w	r0, r0, #31
 8008268:	d077      	beq.n	800835a <_dtoa_r+0x8f2>
 800826a:	f1c0 0320 	rsb	r3, r0, #32
 800826e:	2b04      	cmp	r3, #4
 8008270:	dd6b      	ble.n	800834a <_dtoa_r+0x8e2>
 8008272:	9b08      	ldr	r3, [sp, #32]
 8008274:	f1c0 001c 	rsb	r0, r0, #28
 8008278:	4403      	add	r3, r0
 800827a:	4480      	add	r8, r0
 800827c:	4406      	add	r6, r0
 800827e:	9308      	str	r3, [sp, #32]
 8008280:	f1b8 0f00 	cmp.w	r8, #0
 8008284:	dd05      	ble.n	8008292 <_dtoa_r+0x82a>
 8008286:	4649      	mov	r1, r9
 8008288:	4642      	mov	r2, r8
 800828a:	4658      	mov	r0, fp
 800828c:	f000 fcbe 	bl	8008c0c <__lshift>
 8008290:	4681      	mov	r9, r0
 8008292:	9b08      	ldr	r3, [sp, #32]
 8008294:	2b00      	cmp	r3, #0
 8008296:	dd05      	ble.n	80082a4 <_dtoa_r+0x83c>
 8008298:	4621      	mov	r1, r4
 800829a:	461a      	mov	r2, r3
 800829c:	4658      	mov	r0, fp
 800829e:	f000 fcb5 	bl	8008c0c <__lshift>
 80082a2:	4604      	mov	r4, r0
 80082a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d059      	beq.n	800835e <_dtoa_r+0x8f6>
 80082aa:	4621      	mov	r1, r4
 80082ac:	4648      	mov	r0, r9
 80082ae:	f000 fd19 	bl	8008ce4 <__mcmp>
 80082b2:	2800      	cmp	r0, #0
 80082b4:	da53      	bge.n	800835e <_dtoa_r+0x8f6>
 80082b6:	1e7b      	subs	r3, r7, #1
 80082b8:	9304      	str	r3, [sp, #16]
 80082ba:	4649      	mov	r1, r9
 80082bc:	2300      	movs	r3, #0
 80082be:	220a      	movs	r2, #10
 80082c0:	4658      	mov	r0, fp
 80082c2:	f000 faf7 	bl	80088b4 <__multadd>
 80082c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082c8:	4681      	mov	r9, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	f000 8172 	beq.w	80085b4 <_dtoa_r+0xb4c>
 80082d0:	2300      	movs	r3, #0
 80082d2:	4629      	mov	r1, r5
 80082d4:	220a      	movs	r2, #10
 80082d6:	4658      	mov	r0, fp
 80082d8:	f000 faec 	bl	80088b4 <__multadd>
 80082dc:	9b00      	ldr	r3, [sp, #0]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	4605      	mov	r5, r0
 80082e2:	dc67      	bgt.n	80083b4 <_dtoa_r+0x94c>
 80082e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	dc41      	bgt.n	800836e <_dtoa_r+0x906>
 80082ea:	e063      	b.n	80083b4 <_dtoa_r+0x94c>
 80082ec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80082ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80082f2:	e746      	b.n	8008182 <_dtoa_r+0x71a>
 80082f4:	9b07      	ldr	r3, [sp, #28]
 80082f6:	1e5c      	subs	r4, r3, #1
 80082f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082fa:	42a3      	cmp	r3, r4
 80082fc:	bfbf      	itttt	lt
 80082fe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008300:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008302:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008304:	1ae3      	sublt	r3, r4, r3
 8008306:	bfb4      	ite	lt
 8008308:	18d2      	addlt	r2, r2, r3
 800830a:	1b1c      	subge	r4, r3, r4
 800830c:	9b07      	ldr	r3, [sp, #28]
 800830e:	bfbc      	itt	lt
 8008310:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008312:	2400      	movlt	r4, #0
 8008314:	2b00      	cmp	r3, #0
 8008316:	bfb5      	itete	lt
 8008318:	eba8 0603 	sublt.w	r6, r8, r3
 800831c:	9b07      	ldrge	r3, [sp, #28]
 800831e:	2300      	movlt	r3, #0
 8008320:	4646      	movge	r6, r8
 8008322:	e730      	b.n	8008186 <_dtoa_r+0x71e>
 8008324:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008326:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008328:	4646      	mov	r6, r8
 800832a:	e735      	b.n	8008198 <_dtoa_r+0x730>
 800832c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800832e:	e75c      	b.n	80081ea <_dtoa_r+0x782>
 8008330:	2300      	movs	r3, #0
 8008332:	e788      	b.n	8008246 <_dtoa_r+0x7de>
 8008334:	3fe00000 	.word	0x3fe00000
 8008338:	40240000 	.word	0x40240000
 800833c:	40140000 	.word	0x40140000
 8008340:	9b02      	ldr	r3, [sp, #8]
 8008342:	e780      	b.n	8008246 <_dtoa_r+0x7de>
 8008344:	2300      	movs	r3, #0
 8008346:	930a      	str	r3, [sp, #40]	@ 0x28
 8008348:	e782      	b.n	8008250 <_dtoa_r+0x7e8>
 800834a:	d099      	beq.n	8008280 <_dtoa_r+0x818>
 800834c:	9a08      	ldr	r2, [sp, #32]
 800834e:	331c      	adds	r3, #28
 8008350:	441a      	add	r2, r3
 8008352:	4498      	add	r8, r3
 8008354:	441e      	add	r6, r3
 8008356:	9208      	str	r2, [sp, #32]
 8008358:	e792      	b.n	8008280 <_dtoa_r+0x818>
 800835a:	4603      	mov	r3, r0
 800835c:	e7f6      	b.n	800834c <_dtoa_r+0x8e4>
 800835e:	9b07      	ldr	r3, [sp, #28]
 8008360:	9704      	str	r7, [sp, #16]
 8008362:	2b00      	cmp	r3, #0
 8008364:	dc20      	bgt.n	80083a8 <_dtoa_r+0x940>
 8008366:	9300      	str	r3, [sp, #0]
 8008368:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800836a:	2b02      	cmp	r3, #2
 800836c:	dd1e      	ble.n	80083ac <_dtoa_r+0x944>
 800836e:	9b00      	ldr	r3, [sp, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	f47f aec0 	bne.w	80080f6 <_dtoa_r+0x68e>
 8008376:	4621      	mov	r1, r4
 8008378:	2205      	movs	r2, #5
 800837a:	4658      	mov	r0, fp
 800837c:	f000 fa9a 	bl	80088b4 <__multadd>
 8008380:	4601      	mov	r1, r0
 8008382:	4604      	mov	r4, r0
 8008384:	4648      	mov	r0, r9
 8008386:	f000 fcad 	bl	8008ce4 <__mcmp>
 800838a:	2800      	cmp	r0, #0
 800838c:	f77f aeb3 	ble.w	80080f6 <_dtoa_r+0x68e>
 8008390:	4656      	mov	r6, sl
 8008392:	2331      	movs	r3, #49	@ 0x31
 8008394:	f806 3b01 	strb.w	r3, [r6], #1
 8008398:	9b04      	ldr	r3, [sp, #16]
 800839a:	3301      	adds	r3, #1
 800839c:	9304      	str	r3, [sp, #16]
 800839e:	e6ae      	b.n	80080fe <_dtoa_r+0x696>
 80083a0:	9c07      	ldr	r4, [sp, #28]
 80083a2:	9704      	str	r7, [sp, #16]
 80083a4:	4625      	mov	r5, r4
 80083a6:	e7f3      	b.n	8008390 <_dtoa_r+0x928>
 80083a8:	9b07      	ldr	r3, [sp, #28]
 80083aa:	9300      	str	r3, [sp, #0]
 80083ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	f000 8104 	beq.w	80085bc <_dtoa_r+0xb54>
 80083b4:	2e00      	cmp	r6, #0
 80083b6:	dd05      	ble.n	80083c4 <_dtoa_r+0x95c>
 80083b8:	4629      	mov	r1, r5
 80083ba:	4632      	mov	r2, r6
 80083bc:	4658      	mov	r0, fp
 80083be:	f000 fc25 	bl	8008c0c <__lshift>
 80083c2:	4605      	mov	r5, r0
 80083c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d05a      	beq.n	8008480 <_dtoa_r+0xa18>
 80083ca:	6869      	ldr	r1, [r5, #4]
 80083cc:	4658      	mov	r0, fp
 80083ce:	f000 fa0f 	bl	80087f0 <_Balloc>
 80083d2:	4606      	mov	r6, r0
 80083d4:	b928      	cbnz	r0, 80083e2 <_dtoa_r+0x97a>
 80083d6:	4b84      	ldr	r3, [pc, #528]	@ (80085e8 <_dtoa_r+0xb80>)
 80083d8:	4602      	mov	r2, r0
 80083da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80083de:	f7ff bb5a 	b.w	8007a96 <_dtoa_r+0x2e>
 80083e2:	692a      	ldr	r2, [r5, #16]
 80083e4:	3202      	adds	r2, #2
 80083e6:	0092      	lsls	r2, r2, #2
 80083e8:	f105 010c 	add.w	r1, r5, #12
 80083ec:	300c      	adds	r0, #12
 80083ee:	f001 f803 	bl	80093f8 <memcpy>
 80083f2:	2201      	movs	r2, #1
 80083f4:	4631      	mov	r1, r6
 80083f6:	4658      	mov	r0, fp
 80083f8:	f000 fc08 	bl	8008c0c <__lshift>
 80083fc:	f10a 0301 	add.w	r3, sl, #1
 8008400:	9307      	str	r3, [sp, #28]
 8008402:	9b00      	ldr	r3, [sp, #0]
 8008404:	4453      	add	r3, sl
 8008406:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008408:	9b02      	ldr	r3, [sp, #8]
 800840a:	f003 0301 	and.w	r3, r3, #1
 800840e:	462f      	mov	r7, r5
 8008410:	930a      	str	r3, [sp, #40]	@ 0x28
 8008412:	4605      	mov	r5, r0
 8008414:	9b07      	ldr	r3, [sp, #28]
 8008416:	4621      	mov	r1, r4
 8008418:	3b01      	subs	r3, #1
 800841a:	4648      	mov	r0, r9
 800841c:	9300      	str	r3, [sp, #0]
 800841e:	f7ff fa9a 	bl	8007956 <quorem>
 8008422:	4639      	mov	r1, r7
 8008424:	9002      	str	r0, [sp, #8]
 8008426:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800842a:	4648      	mov	r0, r9
 800842c:	f000 fc5a 	bl	8008ce4 <__mcmp>
 8008430:	462a      	mov	r2, r5
 8008432:	9008      	str	r0, [sp, #32]
 8008434:	4621      	mov	r1, r4
 8008436:	4658      	mov	r0, fp
 8008438:	f000 fc70 	bl	8008d1c <__mdiff>
 800843c:	68c2      	ldr	r2, [r0, #12]
 800843e:	4606      	mov	r6, r0
 8008440:	bb02      	cbnz	r2, 8008484 <_dtoa_r+0xa1c>
 8008442:	4601      	mov	r1, r0
 8008444:	4648      	mov	r0, r9
 8008446:	f000 fc4d 	bl	8008ce4 <__mcmp>
 800844a:	4602      	mov	r2, r0
 800844c:	4631      	mov	r1, r6
 800844e:	4658      	mov	r0, fp
 8008450:	920e      	str	r2, [sp, #56]	@ 0x38
 8008452:	f000 fa0d 	bl	8008870 <_Bfree>
 8008456:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008458:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800845a:	9e07      	ldr	r6, [sp, #28]
 800845c:	ea43 0102 	orr.w	r1, r3, r2
 8008460:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008462:	4319      	orrs	r1, r3
 8008464:	d110      	bne.n	8008488 <_dtoa_r+0xa20>
 8008466:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800846a:	d029      	beq.n	80084c0 <_dtoa_r+0xa58>
 800846c:	9b08      	ldr	r3, [sp, #32]
 800846e:	2b00      	cmp	r3, #0
 8008470:	dd02      	ble.n	8008478 <_dtoa_r+0xa10>
 8008472:	9b02      	ldr	r3, [sp, #8]
 8008474:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008478:	9b00      	ldr	r3, [sp, #0]
 800847a:	f883 8000 	strb.w	r8, [r3]
 800847e:	e63f      	b.n	8008100 <_dtoa_r+0x698>
 8008480:	4628      	mov	r0, r5
 8008482:	e7bb      	b.n	80083fc <_dtoa_r+0x994>
 8008484:	2201      	movs	r2, #1
 8008486:	e7e1      	b.n	800844c <_dtoa_r+0x9e4>
 8008488:	9b08      	ldr	r3, [sp, #32]
 800848a:	2b00      	cmp	r3, #0
 800848c:	db04      	blt.n	8008498 <_dtoa_r+0xa30>
 800848e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008490:	430b      	orrs	r3, r1
 8008492:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008494:	430b      	orrs	r3, r1
 8008496:	d120      	bne.n	80084da <_dtoa_r+0xa72>
 8008498:	2a00      	cmp	r2, #0
 800849a:	dded      	ble.n	8008478 <_dtoa_r+0xa10>
 800849c:	4649      	mov	r1, r9
 800849e:	2201      	movs	r2, #1
 80084a0:	4658      	mov	r0, fp
 80084a2:	f000 fbb3 	bl	8008c0c <__lshift>
 80084a6:	4621      	mov	r1, r4
 80084a8:	4681      	mov	r9, r0
 80084aa:	f000 fc1b 	bl	8008ce4 <__mcmp>
 80084ae:	2800      	cmp	r0, #0
 80084b0:	dc03      	bgt.n	80084ba <_dtoa_r+0xa52>
 80084b2:	d1e1      	bne.n	8008478 <_dtoa_r+0xa10>
 80084b4:	f018 0f01 	tst.w	r8, #1
 80084b8:	d0de      	beq.n	8008478 <_dtoa_r+0xa10>
 80084ba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80084be:	d1d8      	bne.n	8008472 <_dtoa_r+0xa0a>
 80084c0:	9a00      	ldr	r2, [sp, #0]
 80084c2:	2339      	movs	r3, #57	@ 0x39
 80084c4:	7013      	strb	r3, [r2, #0]
 80084c6:	4633      	mov	r3, r6
 80084c8:	461e      	mov	r6, r3
 80084ca:	3b01      	subs	r3, #1
 80084cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80084d0:	2a39      	cmp	r2, #57	@ 0x39
 80084d2:	d052      	beq.n	800857a <_dtoa_r+0xb12>
 80084d4:	3201      	adds	r2, #1
 80084d6:	701a      	strb	r2, [r3, #0]
 80084d8:	e612      	b.n	8008100 <_dtoa_r+0x698>
 80084da:	2a00      	cmp	r2, #0
 80084dc:	dd07      	ble.n	80084ee <_dtoa_r+0xa86>
 80084de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80084e2:	d0ed      	beq.n	80084c0 <_dtoa_r+0xa58>
 80084e4:	9a00      	ldr	r2, [sp, #0]
 80084e6:	f108 0301 	add.w	r3, r8, #1
 80084ea:	7013      	strb	r3, [r2, #0]
 80084ec:	e608      	b.n	8008100 <_dtoa_r+0x698>
 80084ee:	9b07      	ldr	r3, [sp, #28]
 80084f0:	9a07      	ldr	r2, [sp, #28]
 80084f2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80084f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d028      	beq.n	800854e <_dtoa_r+0xae6>
 80084fc:	4649      	mov	r1, r9
 80084fe:	2300      	movs	r3, #0
 8008500:	220a      	movs	r2, #10
 8008502:	4658      	mov	r0, fp
 8008504:	f000 f9d6 	bl	80088b4 <__multadd>
 8008508:	42af      	cmp	r7, r5
 800850a:	4681      	mov	r9, r0
 800850c:	f04f 0300 	mov.w	r3, #0
 8008510:	f04f 020a 	mov.w	r2, #10
 8008514:	4639      	mov	r1, r7
 8008516:	4658      	mov	r0, fp
 8008518:	d107      	bne.n	800852a <_dtoa_r+0xac2>
 800851a:	f000 f9cb 	bl	80088b4 <__multadd>
 800851e:	4607      	mov	r7, r0
 8008520:	4605      	mov	r5, r0
 8008522:	9b07      	ldr	r3, [sp, #28]
 8008524:	3301      	adds	r3, #1
 8008526:	9307      	str	r3, [sp, #28]
 8008528:	e774      	b.n	8008414 <_dtoa_r+0x9ac>
 800852a:	f000 f9c3 	bl	80088b4 <__multadd>
 800852e:	4629      	mov	r1, r5
 8008530:	4607      	mov	r7, r0
 8008532:	2300      	movs	r3, #0
 8008534:	220a      	movs	r2, #10
 8008536:	4658      	mov	r0, fp
 8008538:	f000 f9bc 	bl	80088b4 <__multadd>
 800853c:	4605      	mov	r5, r0
 800853e:	e7f0      	b.n	8008522 <_dtoa_r+0xaba>
 8008540:	9b00      	ldr	r3, [sp, #0]
 8008542:	2b00      	cmp	r3, #0
 8008544:	bfcc      	ite	gt
 8008546:	461e      	movgt	r6, r3
 8008548:	2601      	movle	r6, #1
 800854a:	4456      	add	r6, sl
 800854c:	2700      	movs	r7, #0
 800854e:	4649      	mov	r1, r9
 8008550:	2201      	movs	r2, #1
 8008552:	4658      	mov	r0, fp
 8008554:	f000 fb5a 	bl	8008c0c <__lshift>
 8008558:	4621      	mov	r1, r4
 800855a:	4681      	mov	r9, r0
 800855c:	f000 fbc2 	bl	8008ce4 <__mcmp>
 8008560:	2800      	cmp	r0, #0
 8008562:	dcb0      	bgt.n	80084c6 <_dtoa_r+0xa5e>
 8008564:	d102      	bne.n	800856c <_dtoa_r+0xb04>
 8008566:	f018 0f01 	tst.w	r8, #1
 800856a:	d1ac      	bne.n	80084c6 <_dtoa_r+0xa5e>
 800856c:	4633      	mov	r3, r6
 800856e:	461e      	mov	r6, r3
 8008570:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008574:	2a30      	cmp	r2, #48	@ 0x30
 8008576:	d0fa      	beq.n	800856e <_dtoa_r+0xb06>
 8008578:	e5c2      	b.n	8008100 <_dtoa_r+0x698>
 800857a:	459a      	cmp	sl, r3
 800857c:	d1a4      	bne.n	80084c8 <_dtoa_r+0xa60>
 800857e:	9b04      	ldr	r3, [sp, #16]
 8008580:	3301      	adds	r3, #1
 8008582:	9304      	str	r3, [sp, #16]
 8008584:	2331      	movs	r3, #49	@ 0x31
 8008586:	f88a 3000 	strb.w	r3, [sl]
 800858a:	e5b9      	b.n	8008100 <_dtoa_r+0x698>
 800858c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800858e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80085ec <_dtoa_r+0xb84>
 8008592:	b11b      	cbz	r3, 800859c <_dtoa_r+0xb34>
 8008594:	f10a 0308 	add.w	r3, sl, #8
 8008598:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800859a:	6013      	str	r3, [r2, #0]
 800859c:	4650      	mov	r0, sl
 800859e:	b019      	add	sp, #100	@ 0x64
 80085a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	f77f ae37 	ble.w	800821a <_dtoa_r+0x7b2>
 80085ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80085b0:	2001      	movs	r0, #1
 80085b2:	e655      	b.n	8008260 <_dtoa_r+0x7f8>
 80085b4:	9b00      	ldr	r3, [sp, #0]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	f77f aed6 	ble.w	8008368 <_dtoa_r+0x900>
 80085bc:	4656      	mov	r6, sl
 80085be:	4621      	mov	r1, r4
 80085c0:	4648      	mov	r0, r9
 80085c2:	f7ff f9c8 	bl	8007956 <quorem>
 80085c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80085ca:	f806 8b01 	strb.w	r8, [r6], #1
 80085ce:	9b00      	ldr	r3, [sp, #0]
 80085d0:	eba6 020a 	sub.w	r2, r6, sl
 80085d4:	4293      	cmp	r3, r2
 80085d6:	ddb3      	ble.n	8008540 <_dtoa_r+0xad8>
 80085d8:	4649      	mov	r1, r9
 80085da:	2300      	movs	r3, #0
 80085dc:	220a      	movs	r2, #10
 80085de:	4658      	mov	r0, fp
 80085e0:	f000 f968 	bl	80088b4 <__multadd>
 80085e4:	4681      	mov	r9, r0
 80085e6:	e7ea      	b.n	80085be <_dtoa_r+0xb56>
 80085e8:	0800a190 	.word	0x0800a190
 80085ec:	0800a114 	.word	0x0800a114

080085f0 <_free_r>:
 80085f0:	b538      	push	{r3, r4, r5, lr}
 80085f2:	4605      	mov	r5, r0
 80085f4:	2900      	cmp	r1, #0
 80085f6:	d041      	beq.n	800867c <_free_r+0x8c>
 80085f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085fc:	1f0c      	subs	r4, r1, #4
 80085fe:	2b00      	cmp	r3, #0
 8008600:	bfb8      	it	lt
 8008602:	18e4      	addlt	r4, r4, r3
 8008604:	f000 f8e8 	bl	80087d8 <__malloc_lock>
 8008608:	4a1d      	ldr	r2, [pc, #116]	@ (8008680 <_free_r+0x90>)
 800860a:	6813      	ldr	r3, [r2, #0]
 800860c:	b933      	cbnz	r3, 800861c <_free_r+0x2c>
 800860e:	6063      	str	r3, [r4, #4]
 8008610:	6014      	str	r4, [r2, #0]
 8008612:	4628      	mov	r0, r5
 8008614:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008618:	f000 b8e4 	b.w	80087e4 <__malloc_unlock>
 800861c:	42a3      	cmp	r3, r4
 800861e:	d908      	bls.n	8008632 <_free_r+0x42>
 8008620:	6820      	ldr	r0, [r4, #0]
 8008622:	1821      	adds	r1, r4, r0
 8008624:	428b      	cmp	r3, r1
 8008626:	bf01      	itttt	eq
 8008628:	6819      	ldreq	r1, [r3, #0]
 800862a:	685b      	ldreq	r3, [r3, #4]
 800862c:	1809      	addeq	r1, r1, r0
 800862e:	6021      	streq	r1, [r4, #0]
 8008630:	e7ed      	b.n	800860e <_free_r+0x1e>
 8008632:	461a      	mov	r2, r3
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	b10b      	cbz	r3, 800863c <_free_r+0x4c>
 8008638:	42a3      	cmp	r3, r4
 800863a:	d9fa      	bls.n	8008632 <_free_r+0x42>
 800863c:	6811      	ldr	r1, [r2, #0]
 800863e:	1850      	adds	r0, r2, r1
 8008640:	42a0      	cmp	r0, r4
 8008642:	d10b      	bne.n	800865c <_free_r+0x6c>
 8008644:	6820      	ldr	r0, [r4, #0]
 8008646:	4401      	add	r1, r0
 8008648:	1850      	adds	r0, r2, r1
 800864a:	4283      	cmp	r3, r0
 800864c:	6011      	str	r1, [r2, #0]
 800864e:	d1e0      	bne.n	8008612 <_free_r+0x22>
 8008650:	6818      	ldr	r0, [r3, #0]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	6053      	str	r3, [r2, #4]
 8008656:	4408      	add	r0, r1
 8008658:	6010      	str	r0, [r2, #0]
 800865a:	e7da      	b.n	8008612 <_free_r+0x22>
 800865c:	d902      	bls.n	8008664 <_free_r+0x74>
 800865e:	230c      	movs	r3, #12
 8008660:	602b      	str	r3, [r5, #0]
 8008662:	e7d6      	b.n	8008612 <_free_r+0x22>
 8008664:	6820      	ldr	r0, [r4, #0]
 8008666:	1821      	adds	r1, r4, r0
 8008668:	428b      	cmp	r3, r1
 800866a:	bf04      	itt	eq
 800866c:	6819      	ldreq	r1, [r3, #0]
 800866e:	685b      	ldreq	r3, [r3, #4]
 8008670:	6063      	str	r3, [r4, #4]
 8008672:	bf04      	itt	eq
 8008674:	1809      	addeq	r1, r1, r0
 8008676:	6021      	streq	r1, [r4, #0]
 8008678:	6054      	str	r4, [r2, #4]
 800867a:	e7ca      	b.n	8008612 <_free_r+0x22>
 800867c:	bd38      	pop	{r3, r4, r5, pc}
 800867e:	bf00      	nop
 8008680:	20005df8 	.word	0x20005df8

08008684 <malloc>:
 8008684:	4b02      	ldr	r3, [pc, #8]	@ (8008690 <malloc+0xc>)
 8008686:	4601      	mov	r1, r0
 8008688:	6818      	ldr	r0, [r3, #0]
 800868a:	f000 b825 	b.w	80086d8 <_malloc_r>
 800868e:	bf00      	nop
 8008690:	20000020 	.word	0x20000020

08008694 <sbrk_aligned>:
 8008694:	b570      	push	{r4, r5, r6, lr}
 8008696:	4e0f      	ldr	r6, [pc, #60]	@ (80086d4 <sbrk_aligned+0x40>)
 8008698:	460c      	mov	r4, r1
 800869a:	6831      	ldr	r1, [r6, #0]
 800869c:	4605      	mov	r5, r0
 800869e:	b911      	cbnz	r1, 80086a6 <sbrk_aligned+0x12>
 80086a0:	f000 fe9a 	bl	80093d8 <_sbrk_r>
 80086a4:	6030      	str	r0, [r6, #0]
 80086a6:	4621      	mov	r1, r4
 80086a8:	4628      	mov	r0, r5
 80086aa:	f000 fe95 	bl	80093d8 <_sbrk_r>
 80086ae:	1c43      	adds	r3, r0, #1
 80086b0:	d103      	bne.n	80086ba <sbrk_aligned+0x26>
 80086b2:	f04f 34ff 	mov.w	r4, #4294967295
 80086b6:	4620      	mov	r0, r4
 80086b8:	bd70      	pop	{r4, r5, r6, pc}
 80086ba:	1cc4      	adds	r4, r0, #3
 80086bc:	f024 0403 	bic.w	r4, r4, #3
 80086c0:	42a0      	cmp	r0, r4
 80086c2:	d0f8      	beq.n	80086b6 <sbrk_aligned+0x22>
 80086c4:	1a21      	subs	r1, r4, r0
 80086c6:	4628      	mov	r0, r5
 80086c8:	f000 fe86 	bl	80093d8 <_sbrk_r>
 80086cc:	3001      	adds	r0, #1
 80086ce:	d1f2      	bne.n	80086b6 <sbrk_aligned+0x22>
 80086d0:	e7ef      	b.n	80086b2 <sbrk_aligned+0x1e>
 80086d2:	bf00      	nop
 80086d4:	20005df4 	.word	0x20005df4

080086d8 <_malloc_r>:
 80086d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086dc:	1ccd      	adds	r5, r1, #3
 80086de:	f025 0503 	bic.w	r5, r5, #3
 80086e2:	3508      	adds	r5, #8
 80086e4:	2d0c      	cmp	r5, #12
 80086e6:	bf38      	it	cc
 80086e8:	250c      	movcc	r5, #12
 80086ea:	2d00      	cmp	r5, #0
 80086ec:	4606      	mov	r6, r0
 80086ee:	db01      	blt.n	80086f4 <_malloc_r+0x1c>
 80086f0:	42a9      	cmp	r1, r5
 80086f2:	d904      	bls.n	80086fe <_malloc_r+0x26>
 80086f4:	230c      	movs	r3, #12
 80086f6:	6033      	str	r3, [r6, #0]
 80086f8:	2000      	movs	r0, #0
 80086fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80087d4 <_malloc_r+0xfc>
 8008702:	f000 f869 	bl	80087d8 <__malloc_lock>
 8008706:	f8d8 3000 	ldr.w	r3, [r8]
 800870a:	461c      	mov	r4, r3
 800870c:	bb44      	cbnz	r4, 8008760 <_malloc_r+0x88>
 800870e:	4629      	mov	r1, r5
 8008710:	4630      	mov	r0, r6
 8008712:	f7ff ffbf 	bl	8008694 <sbrk_aligned>
 8008716:	1c43      	adds	r3, r0, #1
 8008718:	4604      	mov	r4, r0
 800871a:	d158      	bne.n	80087ce <_malloc_r+0xf6>
 800871c:	f8d8 4000 	ldr.w	r4, [r8]
 8008720:	4627      	mov	r7, r4
 8008722:	2f00      	cmp	r7, #0
 8008724:	d143      	bne.n	80087ae <_malloc_r+0xd6>
 8008726:	2c00      	cmp	r4, #0
 8008728:	d04b      	beq.n	80087c2 <_malloc_r+0xea>
 800872a:	6823      	ldr	r3, [r4, #0]
 800872c:	4639      	mov	r1, r7
 800872e:	4630      	mov	r0, r6
 8008730:	eb04 0903 	add.w	r9, r4, r3
 8008734:	f000 fe50 	bl	80093d8 <_sbrk_r>
 8008738:	4581      	cmp	r9, r0
 800873a:	d142      	bne.n	80087c2 <_malloc_r+0xea>
 800873c:	6821      	ldr	r1, [r4, #0]
 800873e:	1a6d      	subs	r5, r5, r1
 8008740:	4629      	mov	r1, r5
 8008742:	4630      	mov	r0, r6
 8008744:	f7ff ffa6 	bl	8008694 <sbrk_aligned>
 8008748:	3001      	adds	r0, #1
 800874a:	d03a      	beq.n	80087c2 <_malloc_r+0xea>
 800874c:	6823      	ldr	r3, [r4, #0]
 800874e:	442b      	add	r3, r5
 8008750:	6023      	str	r3, [r4, #0]
 8008752:	f8d8 3000 	ldr.w	r3, [r8]
 8008756:	685a      	ldr	r2, [r3, #4]
 8008758:	bb62      	cbnz	r2, 80087b4 <_malloc_r+0xdc>
 800875a:	f8c8 7000 	str.w	r7, [r8]
 800875e:	e00f      	b.n	8008780 <_malloc_r+0xa8>
 8008760:	6822      	ldr	r2, [r4, #0]
 8008762:	1b52      	subs	r2, r2, r5
 8008764:	d420      	bmi.n	80087a8 <_malloc_r+0xd0>
 8008766:	2a0b      	cmp	r2, #11
 8008768:	d917      	bls.n	800879a <_malloc_r+0xc2>
 800876a:	1961      	adds	r1, r4, r5
 800876c:	42a3      	cmp	r3, r4
 800876e:	6025      	str	r5, [r4, #0]
 8008770:	bf18      	it	ne
 8008772:	6059      	strne	r1, [r3, #4]
 8008774:	6863      	ldr	r3, [r4, #4]
 8008776:	bf08      	it	eq
 8008778:	f8c8 1000 	streq.w	r1, [r8]
 800877c:	5162      	str	r2, [r4, r5]
 800877e:	604b      	str	r3, [r1, #4]
 8008780:	4630      	mov	r0, r6
 8008782:	f000 f82f 	bl	80087e4 <__malloc_unlock>
 8008786:	f104 000b 	add.w	r0, r4, #11
 800878a:	1d23      	adds	r3, r4, #4
 800878c:	f020 0007 	bic.w	r0, r0, #7
 8008790:	1ac2      	subs	r2, r0, r3
 8008792:	bf1c      	itt	ne
 8008794:	1a1b      	subne	r3, r3, r0
 8008796:	50a3      	strne	r3, [r4, r2]
 8008798:	e7af      	b.n	80086fa <_malloc_r+0x22>
 800879a:	6862      	ldr	r2, [r4, #4]
 800879c:	42a3      	cmp	r3, r4
 800879e:	bf0c      	ite	eq
 80087a0:	f8c8 2000 	streq.w	r2, [r8]
 80087a4:	605a      	strne	r2, [r3, #4]
 80087a6:	e7eb      	b.n	8008780 <_malloc_r+0xa8>
 80087a8:	4623      	mov	r3, r4
 80087aa:	6864      	ldr	r4, [r4, #4]
 80087ac:	e7ae      	b.n	800870c <_malloc_r+0x34>
 80087ae:	463c      	mov	r4, r7
 80087b0:	687f      	ldr	r7, [r7, #4]
 80087b2:	e7b6      	b.n	8008722 <_malloc_r+0x4a>
 80087b4:	461a      	mov	r2, r3
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	42a3      	cmp	r3, r4
 80087ba:	d1fb      	bne.n	80087b4 <_malloc_r+0xdc>
 80087bc:	2300      	movs	r3, #0
 80087be:	6053      	str	r3, [r2, #4]
 80087c0:	e7de      	b.n	8008780 <_malloc_r+0xa8>
 80087c2:	230c      	movs	r3, #12
 80087c4:	6033      	str	r3, [r6, #0]
 80087c6:	4630      	mov	r0, r6
 80087c8:	f000 f80c 	bl	80087e4 <__malloc_unlock>
 80087cc:	e794      	b.n	80086f8 <_malloc_r+0x20>
 80087ce:	6005      	str	r5, [r0, #0]
 80087d0:	e7d6      	b.n	8008780 <_malloc_r+0xa8>
 80087d2:	bf00      	nop
 80087d4:	20005df8 	.word	0x20005df8

080087d8 <__malloc_lock>:
 80087d8:	4801      	ldr	r0, [pc, #4]	@ (80087e0 <__malloc_lock+0x8>)
 80087da:	f7ff b8ba 	b.w	8007952 <__retarget_lock_acquire_recursive>
 80087de:	bf00      	nop
 80087e0:	20005df0 	.word	0x20005df0

080087e4 <__malloc_unlock>:
 80087e4:	4801      	ldr	r0, [pc, #4]	@ (80087ec <__malloc_unlock+0x8>)
 80087e6:	f7ff b8b5 	b.w	8007954 <__retarget_lock_release_recursive>
 80087ea:	bf00      	nop
 80087ec:	20005df0 	.word	0x20005df0

080087f0 <_Balloc>:
 80087f0:	b570      	push	{r4, r5, r6, lr}
 80087f2:	69c6      	ldr	r6, [r0, #28]
 80087f4:	4604      	mov	r4, r0
 80087f6:	460d      	mov	r5, r1
 80087f8:	b976      	cbnz	r6, 8008818 <_Balloc+0x28>
 80087fa:	2010      	movs	r0, #16
 80087fc:	f7ff ff42 	bl	8008684 <malloc>
 8008800:	4602      	mov	r2, r0
 8008802:	61e0      	str	r0, [r4, #28]
 8008804:	b920      	cbnz	r0, 8008810 <_Balloc+0x20>
 8008806:	4b18      	ldr	r3, [pc, #96]	@ (8008868 <_Balloc+0x78>)
 8008808:	4818      	ldr	r0, [pc, #96]	@ (800886c <_Balloc+0x7c>)
 800880a:	216b      	movs	r1, #107	@ 0x6b
 800880c:	f000 fe02 	bl	8009414 <__assert_func>
 8008810:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008814:	6006      	str	r6, [r0, #0]
 8008816:	60c6      	str	r6, [r0, #12]
 8008818:	69e6      	ldr	r6, [r4, #28]
 800881a:	68f3      	ldr	r3, [r6, #12]
 800881c:	b183      	cbz	r3, 8008840 <_Balloc+0x50>
 800881e:	69e3      	ldr	r3, [r4, #28]
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008826:	b9b8      	cbnz	r0, 8008858 <_Balloc+0x68>
 8008828:	2101      	movs	r1, #1
 800882a:	fa01 f605 	lsl.w	r6, r1, r5
 800882e:	1d72      	adds	r2, r6, #5
 8008830:	0092      	lsls	r2, r2, #2
 8008832:	4620      	mov	r0, r4
 8008834:	f000 fe0c 	bl	8009450 <_calloc_r>
 8008838:	b160      	cbz	r0, 8008854 <_Balloc+0x64>
 800883a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800883e:	e00e      	b.n	800885e <_Balloc+0x6e>
 8008840:	2221      	movs	r2, #33	@ 0x21
 8008842:	2104      	movs	r1, #4
 8008844:	4620      	mov	r0, r4
 8008846:	f000 fe03 	bl	8009450 <_calloc_r>
 800884a:	69e3      	ldr	r3, [r4, #28]
 800884c:	60f0      	str	r0, [r6, #12]
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d1e4      	bne.n	800881e <_Balloc+0x2e>
 8008854:	2000      	movs	r0, #0
 8008856:	bd70      	pop	{r4, r5, r6, pc}
 8008858:	6802      	ldr	r2, [r0, #0]
 800885a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800885e:	2300      	movs	r3, #0
 8008860:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008864:	e7f7      	b.n	8008856 <_Balloc+0x66>
 8008866:	bf00      	nop
 8008868:	0800a121 	.word	0x0800a121
 800886c:	0800a1a1 	.word	0x0800a1a1

08008870 <_Bfree>:
 8008870:	b570      	push	{r4, r5, r6, lr}
 8008872:	69c6      	ldr	r6, [r0, #28]
 8008874:	4605      	mov	r5, r0
 8008876:	460c      	mov	r4, r1
 8008878:	b976      	cbnz	r6, 8008898 <_Bfree+0x28>
 800887a:	2010      	movs	r0, #16
 800887c:	f7ff ff02 	bl	8008684 <malloc>
 8008880:	4602      	mov	r2, r0
 8008882:	61e8      	str	r0, [r5, #28]
 8008884:	b920      	cbnz	r0, 8008890 <_Bfree+0x20>
 8008886:	4b09      	ldr	r3, [pc, #36]	@ (80088ac <_Bfree+0x3c>)
 8008888:	4809      	ldr	r0, [pc, #36]	@ (80088b0 <_Bfree+0x40>)
 800888a:	218f      	movs	r1, #143	@ 0x8f
 800888c:	f000 fdc2 	bl	8009414 <__assert_func>
 8008890:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008894:	6006      	str	r6, [r0, #0]
 8008896:	60c6      	str	r6, [r0, #12]
 8008898:	b13c      	cbz	r4, 80088aa <_Bfree+0x3a>
 800889a:	69eb      	ldr	r3, [r5, #28]
 800889c:	6862      	ldr	r2, [r4, #4]
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80088a4:	6021      	str	r1, [r4, #0]
 80088a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80088aa:	bd70      	pop	{r4, r5, r6, pc}
 80088ac:	0800a121 	.word	0x0800a121
 80088b0:	0800a1a1 	.word	0x0800a1a1

080088b4 <__multadd>:
 80088b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088b8:	690d      	ldr	r5, [r1, #16]
 80088ba:	4607      	mov	r7, r0
 80088bc:	460c      	mov	r4, r1
 80088be:	461e      	mov	r6, r3
 80088c0:	f101 0c14 	add.w	ip, r1, #20
 80088c4:	2000      	movs	r0, #0
 80088c6:	f8dc 3000 	ldr.w	r3, [ip]
 80088ca:	b299      	uxth	r1, r3
 80088cc:	fb02 6101 	mla	r1, r2, r1, r6
 80088d0:	0c1e      	lsrs	r6, r3, #16
 80088d2:	0c0b      	lsrs	r3, r1, #16
 80088d4:	fb02 3306 	mla	r3, r2, r6, r3
 80088d8:	b289      	uxth	r1, r1
 80088da:	3001      	adds	r0, #1
 80088dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80088e0:	4285      	cmp	r5, r0
 80088e2:	f84c 1b04 	str.w	r1, [ip], #4
 80088e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80088ea:	dcec      	bgt.n	80088c6 <__multadd+0x12>
 80088ec:	b30e      	cbz	r6, 8008932 <__multadd+0x7e>
 80088ee:	68a3      	ldr	r3, [r4, #8]
 80088f0:	42ab      	cmp	r3, r5
 80088f2:	dc19      	bgt.n	8008928 <__multadd+0x74>
 80088f4:	6861      	ldr	r1, [r4, #4]
 80088f6:	4638      	mov	r0, r7
 80088f8:	3101      	adds	r1, #1
 80088fa:	f7ff ff79 	bl	80087f0 <_Balloc>
 80088fe:	4680      	mov	r8, r0
 8008900:	b928      	cbnz	r0, 800890e <__multadd+0x5a>
 8008902:	4602      	mov	r2, r0
 8008904:	4b0c      	ldr	r3, [pc, #48]	@ (8008938 <__multadd+0x84>)
 8008906:	480d      	ldr	r0, [pc, #52]	@ (800893c <__multadd+0x88>)
 8008908:	21ba      	movs	r1, #186	@ 0xba
 800890a:	f000 fd83 	bl	8009414 <__assert_func>
 800890e:	6922      	ldr	r2, [r4, #16]
 8008910:	3202      	adds	r2, #2
 8008912:	f104 010c 	add.w	r1, r4, #12
 8008916:	0092      	lsls	r2, r2, #2
 8008918:	300c      	adds	r0, #12
 800891a:	f000 fd6d 	bl	80093f8 <memcpy>
 800891e:	4621      	mov	r1, r4
 8008920:	4638      	mov	r0, r7
 8008922:	f7ff ffa5 	bl	8008870 <_Bfree>
 8008926:	4644      	mov	r4, r8
 8008928:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800892c:	3501      	adds	r5, #1
 800892e:	615e      	str	r6, [r3, #20]
 8008930:	6125      	str	r5, [r4, #16]
 8008932:	4620      	mov	r0, r4
 8008934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008938:	0800a190 	.word	0x0800a190
 800893c:	0800a1a1 	.word	0x0800a1a1

08008940 <__hi0bits>:
 8008940:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008944:	4603      	mov	r3, r0
 8008946:	bf36      	itet	cc
 8008948:	0403      	lslcc	r3, r0, #16
 800894a:	2000      	movcs	r0, #0
 800894c:	2010      	movcc	r0, #16
 800894e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008952:	bf3c      	itt	cc
 8008954:	021b      	lslcc	r3, r3, #8
 8008956:	3008      	addcc	r0, #8
 8008958:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800895c:	bf3c      	itt	cc
 800895e:	011b      	lslcc	r3, r3, #4
 8008960:	3004      	addcc	r0, #4
 8008962:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008966:	bf3c      	itt	cc
 8008968:	009b      	lslcc	r3, r3, #2
 800896a:	3002      	addcc	r0, #2
 800896c:	2b00      	cmp	r3, #0
 800896e:	db05      	blt.n	800897c <__hi0bits+0x3c>
 8008970:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008974:	f100 0001 	add.w	r0, r0, #1
 8008978:	bf08      	it	eq
 800897a:	2020      	moveq	r0, #32
 800897c:	4770      	bx	lr

0800897e <__lo0bits>:
 800897e:	6803      	ldr	r3, [r0, #0]
 8008980:	4602      	mov	r2, r0
 8008982:	f013 0007 	ands.w	r0, r3, #7
 8008986:	d00b      	beq.n	80089a0 <__lo0bits+0x22>
 8008988:	07d9      	lsls	r1, r3, #31
 800898a:	d421      	bmi.n	80089d0 <__lo0bits+0x52>
 800898c:	0798      	lsls	r0, r3, #30
 800898e:	bf49      	itett	mi
 8008990:	085b      	lsrmi	r3, r3, #1
 8008992:	089b      	lsrpl	r3, r3, #2
 8008994:	2001      	movmi	r0, #1
 8008996:	6013      	strmi	r3, [r2, #0]
 8008998:	bf5c      	itt	pl
 800899a:	6013      	strpl	r3, [r2, #0]
 800899c:	2002      	movpl	r0, #2
 800899e:	4770      	bx	lr
 80089a0:	b299      	uxth	r1, r3
 80089a2:	b909      	cbnz	r1, 80089a8 <__lo0bits+0x2a>
 80089a4:	0c1b      	lsrs	r3, r3, #16
 80089a6:	2010      	movs	r0, #16
 80089a8:	b2d9      	uxtb	r1, r3
 80089aa:	b909      	cbnz	r1, 80089b0 <__lo0bits+0x32>
 80089ac:	3008      	adds	r0, #8
 80089ae:	0a1b      	lsrs	r3, r3, #8
 80089b0:	0719      	lsls	r1, r3, #28
 80089b2:	bf04      	itt	eq
 80089b4:	091b      	lsreq	r3, r3, #4
 80089b6:	3004      	addeq	r0, #4
 80089b8:	0799      	lsls	r1, r3, #30
 80089ba:	bf04      	itt	eq
 80089bc:	089b      	lsreq	r3, r3, #2
 80089be:	3002      	addeq	r0, #2
 80089c0:	07d9      	lsls	r1, r3, #31
 80089c2:	d403      	bmi.n	80089cc <__lo0bits+0x4e>
 80089c4:	085b      	lsrs	r3, r3, #1
 80089c6:	f100 0001 	add.w	r0, r0, #1
 80089ca:	d003      	beq.n	80089d4 <__lo0bits+0x56>
 80089cc:	6013      	str	r3, [r2, #0]
 80089ce:	4770      	bx	lr
 80089d0:	2000      	movs	r0, #0
 80089d2:	4770      	bx	lr
 80089d4:	2020      	movs	r0, #32
 80089d6:	4770      	bx	lr

080089d8 <__i2b>:
 80089d8:	b510      	push	{r4, lr}
 80089da:	460c      	mov	r4, r1
 80089dc:	2101      	movs	r1, #1
 80089de:	f7ff ff07 	bl	80087f0 <_Balloc>
 80089e2:	4602      	mov	r2, r0
 80089e4:	b928      	cbnz	r0, 80089f2 <__i2b+0x1a>
 80089e6:	4b05      	ldr	r3, [pc, #20]	@ (80089fc <__i2b+0x24>)
 80089e8:	4805      	ldr	r0, [pc, #20]	@ (8008a00 <__i2b+0x28>)
 80089ea:	f240 1145 	movw	r1, #325	@ 0x145
 80089ee:	f000 fd11 	bl	8009414 <__assert_func>
 80089f2:	2301      	movs	r3, #1
 80089f4:	6144      	str	r4, [r0, #20]
 80089f6:	6103      	str	r3, [r0, #16]
 80089f8:	bd10      	pop	{r4, pc}
 80089fa:	bf00      	nop
 80089fc:	0800a190 	.word	0x0800a190
 8008a00:	0800a1a1 	.word	0x0800a1a1

08008a04 <__multiply>:
 8008a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a08:	4614      	mov	r4, r2
 8008a0a:	690a      	ldr	r2, [r1, #16]
 8008a0c:	6923      	ldr	r3, [r4, #16]
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	bfa8      	it	ge
 8008a12:	4623      	movge	r3, r4
 8008a14:	460f      	mov	r7, r1
 8008a16:	bfa4      	itt	ge
 8008a18:	460c      	movge	r4, r1
 8008a1a:	461f      	movge	r7, r3
 8008a1c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008a20:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008a24:	68a3      	ldr	r3, [r4, #8]
 8008a26:	6861      	ldr	r1, [r4, #4]
 8008a28:	eb0a 0609 	add.w	r6, sl, r9
 8008a2c:	42b3      	cmp	r3, r6
 8008a2e:	b085      	sub	sp, #20
 8008a30:	bfb8      	it	lt
 8008a32:	3101      	addlt	r1, #1
 8008a34:	f7ff fedc 	bl	80087f0 <_Balloc>
 8008a38:	b930      	cbnz	r0, 8008a48 <__multiply+0x44>
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	4b44      	ldr	r3, [pc, #272]	@ (8008b50 <__multiply+0x14c>)
 8008a3e:	4845      	ldr	r0, [pc, #276]	@ (8008b54 <__multiply+0x150>)
 8008a40:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008a44:	f000 fce6 	bl	8009414 <__assert_func>
 8008a48:	f100 0514 	add.w	r5, r0, #20
 8008a4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008a50:	462b      	mov	r3, r5
 8008a52:	2200      	movs	r2, #0
 8008a54:	4543      	cmp	r3, r8
 8008a56:	d321      	bcc.n	8008a9c <__multiply+0x98>
 8008a58:	f107 0114 	add.w	r1, r7, #20
 8008a5c:	f104 0214 	add.w	r2, r4, #20
 8008a60:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008a64:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008a68:	9302      	str	r3, [sp, #8]
 8008a6a:	1b13      	subs	r3, r2, r4
 8008a6c:	3b15      	subs	r3, #21
 8008a6e:	f023 0303 	bic.w	r3, r3, #3
 8008a72:	3304      	adds	r3, #4
 8008a74:	f104 0715 	add.w	r7, r4, #21
 8008a78:	42ba      	cmp	r2, r7
 8008a7a:	bf38      	it	cc
 8008a7c:	2304      	movcc	r3, #4
 8008a7e:	9301      	str	r3, [sp, #4]
 8008a80:	9b02      	ldr	r3, [sp, #8]
 8008a82:	9103      	str	r1, [sp, #12]
 8008a84:	428b      	cmp	r3, r1
 8008a86:	d80c      	bhi.n	8008aa2 <__multiply+0x9e>
 8008a88:	2e00      	cmp	r6, #0
 8008a8a:	dd03      	ble.n	8008a94 <__multiply+0x90>
 8008a8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d05b      	beq.n	8008b4c <__multiply+0x148>
 8008a94:	6106      	str	r6, [r0, #16]
 8008a96:	b005      	add	sp, #20
 8008a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a9c:	f843 2b04 	str.w	r2, [r3], #4
 8008aa0:	e7d8      	b.n	8008a54 <__multiply+0x50>
 8008aa2:	f8b1 a000 	ldrh.w	sl, [r1]
 8008aa6:	f1ba 0f00 	cmp.w	sl, #0
 8008aaa:	d024      	beq.n	8008af6 <__multiply+0xf2>
 8008aac:	f104 0e14 	add.w	lr, r4, #20
 8008ab0:	46a9      	mov	r9, r5
 8008ab2:	f04f 0c00 	mov.w	ip, #0
 8008ab6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008aba:	f8d9 3000 	ldr.w	r3, [r9]
 8008abe:	fa1f fb87 	uxth.w	fp, r7
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	fb0a 330b 	mla	r3, sl, fp, r3
 8008ac8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008acc:	f8d9 7000 	ldr.w	r7, [r9]
 8008ad0:	4463      	add	r3, ip
 8008ad2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008ad6:	fb0a c70b 	mla	r7, sl, fp, ip
 8008ada:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008ae4:	4572      	cmp	r2, lr
 8008ae6:	f849 3b04 	str.w	r3, [r9], #4
 8008aea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008aee:	d8e2      	bhi.n	8008ab6 <__multiply+0xb2>
 8008af0:	9b01      	ldr	r3, [sp, #4]
 8008af2:	f845 c003 	str.w	ip, [r5, r3]
 8008af6:	9b03      	ldr	r3, [sp, #12]
 8008af8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008afc:	3104      	adds	r1, #4
 8008afe:	f1b9 0f00 	cmp.w	r9, #0
 8008b02:	d021      	beq.n	8008b48 <__multiply+0x144>
 8008b04:	682b      	ldr	r3, [r5, #0]
 8008b06:	f104 0c14 	add.w	ip, r4, #20
 8008b0a:	46ae      	mov	lr, r5
 8008b0c:	f04f 0a00 	mov.w	sl, #0
 8008b10:	f8bc b000 	ldrh.w	fp, [ip]
 8008b14:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008b18:	fb09 770b 	mla	r7, r9, fp, r7
 8008b1c:	4457      	add	r7, sl
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008b24:	f84e 3b04 	str.w	r3, [lr], #4
 8008b28:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008b2c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008b30:	f8be 3000 	ldrh.w	r3, [lr]
 8008b34:	fb09 330a 	mla	r3, r9, sl, r3
 8008b38:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008b3c:	4562      	cmp	r2, ip
 8008b3e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008b42:	d8e5      	bhi.n	8008b10 <__multiply+0x10c>
 8008b44:	9f01      	ldr	r7, [sp, #4]
 8008b46:	51eb      	str	r3, [r5, r7]
 8008b48:	3504      	adds	r5, #4
 8008b4a:	e799      	b.n	8008a80 <__multiply+0x7c>
 8008b4c:	3e01      	subs	r6, #1
 8008b4e:	e79b      	b.n	8008a88 <__multiply+0x84>
 8008b50:	0800a190 	.word	0x0800a190
 8008b54:	0800a1a1 	.word	0x0800a1a1

08008b58 <__pow5mult>:
 8008b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b5c:	4615      	mov	r5, r2
 8008b5e:	f012 0203 	ands.w	r2, r2, #3
 8008b62:	4607      	mov	r7, r0
 8008b64:	460e      	mov	r6, r1
 8008b66:	d007      	beq.n	8008b78 <__pow5mult+0x20>
 8008b68:	4c25      	ldr	r4, [pc, #148]	@ (8008c00 <__pow5mult+0xa8>)
 8008b6a:	3a01      	subs	r2, #1
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008b72:	f7ff fe9f 	bl	80088b4 <__multadd>
 8008b76:	4606      	mov	r6, r0
 8008b78:	10ad      	asrs	r5, r5, #2
 8008b7a:	d03d      	beq.n	8008bf8 <__pow5mult+0xa0>
 8008b7c:	69fc      	ldr	r4, [r7, #28]
 8008b7e:	b97c      	cbnz	r4, 8008ba0 <__pow5mult+0x48>
 8008b80:	2010      	movs	r0, #16
 8008b82:	f7ff fd7f 	bl	8008684 <malloc>
 8008b86:	4602      	mov	r2, r0
 8008b88:	61f8      	str	r0, [r7, #28]
 8008b8a:	b928      	cbnz	r0, 8008b98 <__pow5mult+0x40>
 8008b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8008c04 <__pow5mult+0xac>)
 8008b8e:	481e      	ldr	r0, [pc, #120]	@ (8008c08 <__pow5mult+0xb0>)
 8008b90:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008b94:	f000 fc3e 	bl	8009414 <__assert_func>
 8008b98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b9c:	6004      	str	r4, [r0, #0]
 8008b9e:	60c4      	str	r4, [r0, #12]
 8008ba0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008ba4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008ba8:	b94c      	cbnz	r4, 8008bbe <__pow5mult+0x66>
 8008baa:	f240 2171 	movw	r1, #625	@ 0x271
 8008bae:	4638      	mov	r0, r7
 8008bb0:	f7ff ff12 	bl	80089d8 <__i2b>
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	f8c8 0008 	str.w	r0, [r8, #8]
 8008bba:	4604      	mov	r4, r0
 8008bbc:	6003      	str	r3, [r0, #0]
 8008bbe:	f04f 0900 	mov.w	r9, #0
 8008bc2:	07eb      	lsls	r3, r5, #31
 8008bc4:	d50a      	bpl.n	8008bdc <__pow5mult+0x84>
 8008bc6:	4631      	mov	r1, r6
 8008bc8:	4622      	mov	r2, r4
 8008bca:	4638      	mov	r0, r7
 8008bcc:	f7ff ff1a 	bl	8008a04 <__multiply>
 8008bd0:	4631      	mov	r1, r6
 8008bd2:	4680      	mov	r8, r0
 8008bd4:	4638      	mov	r0, r7
 8008bd6:	f7ff fe4b 	bl	8008870 <_Bfree>
 8008bda:	4646      	mov	r6, r8
 8008bdc:	106d      	asrs	r5, r5, #1
 8008bde:	d00b      	beq.n	8008bf8 <__pow5mult+0xa0>
 8008be0:	6820      	ldr	r0, [r4, #0]
 8008be2:	b938      	cbnz	r0, 8008bf4 <__pow5mult+0x9c>
 8008be4:	4622      	mov	r2, r4
 8008be6:	4621      	mov	r1, r4
 8008be8:	4638      	mov	r0, r7
 8008bea:	f7ff ff0b 	bl	8008a04 <__multiply>
 8008bee:	6020      	str	r0, [r4, #0]
 8008bf0:	f8c0 9000 	str.w	r9, [r0]
 8008bf4:	4604      	mov	r4, r0
 8008bf6:	e7e4      	b.n	8008bc2 <__pow5mult+0x6a>
 8008bf8:	4630      	mov	r0, r6
 8008bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bfe:	bf00      	nop
 8008c00:	0800a1fc 	.word	0x0800a1fc
 8008c04:	0800a121 	.word	0x0800a121
 8008c08:	0800a1a1 	.word	0x0800a1a1

08008c0c <__lshift>:
 8008c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c10:	460c      	mov	r4, r1
 8008c12:	6849      	ldr	r1, [r1, #4]
 8008c14:	6923      	ldr	r3, [r4, #16]
 8008c16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c1a:	68a3      	ldr	r3, [r4, #8]
 8008c1c:	4607      	mov	r7, r0
 8008c1e:	4691      	mov	r9, r2
 8008c20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c24:	f108 0601 	add.w	r6, r8, #1
 8008c28:	42b3      	cmp	r3, r6
 8008c2a:	db0b      	blt.n	8008c44 <__lshift+0x38>
 8008c2c:	4638      	mov	r0, r7
 8008c2e:	f7ff fddf 	bl	80087f0 <_Balloc>
 8008c32:	4605      	mov	r5, r0
 8008c34:	b948      	cbnz	r0, 8008c4a <__lshift+0x3e>
 8008c36:	4602      	mov	r2, r0
 8008c38:	4b28      	ldr	r3, [pc, #160]	@ (8008cdc <__lshift+0xd0>)
 8008c3a:	4829      	ldr	r0, [pc, #164]	@ (8008ce0 <__lshift+0xd4>)
 8008c3c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008c40:	f000 fbe8 	bl	8009414 <__assert_func>
 8008c44:	3101      	adds	r1, #1
 8008c46:	005b      	lsls	r3, r3, #1
 8008c48:	e7ee      	b.n	8008c28 <__lshift+0x1c>
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	f100 0114 	add.w	r1, r0, #20
 8008c50:	f100 0210 	add.w	r2, r0, #16
 8008c54:	4618      	mov	r0, r3
 8008c56:	4553      	cmp	r3, sl
 8008c58:	db33      	blt.n	8008cc2 <__lshift+0xb6>
 8008c5a:	6920      	ldr	r0, [r4, #16]
 8008c5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c60:	f104 0314 	add.w	r3, r4, #20
 8008c64:	f019 091f 	ands.w	r9, r9, #31
 8008c68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008c6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008c70:	d02b      	beq.n	8008cca <__lshift+0xbe>
 8008c72:	f1c9 0e20 	rsb	lr, r9, #32
 8008c76:	468a      	mov	sl, r1
 8008c78:	2200      	movs	r2, #0
 8008c7a:	6818      	ldr	r0, [r3, #0]
 8008c7c:	fa00 f009 	lsl.w	r0, r0, r9
 8008c80:	4310      	orrs	r0, r2
 8008c82:	f84a 0b04 	str.w	r0, [sl], #4
 8008c86:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c8a:	459c      	cmp	ip, r3
 8008c8c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008c90:	d8f3      	bhi.n	8008c7a <__lshift+0x6e>
 8008c92:	ebac 0304 	sub.w	r3, ip, r4
 8008c96:	3b15      	subs	r3, #21
 8008c98:	f023 0303 	bic.w	r3, r3, #3
 8008c9c:	3304      	adds	r3, #4
 8008c9e:	f104 0015 	add.w	r0, r4, #21
 8008ca2:	4584      	cmp	ip, r0
 8008ca4:	bf38      	it	cc
 8008ca6:	2304      	movcc	r3, #4
 8008ca8:	50ca      	str	r2, [r1, r3]
 8008caa:	b10a      	cbz	r2, 8008cb0 <__lshift+0xa4>
 8008cac:	f108 0602 	add.w	r6, r8, #2
 8008cb0:	3e01      	subs	r6, #1
 8008cb2:	4638      	mov	r0, r7
 8008cb4:	612e      	str	r6, [r5, #16]
 8008cb6:	4621      	mov	r1, r4
 8008cb8:	f7ff fdda 	bl	8008870 <_Bfree>
 8008cbc:	4628      	mov	r0, r5
 8008cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cc2:	f842 0f04 	str.w	r0, [r2, #4]!
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	e7c5      	b.n	8008c56 <__lshift+0x4a>
 8008cca:	3904      	subs	r1, #4
 8008ccc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cd0:	f841 2f04 	str.w	r2, [r1, #4]!
 8008cd4:	459c      	cmp	ip, r3
 8008cd6:	d8f9      	bhi.n	8008ccc <__lshift+0xc0>
 8008cd8:	e7ea      	b.n	8008cb0 <__lshift+0xa4>
 8008cda:	bf00      	nop
 8008cdc:	0800a190 	.word	0x0800a190
 8008ce0:	0800a1a1 	.word	0x0800a1a1

08008ce4 <__mcmp>:
 8008ce4:	690a      	ldr	r2, [r1, #16]
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	6900      	ldr	r0, [r0, #16]
 8008cea:	1a80      	subs	r0, r0, r2
 8008cec:	b530      	push	{r4, r5, lr}
 8008cee:	d10e      	bne.n	8008d0e <__mcmp+0x2a>
 8008cf0:	3314      	adds	r3, #20
 8008cf2:	3114      	adds	r1, #20
 8008cf4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008cf8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008cfc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008d00:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008d04:	4295      	cmp	r5, r2
 8008d06:	d003      	beq.n	8008d10 <__mcmp+0x2c>
 8008d08:	d205      	bcs.n	8008d16 <__mcmp+0x32>
 8008d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d0e:	bd30      	pop	{r4, r5, pc}
 8008d10:	42a3      	cmp	r3, r4
 8008d12:	d3f3      	bcc.n	8008cfc <__mcmp+0x18>
 8008d14:	e7fb      	b.n	8008d0e <__mcmp+0x2a>
 8008d16:	2001      	movs	r0, #1
 8008d18:	e7f9      	b.n	8008d0e <__mcmp+0x2a>
	...

08008d1c <__mdiff>:
 8008d1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d20:	4689      	mov	r9, r1
 8008d22:	4606      	mov	r6, r0
 8008d24:	4611      	mov	r1, r2
 8008d26:	4648      	mov	r0, r9
 8008d28:	4614      	mov	r4, r2
 8008d2a:	f7ff ffdb 	bl	8008ce4 <__mcmp>
 8008d2e:	1e05      	subs	r5, r0, #0
 8008d30:	d112      	bne.n	8008d58 <__mdiff+0x3c>
 8008d32:	4629      	mov	r1, r5
 8008d34:	4630      	mov	r0, r6
 8008d36:	f7ff fd5b 	bl	80087f0 <_Balloc>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	b928      	cbnz	r0, 8008d4a <__mdiff+0x2e>
 8008d3e:	4b3f      	ldr	r3, [pc, #252]	@ (8008e3c <__mdiff+0x120>)
 8008d40:	f240 2137 	movw	r1, #567	@ 0x237
 8008d44:	483e      	ldr	r0, [pc, #248]	@ (8008e40 <__mdiff+0x124>)
 8008d46:	f000 fb65 	bl	8009414 <__assert_func>
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008d50:	4610      	mov	r0, r2
 8008d52:	b003      	add	sp, #12
 8008d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d58:	bfbc      	itt	lt
 8008d5a:	464b      	movlt	r3, r9
 8008d5c:	46a1      	movlt	r9, r4
 8008d5e:	4630      	mov	r0, r6
 8008d60:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008d64:	bfba      	itte	lt
 8008d66:	461c      	movlt	r4, r3
 8008d68:	2501      	movlt	r5, #1
 8008d6a:	2500      	movge	r5, #0
 8008d6c:	f7ff fd40 	bl	80087f0 <_Balloc>
 8008d70:	4602      	mov	r2, r0
 8008d72:	b918      	cbnz	r0, 8008d7c <__mdiff+0x60>
 8008d74:	4b31      	ldr	r3, [pc, #196]	@ (8008e3c <__mdiff+0x120>)
 8008d76:	f240 2145 	movw	r1, #581	@ 0x245
 8008d7a:	e7e3      	b.n	8008d44 <__mdiff+0x28>
 8008d7c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008d80:	6926      	ldr	r6, [r4, #16]
 8008d82:	60c5      	str	r5, [r0, #12]
 8008d84:	f109 0310 	add.w	r3, r9, #16
 8008d88:	f109 0514 	add.w	r5, r9, #20
 8008d8c:	f104 0e14 	add.w	lr, r4, #20
 8008d90:	f100 0b14 	add.w	fp, r0, #20
 8008d94:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008d98:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008d9c:	9301      	str	r3, [sp, #4]
 8008d9e:	46d9      	mov	r9, fp
 8008da0:	f04f 0c00 	mov.w	ip, #0
 8008da4:	9b01      	ldr	r3, [sp, #4]
 8008da6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008daa:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008dae:	9301      	str	r3, [sp, #4]
 8008db0:	fa1f f38a 	uxth.w	r3, sl
 8008db4:	4619      	mov	r1, r3
 8008db6:	b283      	uxth	r3, r0
 8008db8:	1acb      	subs	r3, r1, r3
 8008dba:	0c00      	lsrs	r0, r0, #16
 8008dbc:	4463      	add	r3, ip
 8008dbe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008dc2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008dcc:	4576      	cmp	r6, lr
 8008dce:	f849 3b04 	str.w	r3, [r9], #4
 8008dd2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008dd6:	d8e5      	bhi.n	8008da4 <__mdiff+0x88>
 8008dd8:	1b33      	subs	r3, r6, r4
 8008dda:	3b15      	subs	r3, #21
 8008ddc:	f023 0303 	bic.w	r3, r3, #3
 8008de0:	3415      	adds	r4, #21
 8008de2:	3304      	adds	r3, #4
 8008de4:	42a6      	cmp	r6, r4
 8008de6:	bf38      	it	cc
 8008de8:	2304      	movcc	r3, #4
 8008dea:	441d      	add	r5, r3
 8008dec:	445b      	add	r3, fp
 8008dee:	461e      	mov	r6, r3
 8008df0:	462c      	mov	r4, r5
 8008df2:	4544      	cmp	r4, r8
 8008df4:	d30e      	bcc.n	8008e14 <__mdiff+0xf8>
 8008df6:	f108 0103 	add.w	r1, r8, #3
 8008dfa:	1b49      	subs	r1, r1, r5
 8008dfc:	f021 0103 	bic.w	r1, r1, #3
 8008e00:	3d03      	subs	r5, #3
 8008e02:	45a8      	cmp	r8, r5
 8008e04:	bf38      	it	cc
 8008e06:	2100      	movcc	r1, #0
 8008e08:	440b      	add	r3, r1
 8008e0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008e0e:	b191      	cbz	r1, 8008e36 <__mdiff+0x11a>
 8008e10:	6117      	str	r7, [r2, #16]
 8008e12:	e79d      	b.n	8008d50 <__mdiff+0x34>
 8008e14:	f854 1b04 	ldr.w	r1, [r4], #4
 8008e18:	46e6      	mov	lr, ip
 8008e1a:	0c08      	lsrs	r0, r1, #16
 8008e1c:	fa1c fc81 	uxtah	ip, ip, r1
 8008e20:	4471      	add	r1, lr
 8008e22:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008e26:	b289      	uxth	r1, r1
 8008e28:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008e2c:	f846 1b04 	str.w	r1, [r6], #4
 8008e30:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008e34:	e7dd      	b.n	8008df2 <__mdiff+0xd6>
 8008e36:	3f01      	subs	r7, #1
 8008e38:	e7e7      	b.n	8008e0a <__mdiff+0xee>
 8008e3a:	bf00      	nop
 8008e3c:	0800a190 	.word	0x0800a190
 8008e40:	0800a1a1 	.word	0x0800a1a1

08008e44 <__d2b>:
 8008e44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008e48:	460f      	mov	r7, r1
 8008e4a:	2101      	movs	r1, #1
 8008e4c:	ec59 8b10 	vmov	r8, r9, d0
 8008e50:	4616      	mov	r6, r2
 8008e52:	f7ff fccd 	bl	80087f0 <_Balloc>
 8008e56:	4604      	mov	r4, r0
 8008e58:	b930      	cbnz	r0, 8008e68 <__d2b+0x24>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	4b23      	ldr	r3, [pc, #140]	@ (8008eec <__d2b+0xa8>)
 8008e5e:	4824      	ldr	r0, [pc, #144]	@ (8008ef0 <__d2b+0xac>)
 8008e60:	f240 310f 	movw	r1, #783	@ 0x30f
 8008e64:	f000 fad6 	bl	8009414 <__assert_func>
 8008e68:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008e6c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008e70:	b10d      	cbz	r5, 8008e76 <__d2b+0x32>
 8008e72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008e76:	9301      	str	r3, [sp, #4]
 8008e78:	f1b8 0300 	subs.w	r3, r8, #0
 8008e7c:	d023      	beq.n	8008ec6 <__d2b+0x82>
 8008e7e:	4668      	mov	r0, sp
 8008e80:	9300      	str	r3, [sp, #0]
 8008e82:	f7ff fd7c 	bl	800897e <__lo0bits>
 8008e86:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008e8a:	b1d0      	cbz	r0, 8008ec2 <__d2b+0x7e>
 8008e8c:	f1c0 0320 	rsb	r3, r0, #32
 8008e90:	fa02 f303 	lsl.w	r3, r2, r3
 8008e94:	430b      	orrs	r3, r1
 8008e96:	40c2      	lsrs	r2, r0
 8008e98:	6163      	str	r3, [r4, #20]
 8008e9a:	9201      	str	r2, [sp, #4]
 8008e9c:	9b01      	ldr	r3, [sp, #4]
 8008e9e:	61a3      	str	r3, [r4, #24]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	bf0c      	ite	eq
 8008ea4:	2201      	moveq	r2, #1
 8008ea6:	2202      	movne	r2, #2
 8008ea8:	6122      	str	r2, [r4, #16]
 8008eaa:	b1a5      	cbz	r5, 8008ed6 <__d2b+0x92>
 8008eac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008eb0:	4405      	add	r5, r0
 8008eb2:	603d      	str	r5, [r7, #0]
 8008eb4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008eb8:	6030      	str	r0, [r6, #0]
 8008eba:	4620      	mov	r0, r4
 8008ebc:	b003      	add	sp, #12
 8008ebe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ec2:	6161      	str	r1, [r4, #20]
 8008ec4:	e7ea      	b.n	8008e9c <__d2b+0x58>
 8008ec6:	a801      	add	r0, sp, #4
 8008ec8:	f7ff fd59 	bl	800897e <__lo0bits>
 8008ecc:	9b01      	ldr	r3, [sp, #4]
 8008ece:	6163      	str	r3, [r4, #20]
 8008ed0:	3020      	adds	r0, #32
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	e7e8      	b.n	8008ea8 <__d2b+0x64>
 8008ed6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008eda:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008ede:	6038      	str	r0, [r7, #0]
 8008ee0:	6918      	ldr	r0, [r3, #16]
 8008ee2:	f7ff fd2d 	bl	8008940 <__hi0bits>
 8008ee6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008eea:	e7e5      	b.n	8008eb8 <__d2b+0x74>
 8008eec:	0800a190 	.word	0x0800a190
 8008ef0:	0800a1a1 	.word	0x0800a1a1

08008ef4 <__sfputc_r>:
 8008ef4:	6893      	ldr	r3, [r2, #8]
 8008ef6:	3b01      	subs	r3, #1
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	b410      	push	{r4}
 8008efc:	6093      	str	r3, [r2, #8]
 8008efe:	da08      	bge.n	8008f12 <__sfputc_r+0x1e>
 8008f00:	6994      	ldr	r4, [r2, #24]
 8008f02:	42a3      	cmp	r3, r4
 8008f04:	db01      	blt.n	8008f0a <__sfputc_r+0x16>
 8008f06:	290a      	cmp	r1, #10
 8008f08:	d103      	bne.n	8008f12 <__sfputc_r+0x1e>
 8008f0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f0e:	f7fe bc0e 	b.w	800772e <__swbuf_r>
 8008f12:	6813      	ldr	r3, [r2, #0]
 8008f14:	1c58      	adds	r0, r3, #1
 8008f16:	6010      	str	r0, [r2, #0]
 8008f18:	7019      	strb	r1, [r3, #0]
 8008f1a:	4608      	mov	r0, r1
 8008f1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f20:	4770      	bx	lr

08008f22 <__sfputs_r>:
 8008f22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f24:	4606      	mov	r6, r0
 8008f26:	460f      	mov	r7, r1
 8008f28:	4614      	mov	r4, r2
 8008f2a:	18d5      	adds	r5, r2, r3
 8008f2c:	42ac      	cmp	r4, r5
 8008f2e:	d101      	bne.n	8008f34 <__sfputs_r+0x12>
 8008f30:	2000      	movs	r0, #0
 8008f32:	e007      	b.n	8008f44 <__sfputs_r+0x22>
 8008f34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f38:	463a      	mov	r2, r7
 8008f3a:	4630      	mov	r0, r6
 8008f3c:	f7ff ffda 	bl	8008ef4 <__sfputc_r>
 8008f40:	1c43      	adds	r3, r0, #1
 8008f42:	d1f3      	bne.n	8008f2c <__sfputs_r+0xa>
 8008f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008f48 <_vfiprintf_r>:
 8008f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f4c:	460d      	mov	r5, r1
 8008f4e:	b09d      	sub	sp, #116	@ 0x74
 8008f50:	4614      	mov	r4, r2
 8008f52:	4698      	mov	r8, r3
 8008f54:	4606      	mov	r6, r0
 8008f56:	b118      	cbz	r0, 8008f60 <_vfiprintf_r+0x18>
 8008f58:	6a03      	ldr	r3, [r0, #32]
 8008f5a:	b90b      	cbnz	r3, 8008f60 <_vfiprintf_r+0x18>
 8008f5c:	f7fe fafe 	bl	800755c <__sinit>
 8008f60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f62:	07d9      	lsls	r1, r3, #31
 8008f64:	d405      	bmi.n	8008f72 <_vfiprintf_r+0x2a>
 8008f66:	89ab      	ldrh	r3, [r5, #12]
 8008f68:	059a      	lsls	r2, r3, #22
 8008f6a:	d402      	bmi.n	8008f72 <_vfiprintf_r+0x2a>
 8008f6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f6e:	f7fe fcf0 	bl	8007952 <__retarget_lock_acquire_recursive>
 8008f72:	89ab      	ldrh	r3, [r5, #12]
 8008f74:	071b      	lsls	r3, r3, #28
 8008f76:	d501      	bpl.n	8008f7c <_vfiprintf_r+0x34>
 8008f78:	692b      	ldr	r3, [r5, #16]
 8008f7a:	b99b      	cbnz	r3, 8008fa4 <_vfiprintf_r+0x5c>
 8008f7c:	4629      	mov	r1, r5
 8008f7e:	4630      	mov	r0, r6
 8008f80:	f7fe fc14 	bl	80077ac <__swsetup_r>
 8008f84:	b170      	cbz	r0, 8008fa4 <_vfiprintf_r+0x5c>
 8008f86:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f88:	07dc      	lsls	r4, r3, #31
 8008f8a:	d504      	bpl.n	8008f96 <_vfiprintf_r+0x4e>
 8008f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f90:	b01d      	add	sp, #116	@ 0x74
 8008f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f96:	89ab      	ldrh	r3, [r5, #12]
 8008f98:	0598      	lsls	r0, r3, #22
 8008f9a:	d4f7      	bmi.n	8008f8c <_vfiprintf_r+0x44>
 8008f9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f9e:	f7fe fcd9 	bl	8007954 <__retarget_lock_release_recursive>
 8008fa2:	e7f3      	b.n	8008f8c <_vfiprintf_r+0x44>
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fa8:	2320      	movs	r3, #32
 8008faa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008fae:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fb2:	2330      	movs	r3, #48	@ 0x30
 8008fb4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009164 <_vfiprintf_r+0x21c>
 8008fb8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008fbc:	f04f 0901 	mov.w	r9, #1
 8008fc0:	4623      	mov	r3, r4
 8008fc2:	469a      	mov	sl, r3
 8008fc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fc8:	b10a      	cbz	r2, 8008fce <_vfiprintf_r+0x86>
 8008fca:	2a25      	cmp	r2, #37	@ 0x25
 8008fcc:	d1f9      	bne.n	8008fc2 <_vfiprintf_r+0x7a>
 8008fce:	ebba 0b04 	subs.w	fp, sl, r4
 8008fd2:	d00b      	beq.n	8008fec <_vfiprintf_r+0xa4>
 8008fd4:	465b      	mov	r3, fp
 8008fd6:	4622      	mov	r2, r4
 8008fd8:	4629      	mov	r1, r5
 8008fda:	4630      	mov	r0, r6
 8008fdc:	f7ff ffa1 	bl	8008f22 <__sfputs_r>
 8008fe0:	3001      	adds	r0, #1
 8008fe2:	f000 80a7 	beq.w	8009134 <_vfiprintf_r+0x1ec>
 8008fe6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008fe8:	445a      	add	r2, fp
 8008fea:	9209      	str	r2, [sp, #36]	@ 0x24
 8008fec:	f89a 3000 	ldrb.w	r3, [sl]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	f000 809f 	beq.w	8009134 <_vfiprintf_r+0x1ec>
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8008ffc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009000:	f10a 0a01 	add.w	sl, sl, #1
 8009004:	9304      	str	r3, [sp, #16]
 8009006:	9307      	str	r3, [sp, #28]
 8009008:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800900c:	931a      	str	r3, [sp, #104]	@ 0x68
 800900e:	4654      	mov	r4, sl
 8009010:	2205      	movs	r2, #5
 8009012:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009016:	4853      	ldr	r0, [pc, #332]	@ (8009164 <_vfiprintf_r+0x21c>)
 8009018:	f7f7 f8da 	bl	80001d0 <memchr>
 800901c:	9a04      	ldr	r2, [sp, #16]
 800901e:	b9d8      	cbnz	r0, 8009058 <_vfiprintf_r+0x110>
 8009020:	06d1      	lsls	r1, r2, #27
 8009022:	bf44      	itt	mi
 8009024:	2320      	movmi	r3, #32
 8009026:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800902a:	0713      	lsls	r3, r2, #28
 800902c:	bf44      	itt	mi
 800902e:	232b      	movmi	r3, #43	@ 0x2b
 8009030:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009034:	f89a 3000 	ldrb.w	r3, [sl]
 8009038:	2b2a      	cmp	r3, #42	@ 0x2a
 800903a:	d015      	beq.n	8009068 <_vfiprintf_r+0x120>
 800903c:	9a07      	ldr	r2, [sp, #28]
 800903e:	4654      	mov	r4, sl
 8009040:	2000      	movs	r0, #0
 8009042:	f04f 0c0a 	mov.w	ip, #10
 8009046:	4621      	mov	r1, r4
 8009048:	f811 3b01 	ldrb.w	r3, [r1], #1
 800904c:	3b30      	subs	r3, #48	@ 0x30
 800904e:	2b09      	cmp	r3, #9
 8009050:	d94b      	bls.n	80090ea <_vfiprintf_r+0x1a2>
 8009052:	b1b0      	cbz	r0, 8009082 <_vfiprintf_r+0x13a>
 8009054:	9207      	str	r2, [sp, #28]
 8009056:	e014      	b.n	8009082 <_vfiprintf_r+0x13a>
 8009058:	eba0 0308 	sub.w	r3, r0, r8
 800905c:	fa09 f303 	lsl.w	r3, r9, r3
 8009060:	4313      	orrs	r3, r2
 8009062:	9304      	str	r3, [sp, #16]
 8009064:	46a2      	mov	sl, r4
 8009066:	e7d2      	b.n	800900e <_vfiprintf_r+0xc6>
 8009068:	9b03      	ldr	r3, [sp, #12]
 800906a:	1d19      	adds	r1, r3, #4
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	9103      	str	r1, [sp, #12]
 8009070:	2b00      	cmp	r3, #0
 8009072:	bfbb      	ittet	lt
 8009074:	425b      	neglt	r3, r3
 8009076:	f042 0202 	orrlt.w	r2, r2, #2
 800907a:	9307      	strge	r3, [sp, #28]
 800907c:	9307      	strlt	r3, [sp, #28]
 800907e:	bfb8      	it	lt
 8009080:	9204      	strlt	r2, [sp, #16]
 8009082:	7823      	ldrb	r3, [r4, #0]
 8009084:	2b2e      	cmp	r3, #46	@ 0x2e
 8009086:	d10a      	bne.n	800909e <_vfiprintf_r+0x156>
 8009088:	7863      	ldrb	r3, [r4, #1]
 800908a:	2b2a      	cmp	r3, #42	@ 0x2a
 800908c:	d132      	bne.n	80090f4 <_vfiprintf_r+0x1ac>
 800908e:	9b03      	ldr	r3, [sp, #12]
 8009090:	1d1a      	adds	r2, r3, #4
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	9203      	str	r2, [sp, #12]
 8009096:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800909a:	3402      	adds	r4, #2
 800909c:	9305      	str	r3, [sp, #20]
 800909e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009174 <_vfiprintf_r+0x22c>
 80090a2:	7821      	ldrb	r1, [r4, #0]
 80090a4:	2203      	movs	r2, #3
 80090a6:	4650      	mov	r0, sl
 80090a8:	f7f7 f892 	bl	80001d0 <memchr>
 80090ac:	b138      	cbz	r0, 80090be <_vfiprintf_r+0x176>
 80090ae:	9b04      	ldr	r3, [sp, #16]
 80090b0:	eba0 000a 	sub.w	r0, r0, sl
 80090b4:	2240      	movs	r2, #64	@ 0x40
 80090b6:	4082      	lsls	r2, r0
 80090b8:	4313      	orrs	r3, r2
 80090ba:	3401      	adds	r4, #1
 80090bc:	9304      	str	r3, [sp, #16]
 80090be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090c2:	4829      	ldr	r0, [pc, #164]	@ (8009168 <_vfiprintf_r+0x220>)
 80090c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80090c8:	2206      	movs	r2, #6
 80090ca:	f7f7 f881 	bl	80001d0 <memchr>
 80090ce:	2800      	cmp	r0, #0
 80090d0:	d03f      	beq.n	8009152 <_vfiprintf_r+0x20a>
 80090d2:	4b26      	ldr	r3, [pc, #152]	@ (800916c <_vfiprintf_r+0x224>)
 80090d4:	bb1b      	cbnz	r3, 800911e <_vfiprintf_r+0x1d6>
 80090d6:	9b03      	ldr	r3, [sp, #12]
 80090d8:	3307      	adds	r3, #7
 80090da:	f023 0307 	bic.w	r3, r3, #7
 80090de:	3308      	adds	r3, #8
 80090e0:	9303      	str	r3, [sp, #12]
 80090e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090e4:	443b      	add	r3, r7
 80090e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80090e8:	e76a      	b.n	8008fc0 <_vfiprintf_r+0x78>
 80090ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80090ee:	460c      	mov	r4, r1
 80090f0:	2001      	movs	r0, #1
 80090f2:	e7a8      	b.n	8009046 <_vfiprintf_r+0xfe>
 80090f4:	2300      	movs	r3, #0
 80090f6:	3401      	adds	r4, #1
 80090f8:	9305      	str	r3, [sp, #20]
 80090fa:	4619      	mov	r1, r3
 80090fc:	f04f 0c0a 	mov.w	ip, #10
 8009100:	4620      	mov	r0, r4
 8009102:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009106:	3a30      	subs	r2, #48	@ 0x30
 8009108:	2a09      	cmp	r2, #9
 800910a:	d903      	bls.n	8009114 <_vfiprintf_r+0x1cc>
 800910c:	2b00      	cmp	r3, #0
 800910e:	d0c6      	beq.n	800909e <_vfiprintf_r+0x156>
 8009110:	9105      	str	r1, [sp, #20]
 8009112:	e7c4      	b.n	800909e <_vfiprintf_r+0x156>
 8009114:	fb0c 2101 	mla	r1, ip, r1, r2
 8009118:	4604      	mov	r4, r0
 800911a:	2301      	movs	r3, #1
 800911c:	e7f0      	b.n	8009100 <_vfiprintf_r+0x1b8>
 800911e:	ab03      	add	r3, sp, #12
 8009120:	9300      	str	r3, [sp, #0]
 8009122:	462a      	mov	r2, r5
 8009124:	4b12      	ldr	r3, [pc, #72]	@ (8009170 <_vfiprintf_r+0x228>)
 8009126:	a904      	add	r1, sp, #16
 8009128:	4630      	mov	r0, r6
 800912a:	f7fd fdd3 	bl	8006cd4 <_printf_float>
 800912e:	4607      	mov	r7, r0
 8009130:	1c78      	adds	r0, r7, #1
 8009132:	d1d6      	bne.n	80090e2 <_vfiprintf_r+0x19a>
 8009134:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009136:	07d9      	lsls	r1, r3, #31
 8009138:	d405      	bmi.n	8009146 <_vfiprintf_r+0x1fe>
 800913a:	89ab      	ldrh	r3, [r5, #12]
 800913c:	059a      	lsls	r2, r3, #22
 800913e:	d402      	bmi.n	8009146 <_vfiprintf_r+0x1fe>
 8009140:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009142:	f7fe fc07 	bl	8007954 <__retarget_lock_release_recursive>
 8009146:	89ab      	ldrh	r3, [r5, #12]
 8009148:	065b      	lsls	r3, r3, #25
 800914a:	f53f af1f 	bmi.w	8008f8c <_vfiprintf_r+0x44>
 800914e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009150:	e71e      	b.n	8008f90 <_vfiprintf_r+0x48>
 8009152:	ab03      	add	r3, sp, #12
 8009154:	9300      	str	r3, [sp, #0]
 8009156:	462a      	mov	r2, r5
 8009158:	4b05      	ldr	r3, [pc, #20]	@ (8009170 <_vfiprintf_r+0x228>)
 800915a:	a904      	add	r1, sp, #16
 800915c:	4630      	mov	r0, r6
 800915e:	f7fe f851 	bl	8007204 <_printf_i>
 8009162:	e7e4      	b.n	800912e <_vfiprintf_r+0x1e6>
 8009164:	0800a2f8 	.word	0x0800a2f8
 8009168:	0800a302 	.word	0x0800a302
 800916c:	08006cd5 	.word	0x08006cd5
 8009170:	08008f23 	.word	0x08008f23
 8009174:	0800a2fe 	.word	0x0800a2fe

08009178 <__sflush_r>:
 8009178:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800917c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009180:	0716      	lsls	r6, r2, #28
 8009182:	4605      	mov	r5, r0
 8009184:	460c      	mov	r4, r1
 8009186:	d454      	bmi.n	8009232 <__sflush_r+0xba>
 8009188:	684b      	ldr	r3, [r1, #4]
 800918a:	2b00      	cmp	r3, #0
 800918c:	dc02      	bgt.n	8009194 <__sflush_r+0x1c>
 800918e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009190:	2b00      	cmp	r3, #0
 8009192:	dd48      	ble.n	8009226 <__sflush_r+0xae>
 8009194:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009196:	2e00      	cmp	r6, #0
 8009198:	d045      	beq.n	8009226 <__sflush_r+0xae>
 800919a:	2300      	movs	r3, #0
 800919c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80091a0:	682f      	ldr	r7, [r5, #0]
 80091a2:	6a21      	ldr	r1, [r4, #32]
 80091a4:	602b      	str	r3, [r5, #0]
 80091a6:	d030      	beq.n	800920a <__sflush_r+0x92>
 80091a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80091aa:	89a3      	ldrh	r3, [r4, #12]
 80091ac:	0759      	lsls	r1, r3, #29
 80091ae:	d505      	bpl.n	80091bc <__sflush_r+0x44>
 80091b0:	6863      	ldr	r3, [r4, #4]
 80091b2:	1ad2      	subs	r2, r2, r3
 80091b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80091b6:	b10b      	cbz	r3, 80091bc <__sflush_r+0x44>
 80091b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80091ba:	1ad2      	subs	r2, r2, r3
 80091bc:	2300      	movs	r3, #0
 80091be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80091c0:	6a21      	ldr	r1, [r4, #32]
 80091c2:	4628      	mov	r0, r5
 80091c4:	47b0      	blx	r6
 80091c6:	1c43      	adds	r3, r0, #1
 80091c8:	89a3      	ldrh	r3, [r4, #12]
 80091ca:	d106      	bne.n	80091da <__sflush_r+0x62>
 80091cc:	6829      	ldr	r1, [r5, #0]
 80091ce:	291d      	cmp	r1, #29
 80091d0:	d82b      	bhi.n	800922a <__sflush_r+0xb2>
 80091d2:	4a2a      	ldr	r2, [pc, #168]	@ (800927c <__sflush_r+0x104>)
 80091d4:	410a      	asrs	r2, r1
 80091d6:	07d6      	lsls	r6, r2, #31
 80091d8:	d427      	bmi.n	800922a <__sflush_r+0xb2>
 80091da:	2200      	movs	r2, #0
 80091dc:	6062      	str	r2, [r4, #4]
 80091de:	04d9      	lsls	r1, r3, #19
 80091e0:	6922      	ldr	r2, [r4, #16]
 80091e2:	6022      	str	r2, [r4, #0]
 80091e4:	d504      	bpl.n	80091f0 <__sflush_r+0x78>
 80091e6:	1c42      	adds	r2, r0, #1
 80091e8:	d101      	bne.n	80091ee <__sflush_r+0x76>
 80091ea:	682b      	ldr	r3, [r5, #0]
 80091ec:	b903      	cbnz	r3, 80091f0 <__sflush_r+0x78>
 80091ee:	6560      	str	r0, [r4, #84]	@ 0x54
 80091f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80091f2:	602f      	str	r7, [r5, #0]
 80091f4:	b1b9      	cbz	r1, 8009226 <__sflush_r+0xae>
 80091f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80091fa:	4299      	cmp	r1, r3
 80091fc:	d002      	beq.n	8009204 <__sflush_r+0x8c>
 80091fe:	4628      	mov	r0, r5
 8009200:	f7ff f9f6 	bl	80085f0 <_free_r>
 8009204:	2300      	movs	r3, #0
 8009206:	6363      	str	r3, [r4, #52]	@ 0x34
 8009208:	e00d      	b.n	8009226 <__sflush_r+0xae>
 800920a:	2301      	movs	r3, #1
 800920c:	4628      	mov	r0, r5
 800920e:	47b0      	blx	r6
 8009210:	4602      	mov	r2, r0
 8009212:	1c50      	adds	r0, r2, #1
 8009214:	d1c9      	bne.n	80091aa <__sflush_r+0x32>
 8009216:	682b      	ldr	r3, [r5, #0]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d0c6      	beq.n	80091aa <__sflush_r+0x32>
 800921c:	2b1d      	cmp	r3, #29
 800921e:	d001      	beq.n	8009224 <__sflush_r+0xac>
 8009220:	2b16      	cmp	r3, #22
 8009222:	d11e      	bne.n	8009262 <__sflush_r+0xea>
 8009224:	602f      	str	r7, [r5, #0]
 8009226:	2000      	movs	r0, #0
 8009228:	e022      	b.n	8009270 <__sflush_r+0xf8>
 800922a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800922e:	b21b      	sxth	r3, r3
 8009230:	e01b      	b.n	800926a <__sflush_r+0xf2>
 8009232:	690f      	ldr	r7, [r1, #16]
 8009234:	2f00      	cmp	r7, #0
 8009236:	d0f6      	beq.n	8009226 <__sflush_r+0xae>
 8009238:	0793      	lsls	r3, r2, #30
 800923a:	680e      	ldr	r6, [r1, #0]
 800923c:	bf08      	it	eq
 800923e:	694b      	ldreq	r3, [r1, #20]
 8009240:	600f      	str	r7, [r1, #0]
 8009242:	bf18      	it	ne
 8009244:	2300      	movne	r3, #0
 8009246:	eba6 0807 	sub.w	r8, r6, r7
 800924a:	608b      	str	r3, [r1, #8]
 800924c:	f1b8 0f00 	cmp.w	r8, #0
 8009250:	dde9      	ble.n	8009226 <__sflush_r+0xae>
 8009252:	6a21      	ldr	r1, [r4, #32]
 8009254:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009256:	4643      	mov	r3, r8
 8009258:	463a      	mov	r2, r7
 800925a:	4628      	mov	r0, r5
 800925c:	47b0      	blx	r6
 800925e:	2800      	cmp	r0, #0
 8009260:	dc08      	bgt.n	8009274 <__sflush_r+0xfc>
 8009262:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009266:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800926a:	81a3      	strh	r3, [r4, #12]
 800926c:	f04f 30ff 	mov.w	r0, #4294967295
 8009270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009274:	4407      	add	r7, r0
 8009276:	eba8 0800 	sub.w	r8, r8, r0
 800927a:	e7e7      	b.n	800924c <__sflush_r+0xd4>
 800927c:	dfbffffe 	.word	0xdfbffffe

08009280 <_fflush_r>:
 8009280:	b538      	push	{r3, r4, r5, lr}
 8009282:	690b      	ldr	r3, [r1, #16]
 8009284:	4605      	mov	r5, r0
 8009286:	460c      	mov	r4, r1
 8009288:	b913      	cbnz	r3, 8009290 <_fflush_r+0x10>
 800928a:	2500      	movs	r5, #0
 800928c:	4628      	mov	r0, r5
 800928e:	bd38      	pop	{r3, r4, r5, pc}
 8009290:	b118      	cbz	r0, 800929a <_fflush_r+0x1a>
 8009292:	6a03      	ldr	r3, [r0, #32]
 8009294:	b90b      	cbnz	r3, 800929a <_fflush_r+0x1a>
 8009296:	f7fe f961 	bl	800755c <__sinit>
 800929a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d0f3      	beq.n	800928a <_fflush_r+0xa>
 80092a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80092a4:	07d0      	lsls	r0, r2, #31
 80092a6:	d404      	bmi.n	80092b2 <_fflush_r+0x32>
 80092a8:	0599      	lsls	r1, r3, #22
 80092aa:	d402      	bmi.n	80092b2 <_fflush_r+0x32>
 80092ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80092ae:	f7fe fb50 	bl	8007952 <__retarget_lock_acquire_recursive>
 80092b2:	4628      	mov	r0, r5
 80092b4:	4621      	mov	r1, r4
 80092b6:	f7ff ff5f 	bl	8009178 <__sflush_r>
 80092ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80092bc:	07da      	lsls	r2, r3, #31
 80092be:	4605      	mov	r5, r0
 80092c0:	d4e4      	bmi.n	800928c <_fflush_r+0xc>
 80092c2:	89a3      	ldrh	r3, [r4, #12]
 80092c4:	059b      	lsls	r3, r3, #22
 80092c6:	d4e1      	bmi.n	800928c <_fflush_r+0xc>
 80092c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80092ca:	f7fe fb43 	bl	8007954 <__retarget_lock_release_recursive>
 80092ce:	e7dd      	b.n	800928c <_fflush_r+0xc>

080092d0 <__swhatbuf_r>:
 80092d0:	b570      	push	{r4, r5, r6, lr}
 80092d2:	460c      	mov	r4, r1
 80092d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092d8:	2900      	cmp	r1, #0
 80092da:	b096      	sub	sp, #88	@ 0x58
 80092dc:	4615      	mov	r5, r2
 80092de:	461e      	mov	r6, r3
 80092e0:	da0d      	bge.n	80092fe <__swhatbuf_r+0x2e>
 80092e2:	89a3      	ldrh	r3, [r4, #12]
 80092e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80092e8:	f04f 0100 	mov.w	r1, #0
 80092ec:	bf14      	ite	ne
 80092ee:	2340      	movne	r3, #64	@ 0x40
 80092f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80092f4:	2000      	movs	r0, #0
 80092f6:	6031      	str	r1, [r6, #0]
 80092f8:	602b      	str	r3, [r5, #0]
 80092fa:	b016      	add	sp, #88	@ 0x58
 80092fc:	bd70      	pop	{r4, r5, r6, pc}
 80092fe:	466a      	mov	r2, sp
 8009300:	f000 f848 	bl	8009394 <_fstat_r>
 8009304:	2800      	cmp	r0, #0
 8009306:	dbec      	blt.n	80092e2 <__swhatbuf_r+0x12>
 8009308:	9901      	ldr	r1, [sp, #4]
 800930a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800930e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009312:	4259      	negs	r1, r3
 8009314:	4159      	adcs	r1, r3
 8009316:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800931a:	e7eb      	b.n	80092f4 <__swhatbuf_r+0x24>

0800931c <__smakebuf_r>:
 800931c:	898b      	ldrh	r3, [r1, #12]
 800931e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009320:	079d      	lsls	r5, r3, #30
 8009322:	4606      	mov	r6, r0
 8009324:	460c      	mov	r4, r1
 8009326:	d507      	bpl.n	8009338 <__smakebuf_r+0x1c>
 8009328:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800932c:	6023      	str	r3, [r4, #0]
 800932e:	6123      	str	r3, [r4, #16]
 8009330:	2301      	movs	r3, #1
 8009332:	6163      	str	r3, [r4, #20]
 8009334:	b003      	add	sp, #12
 8009336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009338:	ab01      	add	r3, sp, #4
 800933a:	466a      	mov	r2, sp
 800933c:	f7ff ffc8 	bl	80092d0 <__swhatbuf_r>
 8009340:	9f00      	ldr	r7, [sp, #0]
 8009342:	4605      	mov	r5, r0
 8009344:	4639      	mov	r1, r7
 8009346:	4630      	mov	r0, r6
 8009348:	f7ff f9c6 	bl	80086d8 <_malloc_r>
 800934c:	b948      	cbnz	r0, 8009362 <__smakebuf_r+0x46>
 800934e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009352:	059a      	lsls	r2, r3, #22
 8009354:	d4ee      	bmi.n	8009334 <__smakebuf_r+0x18>
 8009356:	f023 0303 	bic.w	r3, r3, #3
 800935a:	f043 0302 	orr.w	r3, r3, #2
 800935e:	81a3      	strh	r3, [r4, #12]
 8009360:	e7e2      	b.n	8009328 <__smakebuf_r+0xc>
 8009362:	89a3      	ldrh	r3, [r4, #12]
 8009364:	6020      	str	r0, [r4, #0]
 8009366:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800936a:	81a3      	strh	r3, [r4, #12]
 800936c:	9b01      	ldr	r3, [sp, #4]
 800936e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009372:	b15b      	cbz	r3, 800938c <__smakebuf_r+0x70>
 8009374:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009378:	4630      	mov	r0, r6
 800937a:	f000 f81d 	bl	80093b8 <_isatty_r>
 800937e:	b128      	cbz	r0, 800938c <__smakebuf_r+0x70>
 8009380:	89a3      	ldrh	r3, [r4, #12]
 8009382:	f023 0303 	bic.w	r3, r3, #3
 8009386:	f043 0301 	orr.w	r3, r3, #1
 800938a:	81a3      	strh	r3, [r4, #12]
 800938c:	89a3      	ldrh	r3, [r4, #12]
 800938e:	431d      	orrs	r5, r3
 8009390:	81a5      	strh	r5, [r4, #12]
 8009392:	e7cf      	b.n	8009334 <__smakebuf_r+0x18>

08009394 <_fstat_r>:
 8009394:	b538      	push	{r3, r4, r5, lr}
 8009396:	4d07      	ldr	r5, [pc, #28]	@ (80093b4 <_fstat_r+0x20>)
 8009398:	2300      	movs	r3, #0
 800939a:	4604      	mov	r4, r0
 800939c:	4608      	mov	r0, r1
 800939e:	4611      	mov	r1, r2
 80093a0:	602b      	str	r3, [r5, #0]
 80093a2:	f7f8 ff1f 	bl	80021e4 <_fstat>
 80093a6:	1c43      	adds	r3, r0, #1
 80093a8:	d102      	bne.n	80093b0 <_fstat_r+0x1c>
 80093aa:	682b      	ldr	r3, [r5, #0]
 80093ac:	b103      	cbz	r3, 80093b0 <_fstat_r+0x1c>
 80093ae:	6023      	str	r3, [r4, #0]
 80093b0:	bd38      	pop	{r3, r4, r5, pc}
 80093b2:	bf00      	nop
 80093b4:	20005dec 	.word	0x20005dec

080093b8 <_isatty_r>:
 80093b8:	b538      	push	{r3, r4, r5, lr}
 80093ba:	4d06      	ldr	r5, [pc, #24]	@ (80093d4 <_isatty_r+0x1c>)
 80093bc:	2300      	movs	r3, #0
 80093be:	4604      	mov	r4, r0
 80093c0:	4608      	mov	r0, r1
 80093c2:	602b      	str	r3, [r5, #0]
 80093c4:	f7f8 ff1e 	bl	8002204 <_isatty>
 80093c8:	1c43      	adds	r3, r0, #1
 80093ca:	d102      	bne.n	80093d2 <_isatty_r+0x1a>
 80093cc:	682b      	ldr	r3, [r5, #0]
 80093ce:	b103      	cbz	r3, 80093d2 <_isatty_r+0x1a>
 80093d0:	6023      	str	r3, [r4, #0]
 80093d2:	bd38      	pop	{r3, r4, r5, pc}
 80093d4:	20005dec 	.word	0x20005dec

080093d8 <_sbrk_r>:
 80093d8:	b538      	push	{r3, r4, r5, lr}
 80093da:	4d06      	ldr	r5, [pc, #24]	@ (80093f4 <_sbrk_r+0x1c>)
 80093dc:	2300      	movs	r3, #0
 80093de:	4604      	mov	r4, r0
 80093e0:	4608      	mov	r0, r1
 80093e2:	602b      	str	r3, [r5, #0]
 80093e4:	f7f8 ff26 	bl	8002234 <_sbrk>
 80093e8:	1c43      	adds	r3, r0, #1
 80093ea:	d102      	bne.n	80093f2 <_sbrk_r+0x1a>
 80093ec:	682b      	ldr	r3, [r5, #0]
 80093ee:	b103      	cbz	r3, 80093f2 <_sbrk_r+0x1a>
 80093f0:	6023      	str	r3, [r4, #0]
 80093f2:	bd38      	pop	{r3, r4, r5, pc}
 80093f4:	20005dec 	.word	0x20005dec

080093f8 <memcpy>:
 80093f8:	440a      	add	r2, r1
 80093fa:	4291      	cmp	r1, r2
 80093fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009400:	d100      	bne.n	8009404 <memcpy+0xc>
 8009402:	4770      	bx	lr
 8009404:	b510      	push	{r4, lr}
 8009406:	f811 4b01 	ldrb.w	r4, [r1], #1
 800940a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800940e:	4291      	cmp	r1, r2
 8009410:	d1f9      	bne.n	8009406 <memcpy+0xe>
 8009412:	bd10      	pop	{r4, pc}

08009414 <__assert_func>:
 8009414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009416:	4614      	mov	r4, r2
 8009418:	461a      	mov	r2, r3
 800941a:	4b09      	ldr	r3, [pc, #36]	@ (8009440 <__assert_func+0x2c>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4605      	mov	r5, r0
 8009420:	68d8      	ldr	r0, [r3, #12]
 8009422:	b954      	cbnz	r4, 800943a <__assert_func+0x26>
 8009424:	4b07      	ldr	r3, [pc, #28]	@ (8009444 <__assert_func+0x30>)
 8009426:	461c      	mov	r4, r3
 8009428:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800942c:	9100      	str	r1, [sp, #0]
 800942e:	462b      	mov	r3, r5
 8009430:	4905      	ldr	r1, [pc, #20]	@ (8009448 <__assert_func+0x34>)
 8009432:	f000 f841 	bl	80094b8 <fiprintf>
 8009436:	f000 f851 	bl	80094dc <abort>
 800943a:	4b04      	ldr	r3, [pc, #16]	@ (800944c <__assert_func+0x38>)
 800943c:	e7f4      	b.n	8009428 <__assert_func+0x14>
 800943e:	bf00      	nop
 8009440:	20000020 	.word	0x20000020
 8009444:	0800a34e 	.word	0x0800a34e
 8009448:	0800a320 	.word	0x0800a320
 800944c:	0800a313 	.word	0x0800a313

08009450 <_calloc_r>:
 8009450:	b570      	push	{r4, r5, r6, lr}
 8009452:	fba1 5402 	umull	r5, r4, r1, r2
 8009456:	b93c      	cbnz	r4, 8009468 <_calloc_r+0x18>
 8009458:	4629      	mov	r1, r5
 800945a:	f7ff f93d 	bl	80086d8 <_malloc_r>
 800945e:	4606      	mov	r6, r0
 8009460:	b928      	cbnz	r0, 800946e <_calloc_r+0x1e>
 8009462:	2600      	movs	r6, #0
 8009464:	4630      	mov	r0, r6
 8009466:	bd70      	pop	{r4, r5, r6, pc}
 8009468:	220c      	movs	r2, #12
 800946a:	6002      	str	r2, [r0, #0]
 800946c:	e7f9      	b.n	8009462 <_calloc_r+0x12>
 800946e:	462a      	mov	r2, r5
 8009470:	4621      	mov	r1, r4
 8009472:	f7fe f9f1 	bl	8007858 <memset>
 8009476:	e7f5      	b.n	8009464 <_calloc_r+0x14>

08009478 <__ascii_mbtowc>:
 8009478:	b082      	sub	sp, #8
 800947a:	b901      	cbnz	r1, 800947e <__ascii_mbtowc+0x6>
 800947c:	a901      	add	r1, sp, #4
 800947e:	b142      	cbz	r2, 8009492 <__ascii_mbtowc+0x1a>
 8009480:	b14b      	cbz	r3, 8009496 <__ascii_mbtowc+0x1e>
 8009482:	7813      	ldrb	r3, [r2, #0]
 8009484:	600b      	str	r3, [r1, #0]
 8009486:	7812      	ldrb	r2, [r2, #0]
 8009488:	1e10      	subs	r0, r2, #0
 800948a:	bf18      	it	ne
 800948c:	2001      	movne	r0, #1
 800948e:	b002      	add	sp, #8
 8009490:	4770      	bx	lr
 8009492:	4610      	mov	r0, r2
 8009494:	e7fb      	b.n	800948e <__ascii_mbtowc+0x16>
 8009496:	f06f 0001 	mvn.w	r0, #1
 800949a:	e7f8      	b.n	800948e <__ascii_mbtowc+0x16>

0800949c <__ascii_wctomb>:
 800949c:	4603      	mov	r3, r0
 800949e:	4608      	mov	r0, r1
 80094a0:	b141      	cbz	r1, 80094b4 <__ascii_wctomb+0x18>
 80094a2:	2aff      	cmp	r2, #255	@ 0xff
 80094a4:	d904      	bls.n	80094b0 <__ascii_wctomb+0x14>
 80094a6:	228a      	movs	r2, #138	@ 0x8a
 80094a8:	601a      	str	r2, [r3, #0]
 80094aa:	f04f 30ff 	mov.w	r0, #4294967295
 80094ae:	4770      	bx	lr
 80094b0:	700a      	strb	r2, [r1, #0]
 80094b2:	2001      	movs	r0, #1
 80094b4:	4770      	bx	lr
	...

080094b8 <fiprintf>:
 80094b8:	b40e      	push	{r1, r2, r3}
 80094ba:	b503      	push	{r0, r1, lr}
 80094bc:	4601      	mov	r1, r0
 80094be:	ab03      	add	r3, sp, #12
 80094c0:	4805      	ldr	r0, [pc, #20]	@ (80094d8 <fiprintf+0x20>)
 80094c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80094c6:	6800      	ldr	r0, [r0, #0]
 80094c8:	9301      	str	r3, [sp, #4]
 80094ca:	f7ff fd3d 	bl	8008f48 <_vfiprintf_r>
 80094ce:	b002      	add	sp, #8
 80094d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80094d4:	b003      	add	sp, #12
 80094d6:	4770      	bx	lr
 80094d8:	20000020 	.word	0x20000020

080094dc <abort>:
 80094dc:	b508      	push	{r3, lr}
 80094de:	2006      	movs	r0, #6
 80094e0:	f000 f82c 	bl	800953c <raise>
 80094e4:	2001      	movs	r0, #1
 80094e6:	f7f8 fe49 	bl	800217c <_exit>

080094ea <_raise_r>:
 80094ea:	291f      	cmp	r1, #31
 80094ec:	b538      	push	{r3, r4, r5, lr}
 80094ee:	4605      	mov	r5, r0
 80094f0:	460c      	mov	r4, r1
 80094f2:	d904      	bls.n	80094fe <_raise_r+0x14>
 80094f4:	2316      	movs	r3, #22
 80094f6:	6003      	str	r3, [r0, #0]
 80094f8:	f04f 30ff 	mov.w	r0, #4294967295
 80094fc:	bd38      	pop	{r3, r4, r5, pc}
 80094fe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009500:	b112      	cbz	r2, 8009508 <_raise_r+0x1e>
 8009502:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009506:	b94b      	cbnz	r3, 800951c <_raise_r+0x32>
 8009508:	4628      	mov	r0, r5
 800950a:	f000 f831 	bl	8009570 <_getpid_r>
 800950e:	4622      	mov	r2, r4
 8009510:	4601      	mov	r1, r0
 8009512:	4628      	mov	r0, r5
 8009514:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009518:	f000 b818 	b.w	800954c <_kill_r>
 800951c:	2b01      	cmp	r3, #1
 800951e:	d00a      	beq.n	8009536 <_raise_r+0x4c>
 8009520:	1c59      	adds	r1, r3, #1
 8009522:	d103      	bne.n	800952c <_raise_r+0x42>
 8009524:	2316      	movs	r3, #22
 8009526:	6003      	str	r3, [r0, #0]
 8009528:	2001      	movs	r0, #1
 800952a:	e7e7      	b.n	80094fc <_raise_r+0x12>
 800952c:	2100      	movs	r1, #0
 800952e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009532:	4620      	mov	r0, r4
 8009534:	4798      	blx	r3
 8009536:	2000      	movs	r0, #0
 8009538:	e7e0      	b.n	80094fc <_raise_r+0x12>
	...

0800953c <raise>:
 800953c:	4b02      	ldr	r3, [pc, #8]	@ (8009548 <raise+0xc>)
 800953e:	4601      	mov	r1, r0
 8009540:	6818      	ldr	r0, [r3, #0]
 8009542:	f7ff bfd2 	b.w	80094ea <_raise_r>
 8009546:	bf00      	nop
 8009548:	20000020 	.word	0x20000020

0800954c <_kill_r>:
 800954c:	b538      	push	{r3, r4, r5, lr}
 800954e:	4d07      	ldr	r5, [pc, #28]	@ (800956c <_kill_r+0x20>)
 8009550:	2300      	movs	r3, #0
 8009552:	4604      	mov	r4, r0
 8009554:	4608      	mov	r0, r1
 8009556:	4611      	mov	r1, r2
 8009558:	602b      	str	r3, [r5, #0]
 800955a:	f7f8 fdff 	bl	800215c <_kill>
 800955e:	1c43      	adds	r3, r0, #1
 8009560:	d102      	bne.n	8009568 <_kill_r+0x1c>
 8009562:	682b      	ldr	r3, [r5, #0]
 8009564:	b103      	cbz	r3, 8009568 <_kill_r+0x1c>
 8009566:	6023      	str	r3, [r4, #0]
 8009568:	bd38      	pop	{r3, r4, r5, pc}
 800956a:	bf00      	nop
 800956c:	20005dec 	.word	0x20005dec

08009570 <_getpid_r>:
 8009570:	f7f8 bdec 	b.w	800214c <_getpid>

08009574 <_init>:
 8009574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009576:	bf00      	nop
 8009578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800957a:	bc08      	pop	{r3}
 800957c:	469e      	mov	lr, r3
 800957e:	4770      	bx	lr

08009580 <_fini>:
 8009580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009582:	bf00      	nop
 8009584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009586:	bc08      	pop	{r3}
 8009588:	469e      	mov	lr, r3
 800958a:	4770      	bx	lr
