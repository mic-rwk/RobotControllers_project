
RC_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a48  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000109c  08004bd0  08004bd0  00005bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c6c  08005c6c  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005c6c  08005c6c  00006c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c74  08005c74  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c74  08005c74  00006c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c78  08005c78  00006c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005c7c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  20000068  08005ce4  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  08005ce4  000072dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de24  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024d1  00000000  00000000  00014ebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf0  00000000  00000000  00017390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c2  00000000  00000000  00018080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027670  00000000  00000000  00018a42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010744  00000000  00000000  000400b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ebda5  00000000  00000000  000507f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013c59b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003960  00000000  00000000  0013c5e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0013ff40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004bb8 	.word	0x08004bb8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	08004bb8 	.word	0x08004bb8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <RESET_HIGH>:

#include "main.h"
#include "spi.h"
#include "epd.h"

static void RESET_HIGH() {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_SET);
 80004bc:	2201      	movs	r2, #1
 80004be:	2108      	movs	r1, #8
 80004c0:	4802      	ldr	r0, [pc, #8]	@ (80004cc <RESET_HIGH+0x14>)
 80004c2:	f001 fa5b 	bl	800197c <HAL_GPIO_WritePin>
}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	48000400 	.word	0x48000400

080004d0 <RESET_LOW>:

static void RESET_LOW() {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_RESET);
 80004d4:	2200      	movs	r2, #0
 80004d6:	2108      	movs	r1, #8
 80004d8:	4802      	ldr	r0, [pc, #8]	@ (80004e4 <RESET_LOW+0x14>)
 80004da:	f001 fa4f 	bl	800197c <HAL_GPIO_WritePin>
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	48000400 	.word	0x48000400

080004e8 <CS_HIGH>:

static void CS_HIGH() {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_SET);
 80004ec:	2201      	movs	r2, #1
 80004ee:	2110      	movs	r1, #16
 80004f0:	4802      	ldr	r0, [pc, #8]	@ (80004fc <CS_HIGH+0x14>)
 80004f2:	f001 fa43 	bl	800197c <HAL_GPIO_WritePin>
}
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	48000400 	.word	0x48000400

08000500 <CS_LOW>:

static void CS_LOW() {
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	2110      	movs	r1, #16
 8000508:	4802      	ldr	r0, [pc, #8]	@ (8000514 <CS_LOW+0x14>)
 800050a:	f001 fa37 	bl	800197c <HAL_GPIO_WritePin>
}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	48000400 	.word	0x48000400

08000518 <DC_HIGH>:

static void DC_HIGH() {
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EPD_DC_GPIO_Port, EPD_DC_Pin, GPIO_PIN_SET);
 800051c:	2201      	movs	r2, #1
 800051e:	2120      	movs	r1, #32
 8000520:	4802      	ldr	r0, [pc, #8]	@ (800052c <DC_HIGH+0x14>)
 8000522:	f001 fa2b 	bl	800197c <HAL_GPIO_WritePin>
}
 8000526:	bf00      	nop
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	48000400 	.word	0x48000400

08000530 <DC_LOW>:

static void DC_LOW() {
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EPD_DC_GPIO_Port, EPD_DC_Pin, GPIO_PIN_RESET);
 8000534:	2200      	movs	r2, #0
 8000536:	2120      	movs	r1, #32
 8000538:	4802      	ldr	r0, [pc, #8]	@ (8000544 <DC_LOW+0x14>)
 800053a:	f001 fa1f 	bl	800197c <HAL_GPIO_WritePin>
}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	48000400 	.word	0x48000400

08000548 <BUSY_READ>:

static uint8_t BUSY_READ() {
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(EPD_BUSY_GPIO_Port, EPD_BUSY_Pin);
 800054c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000550:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000554:	f001 f9fa 	bl	800194c <HAL_GPIO_ReadPin>
 8000558:	4603      	mov	r3, r0
}
 800055a:	4618      	mov	r0, r3
 800055c:	bd80      	pop	{r7, pc}

0800055e <Delay_ms>:

static void Delay_ms(uint16_t ms) {
 800055e:	b580      	push	{r7, lr}
 8000560:	b082      	sub	sp, #8
 8000562:	af00      	add	r7, sp, #0
 8000564:	4603      	mov	r3, r0
 8000566:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(ms);
 8000568:	88fb      	ldrh	r3, [r7, #6]
 800056a:	4618      	mov	r0, r3
 800056c:	f000 ff3a 	bl	80013e4 <HAL_Delay>
}
 8000570:	bf00      	nop
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}

08000578 <SPI_WriteByte>:

static void SPI_WriteByte(uint8_t value) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &value, 1, 1000);
 8000582:	1df9      	adds	r1, r7, #7
 8000584:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000588:	2201      	movs	r2, #1
 800058a:	4803      	ldr	r0, [pc, #12]	@ (8000598 <SPI_WriteByte+0x20>)
 800058c:	f002 fdd1 	bl	8003132 <HAL_SPI_Transmit>
}
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	2000009c 	.word	0x2000009c

0800059c <EPD_Reset>:

static void EPD_Reset(void) {
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	RESET_HIGH();
 80005a0:	f7ff ff8a 	bl	80004b8 <RESET_HIGH>
	Delay_ms(200);
 80005a4:	20c8      	movs	r0, #200	@ 0xc8
 80005a6:	f7ff ffda 	bl	800055e <Delay_ms>
	RESET_LOW();
 80005aa:	f7ff ff91 	bl	80004d0 <RESET_LOW>
	Delay_ms(20);
 80005ae:	2014      	movs	r0, #20
 80005b0:	f7ff ffd5 	bl	800055e <Delay_ms>
	RESET_HIGH();
 80005b4:	f7ff ff80 	bl	80004b8 <RESET_HIGH>
	Delay_ms(200);
 80005b8:	20c8      	movs	r0, #200	@ 0xc8
 80005ba:	f7ff ffd0 	bl	800055e <Delay_ms>
}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}

080005c2 <EPD_SendCommand>:

static void EPD_SendCommand(uint8_t command) {
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b082      	sub	sp, #8
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	4603      	mov	r3, r0
 80005ca:	71fb      	strb	r3, [r7, #7]
	DC_LOW();
 80005cc:	f7ff ffb0 	bl	8000530 <DC_LOW>
	CS_LOW();
 80005d0:	f7ff ff96 	bl	8000500 <CS_LOW>
	SPI_WriteByte(command);
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff ffce 	bl	8000578 <SPI_WriteByte>
	CS_HIGH();
 80005dc:	f7ff ff84 	bl	80004e8 <CS_HIGH>
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <EPD_SendData>:

static void EPD_SendData(uint8_t data) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
	DC_HIGH();
 80005f2:	f7ff ff91 	bl	8000518 <DC_HIGH>
	CS_LOW();
 80005f6:	f7ff ff83 	bl	8000500 <CS_LOW>
	SPI_WriteByte(data);
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f7ff ffbb 	bl	8000578 <SPI_WriteByte>
	CS_HIGH();
 8000602:	f7ff ff71 	bl	80004e8 <CS_HIGH>
}
 8000606:	bf00      	nop
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}

0800060e <EPD_ReadBusy>:

static void EPD_ReadBusy(void) {
 800060e:	b580      	push	{r7, lr}
 8000610:	af00      	add	r7, sp, #0
	while (1) {
		if (BUSY_READ() == 1)
 8000612:	f7ff ff99 	bl	8000548 <BUSY_READ>
 8000616:	4603      	mov	r3, r0
 8000618:	2b01      	cmp	r3, #1
 800061a:	d003      	beq.n	8000624 <EPD_ReadBusy+0x16>
			break;
		Delay_ms(10);
 800061c:	200a      	movs	r0, #10
 800061e:	f7ff ff9e 	bl	800055e <Delay_ms>
		if (BUSY_READ() == 1)
 8000622:	e7f6      	b.n	8000612 <EPD_ReadBusy+0x4>
			break;
 8000624:	bf00      	nop
	}
	Delay_ms(10);
 8000626:	200a      	movs	r0, #10
 8000628:	f7ff ff99 	bl	800055e <Delay_ms>
}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}

08000630 <EPD_SetWindows>:

static void EPD_SetWindows(uint16_t xStart, uint16_t yStart, uint16_t xEnd, uint16_t yEnd) {
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	4604      	mov	r4, r0
 8000638:	4608      	mov	r0, r1
 800063a:	4611      	mov	r1, r2
 800063c:	461a      	mov	r2, r3
 800063e:	4623      	mov	r3, r4
 8000640:	80fb      	strh	r3, [r7, #6]
 8000642:	4603      	mov	r3, r0
 8000644:	80bb      	strh	r3, [r7, #4]
 8000646:	460b      	mov	r3, r1
 8000648:	807b      	strh	r3, [r7, #2]
 800064a:	4613      	mov	r3, r2
 800064c:	803b      	strh	r3, [r7, #0]
	printf("USTAWIANIE OKNA\r\n");
 800064e:	4819      	ldr	r0, [pc, #100]	@ (80006b4 <EPD_SetWindows+0x84>)
 8000650:	f003 ffcc 	bl	80045ec <puts>
	EPD_SendCommand(SET_RAM_X_ADDRESS_START_END_POSITION);
 8000654:	2044      	movs	r0, #68	@ 0x44
 8000656:	f7ff ffb4 	bl	80005c2 <EPD_SendCommand>
	EPD_SendData((xStart >> 4) & 0xFF);
 800065a:	88fb      	ldrh	r3, [r7, #6]
 800065c:	091b      	lsrs	r3, r3, #4
 800065e:	b29b      	uxth	r3, r3
 8000660:	b2db      	uxtb	r3, r3
 8000662:	4618      	mov	r0, r3
 8000664:	f7ff ffc0 	bl	80005e8 <EPD_SendData>
	EPD_SendData((xEnd >> 4) & 0xFF);
 8000668:	887b      	ldrh	r3, [r7, #2]
 800066a:	091b      	lsrs	r3, r3, #4
 800066c:	b29b      	uxth	r3, r3
 800066e:	b2db      	uxtb	r3, r3
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff ffb9 	bl	80005e8 <EPD_SendData>

	EPD_SendCommand(SET_RAM_Y_ADDRESS_START_END_POSITION);
 8000676:	2045      	movs	r0, #69	@ 0x45
 8000678:	f7ff ffa3 	bl	80005c2 <EPD_SendCommand>
	EPD_SendData(yStart & 0xFF);
 800067c:	88bb      	ldrh	r3, [r7, #4]
 800067e:	b2db      	uxtb	r3, r3
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff ffb1 	bl	80005e8 <EPD_SendData>
	EPD_SendData((yStart >> 8) & 0xFF);
 8000686:	88bb      	ldrh	r3, [r7, #4]
 8000688:	0a1b      	lsrs	r3, r3, #8
 800068a:	b29b      	uxth	r3, r3
 800068c:	b2db      	uxtb	r3, r3
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff ffaa 	bl	80005e8 <EPD_SendData>
	EPD_SendData(yEnd & 0xFF);
 8000694:	883b      	ldrh	r3, [r7, #0]
 8000696:	b2db      	uxtb	r3, r3
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff ffa5 	bl	80005e8 <EPD_SendData>
	EPD_SendData((yEnd >> 8) & 0xFF);
 800069e:	883b      	ldrh	r3, [r7, #0]
 80006a0:	0a1b      	lsrs	r3, r3, #8
 80006a2:	b29b      	uxth	r3, r3
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff ff9e 	bl	80005e8 <EPD_SendData>
}
 80006ac:	bf00      	nop
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd90      	pop	{r4, r7, pc}
 80006b4:	08004bd0 	.word	0x08004bd0

080006b8 <EPD_SetCursor>:

static void EPD_SetCursor(uint8_t xStart, uint16_t yStart) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	460a      	mov	r2, r1
 80006c2:	71fb      	strb	r3, [r7, #7]
 80006c4:	4613      	mov	r3, r2
 80006c6:	80bb      	strh	r3, [r7, #4]
	printf("USTAWIANIE KURSORA\r\n");
 80006c8:	480a      	ldr	r0, [pc, #40]	@ (80006f4 <EPD_SetCursor+0x3c>)
 80006ca:	f003 ff8f 	bl	80045ec <puts>
	EPD_SendCommand(SET_RAM_X_ADDRESS_COUNTER);
 80006ce:	204e      	movs	r0, #78	@ 0x4e
 80006d0:	f7ff ff77 	bl	80005c2 <EPD_SendCommand>
	EPD_SendData(xStart & 0xFF);
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ff86 	bl	80005e8 <EPD_SendData>

	EPD_SendCommand(SET_RAM_Y_ADDRESS_COUNTER);
 80006dc:	204f      	movs	r0, #79	@ 0x4f
 80006de:	f7ff ff70 	bl	80005c2 <EPD_SendCommand>
	EPD_SendData(yStart & 0xFF);
 80006e2:	88bb      	ldrh	r3, [r7, #4]
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ff7e 	bl	80005e8 <EPD_SendData>
	//EPD_SendData((yStart >> 8) & 0xFF);
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	08004be4 	.word	0x08004be4

080006f8 <EPD_TurnOnDisplay>:

static void EPD_TurnOnDisplay(void) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	printf("TURN ION DIS\r\n");
 80006fc:	4807      	ldr	r0, [pc, #28]	@ (800071c <EPD_TurnOnDisplay+0x24>)
 80006fe:	f003 ff75 	bl	80045ec <puts>
	//EPD_SendCommand(SET_TEMPERATURE_SENSOR_CONTROL);
	//EPD_SendData(SET_INTERNAL_TEMPERATURE_SENSOR);
	EPD_SendCommand(DISPLAY_UPDATE_CONTROL_2);
 8000702:	2022      	movs	r0, #34	@ 0x22
 8000704:	f7ff ff5d 	bl	80005c2 <EPD_SendCommand>
	EPD_SendData(UPDATE_SEQUENCE_OPTION);
 8000708:	20c7      	movs	r0, #199	@ 0xc7
 800070a:	f7ff ff6d 	bl	80005e8 <EPD_SendData>
	EPD_SendCommand(MASTER_ACTIVATION);
 800070e:	2020      	movs	r0, #32
 8000710:	f7ff ff57 	bl	80005c2 <EPD_SendCommand>
	EPD_ReadBusy();
 8000714:	f7ff ff7b 	bl	800060e <EPD_ReadBusy>
}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	08004bf8 	.word	0x08004bf8

08000720 <EPD_Init>:

void EPD_Init(uint16_t width, uint16_t height) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	460a      	mov	r2, r1
 800072a:	80fb      	strh	r3, [r7, #6]
 800072c:	4613      	mov	r3, r2
 800072e:	80bb      	strh	r3, [r7, #4]
	EPD_Reset();
 8000730:	f7ff ff34 	bl	800059c <EPD_Reset>
	printf("Inicjalizacja\r\n");
 8000734:	482c      	ldr	r0, [pc, #176]	@ (80007e8 <EPD_Init+0xc8>)
 8000736:	f003 ff59 	bl	80045ec <puts>

	EPD_ReadBusy();
 800073a:	f7ff ff68 	bl	800060e <EPD_ReadBusy>
	EPD_SendCommand(SW_RESET);
 800073e:	2012      	movs	r0, #18
 8000740:	f7ff ff3f 	bl	80005c2 <EPD_SendCommand>
	printf("SWRESET\r\n");
 8000744:	4829      	ldr	r0, [pc, #164]	@ (80007ec <EPD_Init+0xcc>)
 8000746:	f003 ff51 	bl	80045ec <puts>
	EPD_ReadBusy();
 800074a:	f7ff ff60 	bl	800060e <EPD_ReadBusy>

	EPD_SendCommand(DRIVER_OUTPUT_CONTROL);
 800074e:	2001      	movs	r0, #1
 8000750:	f7ff ff37 	bl	80005c2 <EPD_SendCommand>
	printf("DRIVER_CONTROL\r\n");
 8000754:	4826      	ldr	r0, [pc, #152]	@ (80007f0 <EPD_Init+0xd0>)
 8000756:	f003 ff49 	bl	80045ec <puts>
	EPD_SendData(height - 1);
 800075a:	88bb      	ldrh	r3, [r7, #4]
 800075c:	b2db      	uxtb	r3, r3
 800075e:	3b01      	subs	r3, #1
 8000760:	b2db      	uxtb	r3, r3
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff ff40 	bl	80005e8 <EPD_SendData>
	EPD_SendData(((height - 1) >> 8) & 0x01);
 8000768:	88bb      	ldrh	r3, [r7, #4]
 800076a:	3b01      	subs	r3, #1
 800076c:	121b      	asrs	r3, r3, #8
 800076e:	b2db      	uxtb	r3, r3
 8000770:	f003 0301 	and.w	r3, r3, #1
 8000774:	b2db      	uxtb	r3, r3
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff ff36 	bl	80005e8 <EPD_SendData>
	EPD_SendData(0x00);
 800077c:	2000      	movs	r0, #0
 800077e:	f7ff ff33 	bl	80005e8 <EPD_SendData>


	EPD_SendCommand(DATA_ENTRY_MODE_SETTING);
 8000782:	2011      	movs	r0, #17
 8000784:	f7ff ff1d 	bl	80005c2 <EPD_SendCommand>
	printf("DATA_ENTRY_MODE\r\n");
 8000788:	481a      	ldr	r0, [pc, #104]	@ (80007f4 <EPD_Init+0xd4>)
 800078a:	f003 ff2f 	bl	80045ec <puts>
	EPD_SendData(0x03);
 800078e:	2003      	movs	r0, #3
 8000790:	f7ff ff2a 	bl	80005e8 <EPD_SendData>


	EPD_SetWindows(0, 0, width - 1, height - 1);
 8000794:	88fb      	ldrh	r3, [r7, #6]
 8000796:	3b01      	subs	r3, #1
 8000798:	b29a      	uxth	r2, r3
 800079a:	88bb      	ldrh	r3, [r7, #4]
 800079c:	3b01      	subs	r3, #1
 800079e:	b29b      	uxth	r3, r3
 80007a0:	2100      	movs	r1, #0
 80007a2:	2000      	movs	r0, #0
 80007a4:	f7ff ff44 	bl	8000630 <EPD_SetWindows>
	EPD_SetCursor(0, 0);
 80007a8:	2100      	movs	r1, #0
 80007aa:	2000      	movs	r0, #0
 80007ac:	f7ff ff84 	bl	80006b8 <EPD_SetCursor>

	printf("BORDER_WAVE\r\n");
 80007b0:	4811      	ldr	r0, [pc, #68]	@ (80007f8 <EPD_Init+0xd8>)
 80007b2:	f003 ff1b 	bl	80045ec <puts>
	EPD_SendCommand(BORDER_WAVEFORM_CONTROL);
 80007b6:	203c      	movs	r0, #60	@ 0x3c
 80007b8:	f7ff ff03 	bl	80005c2 <EPD_SendCommand>
	EPD_SendData(0x05);
 80007bc:	2005      	movs	r0, #5
 80007be:	f7ff ff13 	bl	80005e8 <EPD_SendData>

	printf("UPDATE_CONTROL\r\n");
 80007c2:	480e      	ldr	r0, [pc, #56]	@ (80007fc <EPD_Init+0xdc>)
 80007c4:	f003 ff12 	bl	80045ec <puts>
	EPD_SendCommand(DISPLAY_UPDATE_CONTROL_1);
 80007c8:	2021      	movs	r0, #33	@ 0x21
 80007ca:	f7ff fefa 	bl	80005c2 <EPD_SendCommand>
	EPD_SendData(0x00);	//0x00 / 0x01
 80007ce:	2000      	movs	r0, #0
 80007d0:	f7ff ff0a 	bl	80005e8 <EPD_SendData>
	EPD_SendData(0x80);
 80007d4:	2080      	movs	r0, #128	@ 0x80
 80007d6:	f7ff ff07 	bl	80005e8 <EPD_SendData>

	EPD_ReadBusy();
 80007da:	f7ff ff18 	bl	800060e <EPD_ReadBusy>
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	08004c08 	.word	0x08004c08
 80007ec:	08004c18 	.word	0x08004c18
 80007f0:	08004c24 	.word	0x08004c24
 80007f4:	08004c34 	.word	0x08004c34
 80007f8:	08004c48 	.word	0x08004c48
 80007fc:	08004c58 	.word	0x08004c58

08000800 <EPD_Clear>:

void EPD_Clear(uint16_t width, uint16_t height) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	460a      	mov	r2, r1
 800080a:	80fb      	strh	r3, [r7, #6]
 800080c:	4613      	mov	r3, r2
 800080e:	80bb      	strh	r3, [r7, #4]
	width = (width % 8 == 0) ? (width / 8) : (width / 8 + 1);
 8000810:	88fb      	ldrh	r3, [r7, #6]
 8000812:	f003 0307 	and.w	r3, r3, #7
 8000816:	b29b      	uxth	r3, r3
 8000818:	2b00      	cmp	r3, #0
 800081a:	d103      	bne.n	8000824 <EPD_Clear+0x24>
 800081c:	88fb      	ldrh	r3, [r7, #6]
 800081e:	08db      	lsrs	r3, r3, #3
 8000820:	b29b      	uxth	r3, r3
 8000822:	e004      	b.n	800082e <EPD_Clear+0x2e>
 8000824:	88fb      	ldrh	r3, [r7, #6]
 8000826:	08db      	lsrs	r3, r3, #3
 8000828:	b29b      	uxth	r3, r3
 800082a:	3301      	adds	r3, #1
 800082c:	b29b      	uxth	r3, r3
 800082e:	80fb      	strh	r3, [r7, #6]

	printf("CLS\r\n");
 8000830:	4811      	ldr	r0, [pc, #68]	@ (8000878 <EPD_Clear+0x78>)
 8000832:	f003 fedb 	bl	80045ec <puts>
	EPD_SendCommand(WRITE_RAM);
 8000836:	2024      	movs	r0, #36	@ 0x24
 8000838:	f7ff fec3 	bl	80005c2 <EPD_SendCommand>
	for (uint16_t i = 0; i < height; i++) {
 800083c:	2300      	movs	r3, #0
 800083e:	81fb      	strh	r3, [r7, #14]
 8000840:	e00f      	b.n	8000862 <EPD_Clear+0x62>
		for (uint16_t j = 0; j < width; j++) {
 8000842:	2300      	movs	r3, #0
 8000844:	81bb      	strh	r3, [r7, #12]
 8000846:	e005      	b.n	8000854 <EPD_Clear+0x54>
			EPD_SendData(0xFF);
 8000848:	20ff      	movs	r0, #255	@ 0xff
 800084a:	f7ff fecd 	bl	80005e8 <EPD_SendData>
		for (uint16_t j = 0; j < width; j++) {
 800084e:	89bb      	ldrh	r3, [r7, #12]
 8000850:	3301      	adds	r3, #1
 8000852:	81bb      	strh	r3, [r7, #12]
 8000854:	89ba      	ldrh	r2, [r7, #12]
 8000856:	88fb      	ldrh	r3, [r7, #6]
 8000858:	429a      	cmp	r2, r3
 800085a:	d3f5      	bcc.n	8000848 <EPD_Clear+0x48>
	for (uint16_t i = 0; i < height; i++) {
 800085c:	89fb      	ldrh	r3, [r7, #14]
 800085e:	3301      	adds	r3, #1
 8000860:	81fb      	strh	r3, [r7, #14]
 8000862:	89fa      	ldrh	r2, [r7, #14]
 8000864:	88bb      	ldrh	r3, [r7, #4]
 8000866:	429a      	cmp	r2, r3
 8000868:	d3eb      	bcc.n	8000842 <EPD_Clear+0x42>
		}
	}

	EPD_TurnOnDisplay();
 800086a:	f7ff ff45 	bl	80006f8 <EPD_TurnOnDisplay>
}
 800086e:	bf00      	nop
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	08004c68 	.word	0x08004c68

0800087c <EPD_Display>:

void EPD_Display(const uint8_t *image, uint16_t width, uint16_t height) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	460b      	mov	r3, r1
 8000886:	807b      	strh	r3, [r7, #2]
 8000888:	4613      	mov	r3, r2
 800088a:	803b      	strh	r3, [r7, #0]
	width = (width % 8 == 0) ? (width / 8) : (width / 8 + 1);
 800088c:	887b      	ldrh	r3, [r7, #2]
 800088e:	f003 0307 	and.w	r3, r3, #7
 8000892:	b29b      	uxth	r3, r3
 8000894:	2b00      	cmp	r3, #0
 8000896:	d103      	bne.n	80008a0 <EPD_Display+0x24>
 8000898:	887b      	ldrh	r3, [r7, #2]
 800089a:	08db      	lsrs	r3, r3, #3
 800089c:	b29b      	uxth	r3, r3
 800089e:	e004      	b.n	80008aa <EPD_Display+0x2e>
 80008a0:	887b      	ldrh	r3, [r7, #2]
 80008a2:	08db      	lsrs	r3, r3, #3
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	3301      	adds	r3, #1
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	807b      	strh	r3, [r7, #2]

	printf("DISPLAY\r\n");
 80008ac:	4817      	ldr	r0, [pc, #92]	@ (800090c <EPD_Display+0x90>)
 80008ae:	f003 fe9d 	bl	80045ec <puts>
	if (image != NULL) {
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d023      	beq.n	8000900 <EPD_Display+0x84>
		EPD_SendCommand(WRITE_RAM);
 80008b8:	2024      	movs	r0, #36	@ 0x24
 80008ba:	f7ff fe82 	bl	80005c2 <EPD_SendCommand>
		for (uint16_t i = 0; i < height; i++) {
 80008be:	2300      	movs	r3, #0
 80008c0:	81fb      	strh	r3, [r7, #14]
 80008c2:	e019      	b.n	80008f8 <EPD_Display+0x7c>
			for (uint16_t j = 0; j < width; j++) {
 80008c4:	2300      	movs	r3, #0
 80008c6:	81bb      	strh	r3, [r7, #12]
 80008c8:	e00f      	b.n	80008ea <EPD_Display+0x6e>
				EPD_SendData(image[j + i * width]);
 80008ca:	89ba      	ldrh	r2, [r7, #12]
 80008cc:	89fb      	ldrh	r3, [r7, #14]
 80008ce:	8879      	ldrh	r1, [r7, #2]
 80008d0:	fb01 f303 	mul.w	r3, r1, r3
 80008d4:	4413      	add	r3, r2
 80008d6:	461a      	mov	r2, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4413      	add	r3, r2
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff fe82 	bl	80005e8 <EPD_SendData>
			for (uint16_t j = 0; j < width; j++) {
 80008e4:	89bb      	ldrh	r3, [r7, #12]
 80008e6:	3301      	adds	r3, #1
 80008e8:	81bb      	strh	r3, [r7, #12]
 80008ea:	89ba      	ldrh	r2, [r7, #12]
 80008ec:	887b      	ldrh	r3, [r7, #2]
 80008ee:	429a      	cmp	r2, r3
 80008f0:	d3eb      	bcc.n	80008ca <EPD_Display+0x4e>
		for (uint16_t i = 0; i < height; i++) {
 80008f2:	89fb      	ldrh	r3, [r7, #14]
 80008f4:	3301      	adds	r3, #1
 80008f6:	81fb      	strh	r3, [r7, #14]
 80008f8:	89fa      	ldrh	r2, [r7, #14]
 80008fa:	883b      	ldrh	r3, [r7, #0]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d3e1      	bcc.n	80008c4 <EPD_Display+0x48>
			}
		}
	}

	EPD_TurnOnDisplay();
 8000900:	f7ff fefa 	bl	80006f8 <EPD_TurnOnDisplay>
}
 8000904:	bf00      	nop
 8000906:	3710      	adds	r7, #16
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	08004c70 	.word	0x08004c70

08000910 <EPD_Sleep>:

void EPD_Sleep() {
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	printf("SLEEP\r\n");
 8000914:	4806      	ldr	r0, [pc, #24]	@ (8000930 <EPD_Sleep+0x20>)
 8000916:	f003 fe69 	bl	80045ec <puts>
	EPD_SendCommand(DEEP_SLEEP_MODE);
 800091a:	2010      	movs	r0, #16
 800091c:	f7ff fe51 	bl	80005c2 <EPD_SendCommand>
	EPD_SendData(0x01);	//enter deep sleep mode
 8000920:	2001      	movs	r0, #1
 8000922:	f7ff fe61 	bl	80005e8 <EPD_SendData>
	Delay_ms(100);
 8000926:	2064      	movs	r0, #100	@ 0x64
 8000928:	f7ff fe19 	bl	800055e <Delay_ms>
}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	08004c7c 	.word	0x08004c7c

08000934 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b088      	sub	sp, #32
 8000938:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093a:	f107 030c 	add.w	r3, r7, #12
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
 8000948:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094a:	4b24      	ldr	r3, [pc, #144]	@ (80009dc <MX_GPIO_Init+0xa8>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800094e:	4a23      	ldr	r2, [pc, #140]	@ (80009dc <MX_GPIO_Init+0xa8>)
 8000950:	f043 0304 	orr.w	r3, r3, #4
 8000954:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000956:	4b21      	ldr	r3, [pc, #132]	@ (80009dc <MX_GPIO_Init+0xa8>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095a:	f003 0304 	and.w	r3, r3, #4
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	4b1e      	ldr	r3, [pc, #120]	@ (80009dc <MX_GPIO_Init+0xa8>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000966:	4a1d      	ldr	r2, [pc, #116]	@ (80009dc <MX_GPIO_Init+0xa8>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800096e:	4b1b      	ldr	r3, [pc, #108]	@ (80009dc <MX_GPIO_Init+0xa8>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097a:	4b18      	ldr	r3, [pc, #96]	@ (80009dc <MX_GPIO_Init+0xa8>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800097e:	4a17      	ldr	r2, [pc, #92]	@ (80009dc <MX_GPIO_Init+0xa8>)
 8000980:	f043 0302 	orr.w	r3, r3, #2
 8000984:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000986:	4b15      	ldr	r3, [pc, #84]	@ (80009dc <MX_GPIO_Init+0xa8>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EPD_RST_Pin|EPD_CS_Pin|EPD_DC_Pin, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	2138      	movs	r1, #56	@ 0x38
 8000996:	4812      	ldr	r0, [pc, #72]	@ (80009e0 <MX_GPIO_Init+0xac>)
 8000998:	f000 fff0 	bl	800197c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EPD_BUSY_Pin;
 800099c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EPD_BUSY_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 030c 	add.w	r3, r7, #12
 80009ae:	4619      	mov	r1, r3
 80009b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009b4:	f000 fe20 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = EPD_RST_Pin|EPD_CS_Pin|EPD_DC_Pin;
 80009b8:	2338      	movs	r3, #56	@ 0x38
 80009ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	2301      	movs	r3, #1
 80009be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c8:	f107 030c 	add.w	r3, r7, #12
 80009cc:	4619      	mov	r1, r3
 80009ce:	4804      	ldr	r0, [pc, #16]	@ (80009e0 <MX_GPIO_Init+0xac>)
 80009d0:	f000 fe12 	bl	80015f8 <HAL_GPIO_Init>

}
 80009d4:	bf00      	nop
 80009d6:	3720      	adds	r7, #32
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40021000 	.word	0x40021000
 80009e0:	48000400 	.word	0x48000400

080009e4 <_write>:
#define HEIGHT 250
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
int _write(int file, char* ptr, int len){
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, ptr, len, 50);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	2332      	movs	r3, #50	@ 0x32
 80009f6:	68b9      	ldr	r1, [r7, #8]
 80009f8:	4803      	ldr	r0, [pc, #12]	@ (8000a08 <_write+0x24>)
 80009fa:	f002 fec3 	bl	8003784 <HAL_UART_Transmit>
	return len;
 80009fe:	687b      	ldr	r3, [r7, #4]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3710      	adds	r7, #16
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000104 	.word	0x20000104

08000a0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a12:	f000 fc6b 	bl	80012ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a16:	f000 f851 	bl	8000abc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a1a:	f7ff ff8b 	bl	8000934 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a1e:	f000 fbaf 	bl	8001180 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000a22:	f000 fa21 	bl	8000e68 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

    extern unsigned char pwr_logo[1000];
  	uint8_t *BlackImage;
  	uint16_t Imagesize = ((WIDTH % 8 == 0) ? (WIDTH / 8) : (WIDTH / 8 + 1)) * HEIGHT;
 8000a26:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8000a2a:	80fb      	strh	r3, [r7, #6]

  	EPD_Init(WIDTH, HEIGHT);
 8000a2c:	21fa      	movs	r1, #250	@ 0xfa
 8000a2e:	207a      	movs	r0, #122	@ 0x7a
 8000a30:	f7ff fe76 	bl	8000720 <EPD_Init>
  	EPD_Clear(WIDTH, HEIGHT);
 8000a34:	21fa      	movs	r1, #250	@ 0xfa
 8000a36:	207a      	movs	r0, #122	@ 0x7a
 8000a38:	f7ff fee2 	bl	8000800 <EPD_Clear>
  	HAL_Delay(1000);
 8000a3c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a40:	f000 fcd0 	bl	80013e4 <HAL_Delay>

  	if ((BlackImage = (uint8_t*) malloc(Imagesize)) == NULL) {
 8000a44:	88fb      	ldrh	r3, [r7, #6]
 8000a46:	4618      	mov	r0, r3
 8000a48:	f003 fbfa 	bl	8004240 <malloc>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d101      	bne.n	8000a5a <main+0x4e>
  		Error_Handler();
 8000a56:	f000 f882 	bl	8000b5e <Error_Handler>
  	}

  	Paint_NewImage(BlackImage, WIDTH, HEIGHT, 90, WHITE);
 8000a5a:	23ff      	movs	r3, #255	@ 0xff
 8000a5c:	9300      	str	r3, [sp, #0]
 8000a5e:	235a      	movs	r3, #90	@ 0x5a
 8000a60:	22fa      	movs	r2, #250	@ 0xfa
 8000a62:	217a      	movs	r1, #122	@ 0x7a
 8000a64:	6838      	ldr	r0, [r7, #0]
 8000a66:	f000 f881 	bl	8000b6c <Paint_NewImage>

  	Paint_SelectImage(BlackImage);
 8000a6a:	6838      	ldr	r0, [r7, #0]
 8000a6c:	f000 f8d6 	bl	8000c1c <Paint_SelectImage>
  	Paint_Clear(WHITE);
 8000a70:	20ff      	movs	r0, #255	@ 0xff
 8000a72:	f000 f8e3 	bl	8000c3c <Paint_Clear>
  	Paint_DrawBitMapXY(pwr_logo, (WIDTH * 3 / 4) - 46 / 2, (HEIGHT - 248) / 2, 46, 248);
 8000a76:	23f8      	movs	r3, #248	@ 0xf8
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	232e      	movs	r3, #46	@ 0x2e
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	2144      	movs	r1, #68	@ 0x44
 8000a80:	480c      	ldr	r0, [pc, #48]	@ (8000ab4 <main+0xa8>)
 8000a82:	f000 f987 	bl	8000d94 <Paint_DrawBitMapXY>

  	EPD_Display(BlackImage, WIDTH, HEIGHT);
 8000a86:	22fa      	movs	r2, #250	@ 0xfa
 8000a88:	217a      	movs	r1, #122	@ 0x7a
 8000a8a:	6838      	ldr	r0, [r7, #0]
 8000a8c:	f7ff fef6 	bl	800087c <EPD_Display>
  	HAL_Delay(2000);
 8000a90:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a94:	f000 fca6 	bl	80013e4 <HAL_Delay>

  	EPD_Sleep();
 8000a98:	f7ff ff3a 	bl	8000910 <EPD_Sleep>
  	free(BlackImage);
 8000a9c:	6838      	ldr	r0, [r7, #0]
 8000a9e:	f003 fbd7 	bl	8004250 <free>
  	BlackImage = NULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	603b      	str	r3, [r7, #0]
  	//close 5V

  	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2108      	movs	r1, #8
 8000aaa:	4803      	ldr	r0, [pc, #12]	@ (8000ab8 <main+0xac>)
 8000aac:	f000 ff66 	bl	800197c <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <main+0xa4>
 8000ab4:	08004c84 	.word	0x08004c84
 8000ab8:	48000400 	.word	0x48000400

08000abc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b096      	sub	sp, #88	@ 0x58
 8000ac0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	2244      	movs	r2, #68	@ 0x44
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f003 fe6e 	bl	80047ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad0:	463b      	mov	r3, r7
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]
 8000adc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ade:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000ae2:	f000 ff71 	bl	80019c8 <HAL_PWREx_ControlVoltageScaling>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000aec:	f000 f837 	bl	8000b5e <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000af0:	2302      	movs	r3, #2
 8000af2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000af4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000af8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000afa:	2310      	movs	r3, #16
 8000afc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000afe:	2302      	movs	r3, #2
 8000b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b02:	2302      	movs	r3, #2
 8000b04:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b06:	2301      	movs	r3, #1
 8000b08:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000b0a:	230a      	movs	r3, #10
 8000b0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b0e:	2307      	movs	r3, #7
 8000b10:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b12:	2302      	movs	r3, #2
 8000b14:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b16:	2302      	movs	r3, #2
 8000b18:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 ffa8 	bl	8001a74 <HAL_RCC_OscConfig>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000b2a:	f000 f818 	bl	8000b5e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b2e:	230f      	movs	r3, #15
 8000b30:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b32:	2303      	movs	r3, #3
 8000b34:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b36:	2300      	movs	r3, #0
 8000b38:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b42:	463b      	mov	r3, r7
 8000b44:	2104      	movs	r1, #4
 8000b46:	4618      	mov	r0, r3
 8000b48:	f001 fb70 	bl	800222c <HAL_RCC_ClockConfig>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b52:	f000 f804 	bl	8000b5e <Error_Handler>
  }
}
 8000b56:	bf00      	nop
 8000b58:	3758      	adds	r7, #88	@ 0x58
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b62:	b672      	cpsid	i
}
 8000b64:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b66:	bf00      	nop
 8000b68:	e7fd      	b.n	8000b66 <Error_Handler+0x8>
	...

08000b6c <Paint_NewImage>:
 image   :   Pointer to the image cache
 width   :   The width of the picture
 Height  :   The height of the picture
 Color   :   Whether the picture is inverted
 ******************************************************************************/
void Paint_NewImage(uint8_t *image, uint16_t Width, uint16_t Height, uint16_t Rotate, uint16_t Color) {
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	4608      	mov	r0, r1
 8000b76:	4611      	mov	r1, r2
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	817b      	strh	r3, [r7, #10]
 8000b7e:	460b      	mov	r3, r1
 8000b80:	813b      	strh	r3, [r7, #8]
 8000b82:	4613      	mov	r3, r2
 8000b84:	80fb      	strh	r3, [r7, #6]
	Paint.Image = NULL;
 8000b86:	4b24      	ldr	r3, [pc, #144]	@ (8000c18 <Paint_NewImage+0xac>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
	Paint.Image = image;
 8000b8c:	4a22      	ldr	r2, [pc, #136]	@ (8000c18 <Paint_NewImage+0xac>)
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	6013      	str	r3, [r2, #0]

	Paint.WidthMemory = Width;
 8000b92:	4a21      	ldr	r2, [pc, #132]	@ (8000c18 <Paint_NewImage+0xac>)
 8000b94:	897b      	ldrh	r3, [r7, #10]
 8000b96:	8113      	strh	r3, [r2, #8]
	Paint.HeightMemory = Height;
 8000b98:	4a1f      	ldr	r2, [pc, #124]	@ (8000c18 <Paint_NewImage+0xac>)
 8000b9a:	893b      	ldrh	r3, [r7, #8]
 8000b9c:	8153      	strh	r3, [r2, #10]
	Paint.Color = Color;
 8000b9e:	4a1e      	ldr	r2, [pc, #120]	@ (8000c18 <Paint_NewImage+0xac>)
 8000ba0:	8b3b      	ldrh	r3, [r7, #24]
 8000ba2:	8193      	strh	r3, [r2, #12]
	Paint.WidthByte = (Paint.WidthMemory % 8 == 0) ? (Paint.WidthMemory / 8) : (Paint.WidthMemory / 8 + 1);
 8000ba4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c18 <Paint_NewImage+0xac>)
 8000ba6:	891b      	ldrh	r3, [r3, #8]
 8000ba8:	f003 0307 	and.w	r3, r3, #7
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d104      	bne.n	8000bbc <Paint_NewImage+0x50>
 8000bb2:	4b19      	ldr	r3, [pc, #100]	@ (8000c18 <Paint_NewImage+0xac>)
 8000bb4:	891b      	ldrh	r3, [r3, #8]
 8000bb6:	08db      	lsrs	r3, r3, #3
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	e005      	b.n	8000bc8 <Paint_NewImage+0x5c>
 8000bbc:	4b16      	ldr	r3, [pc, #88]	@ (8000c18 <Paint_NewImage+0xac>)
 8000bbe:	891b      	ldrh	r3, [r3, #8]
 8000bc0:	08db      	lsrs	r3, r3, #3
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	4a13      	ldr	r2, [pc, #76]	@ (8000c18 <Paint_NewImage+0xac>)
 8000bca:	8253      	strh	r3, [r2, #18]
	Paint.HeightByte = Height;
 8000bcc:	4a12      	ldr	r2, [pc, #72]	@ (8000c18 <Paint_NewImage+0xac>)
 8000bce:	893b      	ldrh	r3, [r7, #8]
 8000bd0:	8293      	strh	r3, [r2, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);

	Paint.Rotate = Rotate;
 8000bd2:	4a11      	ldr	r2, [pc, #68]	@ (8000c18 <Paint_NewImage+0xac>)
 8000bd4:	88fb      	ldrh	r3, [r7, #6]
 8000bd6:	81d3      	strh	r3, [r2, #14]
	Paint.Mirror = MIRROR_NONE;
 8000bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c18 <Paint_NewImage+0xac>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	821a      	strh	r2, [r3, #16]
	Paint.Scale = 2;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	@ (8000c18 <Paint_NewImage+0xac>)
 8000be0:	2202      	movs	r2, #2
 8000be2:	82da      	strh	r2, [r3, #22]
	if (Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8000be4:	88fb      	ldrh	r3, [r7, #6]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d002      	beq.n	8000bf0 <Paint_NewImage+0x84>
 8000bea:	88fb      	ldrh	r3, [r7, #6]
 8000bec:	2bb4      	cmp	r3, #180	@ 0xb4
 8000bee:	d106      	bne.n	8000bfe <Paint_NewImage+0x92>
		Paint.Width = Width;
 8000bf0:	4a09      	ldr	r2, [pc, #36]	@ (8000c18 <Paint_NewImage+0xac>)
 8000bf2:	897b      	ldrh	r3, [r7, #10]
 8000bf4:	8093      	strh	r3, [r2, #4]
		Paint.Height = Height;
 8000bf6:	4a08      	ldr	r2, [pc, #32]	@ (8000c18 <Paint_NewImage+0xac>)
 8000bf8:	893b      	ldrh	r3, [r7, #8]
 8000bfa:	80d3      	strh	r3, [r2, #6]
 8000bfc:	e006      	b.n	8000c0c <Paint_NewImage+0xa0>
	} else {
		Paint.Width = Height;
 8000bfe:	4a06      	ldr	r2, [pc, #24]	@ (8000c18 <Paint_NewImage+0xac>)
 8000c00:	893b      	ldrh	r3, [r7, #8]
 8000c02:	8093      	strh	r3, [r2, #4]
		Paint.Height = Width;
 8000c04:	4a04      	ldr	r2, [pc, #16]	@ (8000c18 <Paint_NewImage+0xac>)
 8000c06:	897b      	ldrh	r3, [r7, #10]
 8000c08:	80d3      	strh	r3, [r2, #6]
	}
}
 8000c0a:	bf00      	nop
 8000c0c:	bf00      	nop
 8000c0e:	3714      	adds	r7, #20
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	20000084 	.word	0x20000084

08000c1c <Paint_SelectImage>:
/******************************************************************************
 function: Select Image
 parameter:
 image : Pointer to the image cache
 ******************************************************************************/
void Paint_SelectImage(uint8_t *image) {
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	Paint.Image = image;
 8000c24:	4a04      	ldr	r2, [pc, #16]	@ (8000c38 <Paint_SelectImage+0x1c>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6013      	str	r3, [r2, #0]
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	20000084 	.word	0x20000084

08000c3c <Paint_Clear>:
/******************************************************************************
 function: Clear the color of the picture
 parameter:
 Color : Painted colors
 ******************************************************************************/
void Paint_Clear(uint16_t Color) {
 8000c3c:	b480      	push	{r7}
 8000c3e:	b089      	sub	sp, #36	@ 0x24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	80fb      	strh	r3, [r7, #6]
	if (Paint.Scale == 2) {
 8000c46:	4b52      	ldr	r3, [pc, #328]	@ (8000d90 <Paint_Clear+0x154>)
 8000c48:	8adb      	ldrh	r3, [r3, #22]
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	d125      	bne.n	8000c9a <Paint_Clear+0x5e>
		for (uint16_t Y = 0; Y < Paint.HeightByte; Y++) {
 8000c4e:	2300      	movs	r3, #0
 8000c50:	83fb      	strh	r3, [r7, #30]
 8000c52:	e01c      	b.n	8000c8e <Paint_Clear+0x52>
			for (uint16_t X = 0; X < Paint.WidthByte; X++) { //8 pixel =  1 byte
 8000c54:	2300      	movs	r3, #0
 8000c56:	83bb      	strh	r3, [r7, #28]
 8000c58:	e011      	b.n	8000c7e <Paint_Clear+0x42>
				uint32_t Addr = X + Y * Paint.WidthByte;
 8000c5a:	8bba      	ldrh	r2, [r7, #28]
 8000c5c:	8bfb      	ldrh	r3, [r7, #30]
 8000c5e:	494c      	ldr	r1, [pc, #304]	@ (8000d90 <Paint_Clear+0x154>)
 8000c60:	8a49      	ldrh	r1, [r1, #18]
 8000c62:	fb01 f303 	mul.w	r3, r1, r3
 8000c66:	4413      	add	r3, r2
 8000c68:	60bb      	str	r3, [r7, #8]
				Paint.Image[Addr] = Color;
 8000c6a:	4b49      	ldr	r3, [pc, #292]	@ (8000d90 <Paint_Clear+0x154>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	4413      	add	r3, r2
 8000c72:	88fa      	ldrh	r2, [r7, #6]
 8000c74:	b2d2      	uxtb	r2, r2
 8000c76:	701a      	strb	r2, [r3, #0]
			for (uint16_t X = 0; X < Paint.WidthByte; X++) { //8 pixel =  1 byte
 8000c78:	8bbb      	ldrh	r3, [r7, #28]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	83bb      	strh	r3, [r7, #28]
 8000c7e:	4b44      	ldr	r3, [pc, #272]	@ (8000d90 <Paint_Clear+0x154>)
 8000c80:	8a5b      	ldrh	r3, [r3, #18]
 8000c82:	8bba      	ldrh	r2, [r7, #28]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d3e8      	bcc.n	8000c5a <Paint_Clear+0x1e>
		for (uint16_t Y = 0; Y < Paint.HeightByte; Y++) {
 8000c88:	8bfb      	ldrh	r3, [r7, #30]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	83fb      	strh	r3, [r7, #30]
 8000c8e:	4b40      	ldr	r3, [pc, #256]	@ (8000d90 <Paint_Clear+0x154>)
 8000c90:	8a9b      	ldrh	r3, [r3, #20]
 8000c92:	8bfa      	ldrh	r2, [r7, #30]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d3dd      	bcc.n	8000c54 <Paint_Clear+0x18>
				uint32_t Addr = X + Y * Paint.WidthByte;
				Paint.Image[Addr] = (Color << 4) | Color;
			}
		}
	}
}
 8000c98:	e073      	b.n	8000d82 <Paint_Clear+0x146>
	} else if (Paint.Scale == 4) {
 8000c9a:	4b3d      	ldr	r3, [pc, #244]	@ (8000d90 <Paint_Clear+0x154>)
 8000c9c:	8adb      	ldrh	r3, [r3, #22]
 8000c9e:	2b04      	cmp	r3, #4
 8000ca0:	d140      	bne.n	8000d24 <Paint_Clear+0xe8>
		Color = Color % 4;
 8000ca2:	88fb      	ldrh	r3, [r7, #6]
 8000ca4:	f003 0303 	and.w	r3, r3, #3
 8000ca8:	80fb      	strh	r3, [r7, #6]
		if (Color == 0x00) {
 8000caa:	88fb      	ldrh	r3, [r7, #6]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d102      	bne.n	8000cb6 <Paint_Clear+0x7a>
			Color = 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	80fb      	strh	r3, [r7, #6]
 8000cb4:	e010      	b.n	8000cd8 <Paint_Clear+0x9c>
		} else if (Color == 0x01) {
 8000cb6:	88fb      	ldrh	r3, [r7, #6]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d102      	bne.n	8000cc2 <Paint_Clear+0x86>
			Color = 0x55;
 8000cbc:	2355      	movs	r3, #85	@ 0x55
 8000cbe:	80fb      	strh	r3, [r7, #6]
 8000cc0:	e00a      	b.n	8000cd8 <Paint_Clear+0x9c>
		} else if (Color == 0x02) {
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d102      	bne.n	8000cce <Paint_Clear+0x92>
			Color = 0xAA;
 8000cc8:	23aa      	movs	r3, #170	@ 0xaa
 8000cca:	80fb      	strh	r3, [r7, #6]
 8000ccc:	e004      	b.n	8000cd8 <Paint_Clear+0x9c>
		} else if (Color == 0x03) {
 8000cce:	88fb      	ldrh	r3, [r7, #6]
 8000cd0:	2b03      	cmp	r3, #3
 8000cd2:	d101      	bne.n	8000cd8 <Paint_Clear+0x9c>
			Color = 0xff;
 8000cd4:	23ff      	movs	r3, #255	@ 0xff
 8000cd6:	80fb      	strh	r3, [r7, #6]
		for (uint16_t Y = 0; Y < Paint.HeightByte; Y++) {
 8000cd8:	2300      	movs	r3, #0
 8000cda:	837b      	strh	r3, [r7, #26]
 8000cdc:	e01c      	b.n	8000d18 <Paint_Clear+0xdc>
			for (uint16_t X = 0; X < Paint.WidthByte; X++) { //8 pixel =  1 byte
 8000cde:	2300      	movs	r3, #0
 8000ce0:	833b      	strh	r3, [r7, #24]
 8000ce2:	e011      	b.n	8000d08 <Paint_Clear+0xcc>
				uint32_t Addr = X + Y * Paint.WidthByte;
 8000ce4:	8b3a      	ldrh	r2, [r7, #24]
 8000ce6:	8b7b      	ldrh	r3, [r7, #26]
 8000ce8:	4929      	ldr	r1, [pc, #164]	@ (8000d90 <Paint_Clear+0x154>)
 8000cea:	8a49      	ldrh	r1, [r1, #18]
 8000cec:	fb01 f303 	mul.w	r3, r1, r3
 8000cf0:	4413      	add	r3, r2
 8000cf2:	60fb      	str	r3, [r7, #12]
				Paint.Image[Addr] = Color;
 8000cf4:	4b26      	ldr	r3, [pc, #152]	@ (8000d90 <Paint_Clear+0x154>)
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	88fa      	ldrh	r2, [r7, #6]
 8000cfe:	b2d2      	uxtb	r2, r2
 8000d00:	701a      	strb	r2, [r3, #0]
			for (uint16_t X = 0; X < Paint.WidthByte; X++) { //8 pixel =  1 byte
 8000d02:	8b3b      	ldrh	r3, [r7, #24]
 8000d04:	3301      	adds	r3, #1
 8000d06:	833b      	strh	r3, [r7, #24]
 8000d08:	4b21      	ldr	r3, [pc, #132]	@ (8000d90 <Paint_Clear+0x154>)
 8000d0a:	8a5b      	ldrh	r3, [r3, #18]
 8000d0c:	8b3a      	ldrh	r2, [r7, #24]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d3e8      	bcc.n	8000ce4 <Paint_Clear+0xa8>
		for (uint16_t Y = 0; Y < Paint.HeightByte; Y++) {
 8000d12:	8b7b      	ldrh	r3, [r7, #26]
 8000d14:	3301      	adds	r3, #1
 8000d16:	837b      	strh	r3, [r7, #26]
 8000d18:	4b1d      	ldr	r3, [pc, #116]	@ (8000d90 <Paint_Clear+0x154>)
 8000d1a:	8a9b      	ldrh	r3, [r3, #20]
 8000d1c:	8b7a      	ldrh	r2, [r7, #26]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d3dd      	bcc.n	8000cde <Paint_Clear+0xa2>
}
 8000d22:	e02e      	b.n	8000d82 <Paint_Clear+0x146>
	} else if (Paint.Scale == 7) {
 8000d24:	4b1a      	ldr	r3, [pc, #104]	@ (8000d90 <Paint_Clear+0x154>)
 8000d26:	8adb      	ldrh	r3, [r3, #22]
 8000d28:	2b07      	cmp	r3, #7
 8000d2a:	d12a      	bne.n	8000d82 <Paint_Clear+0x146>
		for (uint16_t Y = 0; Y < Paint.HeightByte; Y++) {
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	82fb      	strh	r3, [r7, #22]
 8000d30:	e022      	b.n	8000d78 <Paint_Clear+0x13c>
			for (uint16_t X = 0; X < Paint.WidthByte; X++) {
 8000d32:	2300      	movs	r3, #0
 8000d34:	82bb      	strh	r3, [r7, #20]
 8000d36:	e017      	b.n	8000d68 <Paint_Clear+0x12c>
				uint32_t Addr = X + Y * Paint.WidthByte;
 8000d38:	8aba      	ldrh	r2, [r7, #20]
 8000d3a:	8afb      	ldrh	r3, [r7, #22]
 8000d3c:	4914      	ldr	r1, [pc, #80]	@ (8000d90 <Paint_Clear+0x154>)
 8000d3e:	8a49      	ldrh	r1, [r1, #18]
 8000d40:	fb01 f303 	mul.w	r3, r1, r3
 8000d44:	4413      	add	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
				Paint.Image[Addr] = (Color << 4) | Color;
 8000d48:	88fb      	ldrh	r3, [r7, #6]
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	b25a      	sxtb	r2, r3
 8000d4e:	88fb      	ldrh	r3, [r7, #6]
 8000d50:	b25b      	sxtb	r3, r3
 8000d52:	4313      	orrs	r3, r2
 8000d54:	b259      	sxtb	r1, r3
 8000d56:	4b0e      	ldr	r3, [pc, #56]	@ (8000d90 <Paint_Clear+0x154>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	b2ca      	uxtb	r2, r1
 8000d60:	701a      	strb	r2, [r3, #0]
			for (uint16_t X = 0; X < Paint.WidthByte; X++) {
 8000d62:	8abb      	ldrh	r3, [r7, #20]
 8000d64:	3301      	adds	r3, #1
 8000d66:	82bb      	strh	r3, [r7, #20]
 8000d68:	4b09      	ldr	r3, [pc, #36]	@ (8000d90 <Paint_Clear+0x154>)
 8000d6a:	8a5b      	ldrh	r3, [r3, #18]
 8000d6c:	8aba      	ldrh	r2, [r7, #20]
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d3e2      	bcc.n	8000d38 <Paint_Clear+0xfc>
		for (uint16_t Y = 0; Y < Paint.HeightByte; Y++) {
 8000d72:	8afb      	ldrh	r3, [r7, #22]
 8000d74:	3301      	adds	r3, #1
 8000d76:	82fb      	strh	r3, [r7, #22]
 8000d78:	4b05      	ldr	r3, [pc, #20]	@ (8000d90 <Paint_Clear+0x154>)
 8000d7a:	8a9b      	ldrh	r3, [r3, #20]
 8000d7c:	8afa      	ldrh	r2, [r7, #22]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d3d7      	bcc.n	8000d32 <Paint_Clear+0xf6>
}
 8000d82:	bf00      	nop
 8000d84:	3724      	adds	r7, #36	@ 0x24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	20000084 	.word	0x20000084

08000d94 <Paint_DrawBitMapXY>:
			Paint.Image[Addr] = (unsigned char) image_buffer[Addr];
		}
	}
}

void Paint_DrawBitMapXY(const unsigned char *image_buffer, uint16_t Xstart, uint16_t Ystart, uint16_t Width, uint16_t Height) {
 8000d94:	b480      	push	{r7}
 8000d96:	b089      	sub	sp, #36	@ 0x24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	4611      	mov	r1, r2
 8000da0:	461a      	mov	r2, r3
 8000da2:	4603      	mov	r3, r0
 8000da4:	817b      	strh	r3, [r7, #10]
 8000da6:	460b      	mov	r3, r1
 8000da8:	813b      	strh	r3, [r7, #8]
 8000daa:	4613      	mov	r3, r2
 8000dac:	80fb      	strh	r3, [r7, #6]
	uint16_t x, y;
	uint32_t Addr_buff = 0, Addr_image = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61bb      	str	r3, [r7, #24]
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]
	Width = (Width % 8 == 0) ? (Width / 8) : (Width / 8 + 1);
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	f003 0307 	and.w	r3, r3, #7
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d103      	bne.n	8000dca <Paint_DrawBitMapXY+0x36>
 8000dc2:	88fb      	ldrh	r3, [r7, #6]
 8000dc4:	08db      	lsrs	r3, r3, #3
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	e004      	b.n	8000dd4 <Paint_DrawBitMapXY+0x40>
 8000dca:	88fb      	ldrh	r3, [r7, #6]
 8000dcc:	08db      	lsrs	r3, r3, #3
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	80fb      	strh	r3, [r7, #6]
	Xstart = (Xstart % 8 == 0) ? (Xstart / 8) : (Xstart / 8 + 1);
 8000dd6:	897b      	ldrh	r3, [r7, #10]
 8000dd8:	f003 0307 	and.w	r3, r3, #7
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d103      	bne.n	8000dea <Paint_DrawBitMapXY+0x56>
 8000de2:	897b      	ldrh	r3, [r7, #10]
 8000de4:	08db      	lsrs	r3, r3, #3
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	e004      	b.n	8000df4 <Paint_DrawBitMapXY+0x60>
 8000dea:	897b      	ldrh	r3, [r7, #10]
 8000dec:	08db      	lsrs	r3, r3, #3
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	3301      	adds	r3, #1
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	817b      	strh	r3, [r7, #10]
	for (y = 0; y < Height; y++) {
 8000df6:	2300      	movs	r3, #0
 8000df8:	83bb      	strh	r3, [r7, #28]
 8000dfa:	e028      	b.n	8000e4e <Paint_DrawBitMapXY+0xba>
		for (x = 0; x < Width; x++) { //8 pixel =  1 byte
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	83fb      	strh	r3, [r7, #30]
 8000e00:	e01e      	b.n	8000e40 <Paint_DrawBitMapXY+0xac>
			Addr_image = x + y * Width;
 8000e02:	8bfa      	ldrh	r2, [r7, #30]
 8000e04:	8bbb      	ldrh	r3, [r7, #28]
 8000e06:	88f9      	ldrh	r1, [r7, #6]
 8000e08:	fb01 f303 	mul.w	r3, r1, r3
 8000e0c:	4413      	add	r3, r2
 8000e0e:	617b      	str	r3, [r7, #20]
			Addr_buff = (x + Xstart) + (y + Ystart) * Paint.WidthByte;
 8000e10:	8bfa      	ldrh	r2, [r7, #30]
 8000e12:	897b      	ldrh	r3, [r7, #10]
 8000e14:	441a      	add	r2, r3
 8000e16:	8bb9      	ldrh	r1, [r7, #28]
 8000e18:	893b      	ldrh	r3, [r7, #8]
 8000e1a:	440b      	add	r3, r1
 8000e1c:	4911      	ldr	r1, [pc, #68]	@ (8000e64 <Paint_DrawBitMapXY+0xd0>)
 8000e1e:	8a49      	ldrh	r1, [r1, #18]
 8000e20:	fb01 f303 	mul.w	r3, r1, r3
 8000e24:	4413      	add	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
			Paint.Image[Addr_buff] = (unsigned char) image_buffer[Addr_image];
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	441a      	add	r2, r3
 8000e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e64 <Paint_DrawBitMapXY+0xd0>)
 8000e30:	6819      	ldr	r1, [r3, #0]
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	440b      	add	r3, r1
 8000e36:	7812      	ldrb	r2, [r2, #0]
 8000e38:	701a      	strb	r2, [r3, #0]
		for (x = 0; x < Width; x++) { //8 pixel =  1 byte
 8000e3a:	8bfb      	ldrh	r3, [r7, #30]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	83fb      	strh	r3, [r7, #30]
 8000e40:	8bfa      	ldrh	r2, [r7, #30]
 8000e42:	88fb      	ldrh	r3, [r7, #6]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d3dc      	bcc.n	8000e02 <Paint_DrawBitMapXY+0x6e>
	for (y = 0; y < Height; y++) {
 8000e48:	8bbb      	ldrh	r3, [r7, #28]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	83bb      	strh	r3, [r7, #28]
 8000e4e:	8bba      	ldrh	r2, [r7, #28]
 8000e50:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000e52:	429a      	cmp	r2, r3
 8000e54:	d3d2      	bcc.n	8000dfc <Paint_DrawBitMapXY+0x68>
		}
	}
}
 8000e56:	bf00      	nop
 8000e58:	bf00      	nop
 8000e5a:	3724      	adds	r7, #36	@ 0x24
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	20000084 	.word	0x20000084

08000e68 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000e6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000edc <MX_SPI2_Init+0x74>)
 8000e6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ee0 <MX_SPI2_Init+0x78>)
 8000e70:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e72:	4b1a      	ldr	r3, [pc, #104]	@ (8000edc <MX_SPI2_Init+0x74>)
 8000e74:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e78:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e7a:	4b18      	ldr	r3, [pc, #96]	@ (8000edc <MX_SPI2_Init+0x74>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e80:	4b16      	ldr	r3, [pc, #88]	@ (8000edc <MX_SPI2_Init+0x74>)
 8000e82:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000e86:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e88:	4b14      	ldr	r3, [pc, #80]	@ (8000edc <MX_SPI2_Init+0x74>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e8e:	4b13      	ldr	r3, [pc, #76]	@ (8000edc <MX_SPI2_Init+0x74>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e94:	4b11      	ldr	r3, [pc, #68]	@ (8000edc <MX_SPI2_Init+0x74>)
 8000e96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e9a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000edc <MX_SPI2_Init+0x74>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8000edc <MX_SPI2_Init+0x74>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8000edc <MX_SPI2_Init+0x74>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000eae:	4b0b      	ldr	r3, [pc, #44]	@ (8000edc <MX_SPI2_Init+0x74>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000eb4:	4b09      	ldr	r3, [pc, #36]	@ (8000edc <MX_SPI2_Init+0x74>)
 8000eb6:	2207      	movs	r2, #7
 8000eb8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000eba:	4b08      	ldr	r3, [pc, #32]	@ (8000edc <MX_SPI2_Init+0x74>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <MX_SPI2_Init+0x74>)
 8000ec2:	2208      	movs	r2, #8
 8000ec4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ec6:	4805      	ldr	r0, [pc, #20]	@ (8000edc <MX_SPI2_Init+0x74>)
 8000ec8:	f002 f890 	bl	8002fec <HAL_SPI_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000ed2:	f7ff fe44 	bl	8000b5e <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	2000009c 	.word	0x2000009c
 8000ee0:	40003800 	.word	0x40003800

08000ee4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	@ 0x28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a25      	ldr	r2, [pc, #148]	@ (8000f98 <HAL_SPI_MspInit+0xb4>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d144      	bne.n	8000f90 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f06:	4b25      	ldr	r3, [pc, #148]	@ (8000f9c <HAL_SPI_MspInit+0xb8>)
 8000f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f0a:	4a24      	ldr	r2, [pc, #144]	@ (8000f9c <HAL_SPI_MspInit+0xb8>)
 8000f0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f10:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f12:	4b22      	ldr	r3, [pc, #136]	@ (8000f9c <HAL_SPI_MspInit+0xb8>)
 8000f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000f9c <HAL_SPI_MspInit+0xb8>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f22:	4a1e      	ldr	r2, [pc, #120]	@ (8000f9c <HAL_SPI_MspInit+0xb8>)
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000f9c <HAL_SPI_MspInit+0xb8>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f36:	4b19      	ldr	r3, [pc, #100]	@ (8000f9c <HAL_SPI_MspInit+0xb8>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f3a:	4a18      	ldr	r2, [pc, #96]	@ (8000f9c <HAL_SPI_MspInit+0xb8>)
 8000f3c:	f043 0302 	orr.w	r3, r3, #2
 8000f40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f42:	4b16      	ldr	r3, [pc, #88]	@ (8000f9c <HAL_SPI_MspInit+0xb8>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f4e:	2308      	movs	r3, #8
 8000f50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f5e:	2305      	movs	r3, #5
 8000f60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f62:	f107 0314 	add.w	r3, r7, #20
 8000f66:	4619      	mov	r1, r3
 8000f68:	480d      	ldr	r0, [pc, #52]	@ (8000fa0 <HAL_SPI_MspInit+0xbc>)
 8000f6a:	f000 fb45 	bl	80015f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f80:	2305      	movs	r3, #5
 8000f82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4806      	ldr	r0, [pc, #24]	@ (8000fa4 <HAL_SPI_MspInit+0xc0>)
 8000f8c:	f000 fb34 	bl	80015f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000f90:	bf00      	nop
 8000f92:	3728      	adds	r7, #40	@ 0x28
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40003800 	.word	0x40003800
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	48000800 	.word	0x48000800
 8000fa4:	48000400 	.word	0x48000400

08000fa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fae:	4b0f      	ldr	r3, [pc, #60]	@ (8000fec <HAL_MspInit+0x44>)
 8000fb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fb2:	4a0e      	ldr	r2, [pc, #56]	@ (8000fec <HAL_MspInit+0x44>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fba:	4b0c      	ldr	r3, [pc, #48]	@ (8000fec <HAL_MspInit+0x44>)
 8000fbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc6:	4b09      	ldr	r3, [pc, #36]	@ (8000fec <HAL_MspInit+0x44>)
 8000fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fca:	4a08      	ldr	r2, [pc, #32]	@ (8000fec <HAL_MspInit+0x44>)
 8000fcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fd2:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <HAL_MspInit+0x44>)
 8000fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	40021000 	.word	0x40021000

08000ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <NMI_Handler+0x4>

08000ff8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ffc:	bf00      	nop
 8000ffe:	e7fd      	b.n	8000ffc <HardFault_Handler+0x4>

08001000 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001004:	bf00      	nop
 8001006:	e7fd      	b.n	8001004 <MemManage_Handler+0x4>

08001008 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <BusFault_Handler+0x4>

08001010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <UsageFault_Handler+0x4>

08001018 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001046:	f000 f9ad 	bl	80013a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}

0800104e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b086      	sub	sp, #24
 8001052:	af00      	add	r7, sp, #0
 8001054:	60f8      	str	r0, [r7, #12]
 8001056:	60b9      	str	r1, [r7, #8]
 8001058:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
 800105e:	e00a      	b.n	8001076 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001060:	f3af 8000 	nop.w
 8001064:	4601      	mov	r1, r0
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	1c5a      	adds	r2, r3, #1
 800106a:	60ba      	str	r2, [r7, #8]
 800106c:	b2ca      	uxtb	r2, r1
 800106e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	3301      	adds	r3, #1
 8001074:	617b      	str	r3, [r7, #20]
 8001076:	697a      	ldr	r2, [r7, #20]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	429a      	cmp	r2, r3
 800107c:	dbf0      	blt.n	8001060 <_read+0x12>
  }

  return len;
 800107e:	687b      	ldr	r3, [r7, #4]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001090:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001094:	4618      	mov	r0, r3
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010b0:	605a      	str	r2, [r3, #4]
  return 0;
 80010b2:	2300      	movs	r3, #0
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <_isatty>:

int _isatty(int file)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010c8:	2301      	movs	r3, #1
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b085      	sub	sp, #20
 80010da:	af00      	add	r7, sp, #0
 80010dc:	60f8      	str	r0, [r7, #12]
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010e2:	2300      	movs	r3, #0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3714      	adds	r7, #20
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f8:	4a14      	ldr	r2, [pc, #80]	@ (800114c <_sbrk+0x5c>)
 80010fa:	4b15      	ldr	r3, [pc, #84]	@ (8001150 <_sbrk+0x60>)
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001104:	4b13      	ldr	r3, [pc, #76]	@ (8001154 <_sbrk+0x64>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d102      	bne.n	8001112 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800110c:	4b11      	ldr	r3, [pc, #68]	@ (8001154 <_sbrk+0x64>)
 800110e:	4a12      	ldr	r2, [pc, #72]	@ (8001158 <_sbrk+0x68>)
 8001110:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001112:	4b10      	ldr	r3, [pc, #64]	@ (8001154 <_sbrk+0x64>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	429a      	cmp	r2, r3
 800111e:	d207      	bcs.n	8001130 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001120:	f003 fba2 	bl	8004868 <__errno>
 8001124:	4603      	mov	r3, r0
 8001126:	220c      	movs	r2, #12
 8001128:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800112a:	f04f 33ff 	mov.w	r3, #4294967295
 800112e:	e009      	b.n	8001144 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001130:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <_sbrk+0x64>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001136:	4b07      	ldr	r3, [pc, #28]	@ (8001154 <_sbrk+0x64>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	4a05      	ldr	r2, [pc, #20]	@ (8001154 <_sbrk+0x64>)
 8001140:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001142:	68fb      	ldr	r3, [r7, #12]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20018000 	.word	0x20018000
 8001150:	00000400 	.word	0x00000400
 8001154:	20000100 	.word	0x20000100
 8001158:	200002e0 	.word	0x200002e0

0800115c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001160:	4b06      	ldr	r3, [pc, #24]	@ (800117c <SystemInit+0x20>)
 8001162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001166:	4a05      	ldr	r2, [pc, #20]	@ (800117c <SystemInit+0x20>)
 8001168:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800116c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001184:	4b14      	ldr	r3, [pc, #80]	@ (80011d8 <MX_USART2_UART_Init+0x58>)
 8001186:	4a15      	ldr	r2, [pc, #84]	@ (80011dc <MX_USART2_UART_Init+0x5c>)
 8001188:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800118a:	4b13      	ldr	r3, [pc, #76]	@ (80011d8 <MX_USART2_UART_Init+0x58>)
 800118c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001190:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001192:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <MX_USART2_UART_Init+0x58>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001198:	4b0f      	ldr	r3, [pc, #60]	@ (80011d8 <MX_USART2_UART_Init+0x58>)
 800119a:	2200      	movs	r2, #0
 800119c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800119e:	4b0e      	ldr	r3, [pc, #56]	@ (80011d8 <MX_USART2_UART_Init+0x58>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011a4:	4b0c      	ldr	r3, [pc, #48]	@ (80011d8 <MX_USART2_UART_Init+0x58>)
 80011a6:	220c      	movs	r2, #12
 80011a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011aa:	4b0b      	ldr	r3, [pc, #44]	@ (80011d8 <MX_USART2_UART_Init+0x58>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b0:	4b09      	ldr	r3, [pc, #36]	@ (80011d8 <MX_USART2_UART_Init+0x58>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011b6:	4b08      	ldr	r3, [pc, #32]	@ (80011d8 <MX_USART2_UART_Init+0x58>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011bc:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <MX_USART2_UART_Init+0x58>)
 80011be:	2200      	movs	r2, #0
 80011c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011c2:	4805      	ldr	r0, [pc, #20]	@ (80011d8 <MX_USART2_UART_Init+0x58>)
 80011c4:	f002 fa90 	bl	80036e8 <HAL_UART_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011ce:	f7ff fcc6 	bl	8000b5e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000104 	.word	0x20000104
 80011dc:	40004400 	.word	0x40004400

080011e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b0ac      	sub	sp, #176	@ 0xb0
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	2288      	movs	r2, #136	@ 0x88
 80011fe:	2100      	movs	r1, #0
 8001200:	4618      	mov	r0, r3
 8001202:	f003 fad3 	bl	80047ac <memset>
  if(uartHandle->Instance==USART2)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a21      	ldr	r2, [pc, #132]	@ (8001290 <HAL_UART_MspInit+0xb0>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d13b      	bne.n	8001288 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001210:	2302      	movs	r3, #2
 8001212:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001214:	2300      	movs	r3, #0
 8001216:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	4618      	mov	r0, r3
 800121e:	f001 fa29 	bl	8002674 <HAL_RCCEx_PeriphCLKConfig>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001228:	f7ff fc99 	bl	8000b5e <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800122c:	4b19      	ldr	r3, [pc, #100]	@ (8001294 <HAL_UART_MspInit+0xb4>)
 800122e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001230:	4a18      	ldr	r2, [pc, #96]	@ (8001294 <HAL_UART_MspInit+0xb4>)
 8001232:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001236:	6593      	str	r3, [r2, #88]	@ 0x58
 8001238:	4b16      	ldr	r3, [pc, #88]	@ (8001294 <HAL_UART_MspInit+0xb4>)
 800123a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800123c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001240:	613b      	str	r3, [r7, #16]
 8001242:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001244:	4b13      	ldr	r3, [pc, #76]	@ (8001294 <HAL_UART_MspInit+0xb4>)
 8001246:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001248:	4a12      	ldr	r2, [pc, #72]	@ (8001294 <HAL_UART_MspInit+0xb4>)
 800124a:	f043 0301 	orr.w	r3, r3, #1
 800124e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001250:	4b10      	ldr	r3, [pc, #64]	@ (8001294 <HAL_UART_MspInit+0xb4>)
 8001252:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800125c:	230c      	movs	r3, #12
 800125e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001262:	2302      	movs	r3, #2
 8001264:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126e:	2303      	movs	r3, #3
 8001270:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001274:	2307      	movs	r3, #7
 8001276:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800127e:	4619      	mov	r1, r3
 8001280:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001284:	f000 f9b8 	bl	80015f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001288:	bf00      	nop
 800128a:	37b0      	adds	r7, #176	@ 0xb0
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40004400 	.word	0x40004400
 8001294:	40021000 	.word	0x40021000

08001298 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001298:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800129c:	f7ff ff5e 	bl	800115c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012a0:	480c      	ldr	r0, [pc, #48]	@ (80012d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80012a2:	490d      	ldr	r1, [pc, #52]	@ (80012d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012a4:	4a0d      	ldr	r2, [pc, #52]	@ (80012dc <LoopForever+0xe>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a8:	e002      	b.n	80012b0 <LoopCopyDataInit>

080012aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ae:	3304      	adds	r3, #4

080012b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b4:	d3f9      	bcc.n	80012aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012b6:	4a0a      	ldr	r2, [pc, #40]	@ (80012e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012b8:	4c0a      	ldr	r4, [pc, #40]	@ (80012e4 <LoopForever+0x16>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012bc:	e001      	b.n	80012c2 <LoopFillZerobss>

080012be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c0:	3204      	adds	r2, #4

080012c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c4:	d3fb      	bcc.n	80012be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012c6:	f003 fad5 	bl	8004874 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012ca:	f7ff fb9f 	bl	8000a0c <main>

080012ce <LoopForever>:

LoopForever:
    b LoopForever
 80012ce:	e7fe      	b.n	80012ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012d0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80012d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80012dc:	08005c7c 	.word	0x08005c7c
  ldr r2, =_sbss
 80012e0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80012e4:	200002dc 	.word	0x200002dc

080012e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012e8:	e7fe      	b.n	80012e8 <ADC1_2_IRQHandler>
	...

080012ec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012f2:	2300      	movs	r3, #0
 80012f4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001328 <HAL_Init+0x3c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001328 <HAL_Init+0x3c>)
 80012fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001300:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001302:	2003      	movs	r0, #3
 8001304:	f000 f944 	bl	8001590 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001308:	2000      	movs	r0, #0
 800130a:	f000 f80f 	bl	800132c <HAL_InitTick>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d002      	beq.n	800131a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	71fb      	strb	r3, [r7, #7]
 8001318:	e001      	b.n	800131e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800131a:	f7ff fe45 	bl	8000fa8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800131e:	79fb      	ldrb	r3, [r7, #7]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40022000 	.word	0x40022000

0800132c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001334:	2300      	movs	r3, #0
 8001336:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001338:	4b17      	ldr	r3, [pc, #92]	@ (8001398 <HAL_InitTick+0x6c>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d023      	beq.n	8001388 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001340:	4b16      	ldr	r3, [pc, #88]	@ (800139c <HAL_InitTick+0x70>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4b14      	ldr	r3, [pc, #80]	@ (8001398 <HAL_InitTick+0x6c>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	4619      	mov	r1, r3
 800134a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800134e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001352:	fbb2 f3f3 	udiv	r3, r2, r3
 8001356:	4618      	mov	r0, r3
 8001358:	f000 f941 	bl	80015de <HAL_SYSTICK_Config>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d10f      	bne.n	8001382 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2b0f      	cmp	r3, #15
 8001366:	d809      	bhi.n	800137c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001368:	2200      	movs	r2, #0
 800136a:	6879      	ldr	r1, [r7, #4]
 800136c:	f04f 30ff 	mov.w	r0, #4294967295
 8001370:	f000 f919 	bl	80015a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001374:	4a0a      	ldr	r2, [pc, #40]	@ (80013a0 <HAL_InitTick+0x74>)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6013      	str	r3, [r2, #0]
 800137a:	e007      	b.n	800138c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	73fb      	strb	r3, [r7, #15]
 8001380:	e004      	b.n	800138c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	73fb      	strb	r3, [r7, #15]
 8001386:	e001      	b.n	800138c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800138c:	7bfb      	ldrb	r3, [r7, #15]
}
 800138e:	4618      	mov	r0, r3
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000008 	.word	0x20000008
 800139c:	20000000 	.word	0x20000000
 80013a0:	20000004 	.word	0x20000004

080013a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013a8:	4b06      	ldr	r3, [pc, #24]	@ (80013c4 <HAL_IncTick+0x20>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b06      	ldr	r3, [pc, #24]	@ (80013c8 <HAL_IncTick+0x24>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4413      	add	r3, r2
 80013b4:	4a04      	ldr	r2, [pc, #16]	@ (80013c8 <HAL_IncTick+0x24>)
 80013b6:	6013      	str	r3, [r2, #0]
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	20000008 	.word	0x20000008
 80013c8:	2000018c 	.word	0x2000018c

080013cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return uwTick;
 80013d0:	4b03      	ldr	r3, [pc, #12]	@ (80013e0 <HAL_GetTick+0x14>)
 80013d2:	681b      	ldr	r3, [r3, #0]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	2000018c 	.word	0x2000018c

080013e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013ec:	f7ff ffee 	bl	80013cc <HAL_GetTick>
 80013f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013fc:	d005      	beq.n	800140a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80013fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001428 <HAL_Delay+0x44>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	461a      	mov	r2, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4413      	add	r3, r2
 8001408:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800140a:	bf00      	nop
 800140c:	f7ff ffde 	bl	80013cc <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	429a      	cmp	r2, r3
 800141a:	d8f7      	bhi.n	800140c <HAL_Delay+0x28>
  {
  }
}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000008 	.word	0x20000008

0800142c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800143c:	4b0c      	ldr	r3, [pc, #48]	@ (8001470 <__NVIC_SetPriorityGrouping+0x44>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001442:	68ba      	ldr	r2, [r7, #8]
 8001444:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001448:	4013      	ands	r3, r2
 800144a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001454:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001458:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800145c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800145e:	4a04      	ldr	r2, [pc, #16]	@ (8001470 <__NVIC_SetPriorityGrouping+0x44>)
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	60d3      	str	r3, [r2, #12]
}
 8001464:	bf00      	nop
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001478:	4b04      	ldr	r3, [pc, #16]	@ (800148c <__NVIC_GetPriorityGrouping+0x18>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	0a1b      	lsrs	r3, r3, #8
 800147e:	f003 0307 	and.w	r3, r3, #7
}
 8001482:	4618      	mov	r0, r3
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	6039      	str	r1, [r7, #0]
 800149a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800149c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	db0a      	blt.n	80014ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	490c      	ldr	r1, [pc, #48]	@ (80014dc <__NVIC_SetPriority+0x4c>)
 80014aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ae:	0112      	lsls	r2, r2, #4
 80014b0:	b2d2      	uxtb	r2, r2
 80014b2:	440b      	add	r3, r1
 80014b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014b8:	e00a      	b.n	80014d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	4908      	ldr	r1, [pc, #32]	@ (80014e0 <__NVIC_SetPriority+0x50>)
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	f003 030f 	and.w	r3, r3, #15
 80014c6:	3b04      	subs	r3, #4
 80014c8:	0112      	lsls	r2, r2, #4
 80014ca:	b2d2      	uxtb	r2, r2
 80014cc:	440b      	add	r3, r1
 80014ce:	761a      	strb	r2, [r3, #24]
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	e000e100 	.word	0xe000e100
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b089      	sub	sp, #36	@ 0x24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	f1c3 0307 	rsb	r3, r3, #7
 80014fe:	2b04      	cmp	r3, #4
 8001500:	bf28      	it	cs
 8001502:	2304      	movcs	r3, #4
 8001504:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3304      	adds	r3, #4
 800150a:	2b06      	cmp	r3, #6
 800150c:	d902      	bls.n	8001514 <NVIC_EncodePriority+0x30>
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3b03      	subs	r3, #3
 8001512:	e000      	b.n	8001516 <NVIC_EncodePriority+0x32>
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001518:	f04f 32ff 	mov.w	r2, #4294967295
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43da      	mvns	r2, r3
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	401a      	ands	r2, r3
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800152c:	f04f 31ff 	mov.w	r1, #4294967295
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	fa01 f303 	lsl.w	r3, r1, r3
 8001536:	43d9      	mvns	r1, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800153c:	4313      	orrs	r3, r2
         );
}
 800153e:	4618      	mov	r0, r3
 8001540:	3724      	adds	r7, #36	@ 0x24
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
	...

0800154c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3b01      	subs	r3, #1
 8001558:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800155c:	d301      	bcc.n	8001562 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800155e:	2301      	movs	r3, #1
 8001560:	e00f      	b.n	8001582 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001562:	4a0a      	ldr	r2, [pc, #40]	@ (800158c <SysTick_Config+0x40>)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3b01      	subs	r3, #1
 8001568:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800156a:	210f      	movs	r1, #15
 800156c:	f04f 30ff 	mov.w	r0, #4294967295
 8001570:	f7ff ff8e 	bl	8001490 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001574:	4b05      	ldr	r3, [pc, #20]	@ (800158c <SysTick_Config+0x40>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800157a:	4b04      	ldr	r3, [pc, #16]	@ (800158c <SysTick_Config+0x40>)
 800157c:	2207      	movs	r2, #7
 800157e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	e000e010 	.word	0xe000e010

08001590 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7ff ff47 	bl	800142c <__NVIC_SetPriorityGrouping>
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b086      	sub	sp, #24
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	4603      	mov	r3, r0
 80015ae:	60b9      	str	r1, [r7, #8]
 80015b0:	607a      	str	r2, [r7, #4]
 80015b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015b8:	f7ff ff5c 	bl	8001474 <__NVIC_GetPriorityGrouping>
 80015bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	68b9      	ldr	r1, [r7, #8]
 80015c2:	6978      	ldr	r0, [r7, #20]
 80015c4:	f7ff ff8e 	bl	80014e4 <NVIC_EncodePriority>
 80015c8:	4602      	mov	r2, r0
 80015ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ce:	4611      	mov	r1, r2
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff ff5d 	bl	8001490 <__NVIC_SetPriority>
}
 80015d6:	bf00      	nop
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b082      	sub	sp, #8
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff ffb0 	bl	800154c <SysTick_Config>
 80015ec:	4603      	mov	r3, r0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b087      	sub	sp, #28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001606:	e17f      	b.n	8001908 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	2101      	movs	r1, #1
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	fa01 f303 	lsl.w	r3, r1, r3
 8001614:	4013      	ands	r3, r2
 8001616:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2b00      	cmp	r3, #0
 800161c:	f000 8171 	beq.w	8001902 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f003 0303 	and.w	r3, r3, #3
 8001628:	2b01      	cmp	r3, #1
 800162a:	d005      	beq.n	8001638 <HAL_GPIO_Init+0x40>
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f003 0303 	and.w	r3, r3, #3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d130      	bne.n	800169a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	2203      	movs	r2, #3
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	4013      	ands	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	68da      	ldr	r2, [r3, #12]
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	4313      	orrs	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800166e:	2201      	movs	r2, #1
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43db      	mvns	r3, r3
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	4013      	ands	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	091b      	lsrs	r3, r3, #4
 8001684:	f003 0201 	and.w	r2, r3, #1
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	4313      	orrs	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f003 0303 	and.w	r3, r3, #3
 80016a2:	2b03      	cmp	r3, #3
 80016a4:	d118      	bne.n	80016d8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80016ac:	2201      	movs	r2, #1
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	4013      	ands	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	08db      	lsrs	r3, r3, #3
 80016c2:	f003 0201 	and.w	r2, r3, #1
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 0303 	and.w	r3, r3, #3
 80016e0:	2b03      	cmp	r3, #3
 80016e2:	d017      	beq.n	8001714 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	2203      	movs	r2, #3
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4013      	ands	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	4313      	orrs	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 0303 	and.w	r3, r3, #3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d123      	bne.n	8001768 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	08da      	lsrs	r2, r3, #3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3208      	adds	r2, #8
 8001728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800172c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	220f      	movs	r2, #15
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	4013      	ands	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	691a      	ldr	r2, [r3, #16]
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	4313      	orrs	r3, r2
 8001758:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	08da      	lsrs	r2, r3, #3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3208      	adds	r2, #8
 8001762:	6939      	ldr	r1, [r7, #16]
 8001764:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	2203      	movs	r2, #3
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	4013      	ands	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 0203 	and.w	r2, r3, #3
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	4313      	orrs	r3, r2
 8001794:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f000 80ac 	beq.w	8001902 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017aa:	4b5f      	ldr	r3, [pc, #380]	@ (8001928 <HAL_GPIO_Init+0x330>)
 80017ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ae:	4a5e      	ldr	r2, [pc, #376]	@ (8001928 <HAL_GPIO_Init+0x330>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80017b6:	4b5c      	ldr	r3, [pc, #368]	@ (8001928 <HAL_GPIO_Init+0x330>)
 80017b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017c2:	4a5a      	ldr	r2, [pc, #360]	@ (800192c <HAL_GPIO_Init+0x334>)
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	089b      	lsrs	r3, r3, #2
 80017c8:	3302      	adds	r3, #2
 80017ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	f003 0303 	and.w	r3, r3, #3
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	220f      	movs	r2, #15
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43db      	mvns	r3, r3
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	4013      	ands	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80017ec:	d025      	beq.n	800183a <HAL_GPIO_Init+0x242>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a4f      	ldr	r2, [pc, #316]	@ (8001930 <HAL_GPIO_Init+0x338>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d01f      	beq.n	8001836 <HAL_GPIO_Init+0x23e>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a4e      	ldr	r2, [pc, #312]	@ (8001934 <HAL_GPIO_Init+0x33c>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d019      	beq.n	8001832 <HAL_GPIO_Init+0x23a>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a4d      	ldr	r2, [pc, #308]	@ (8001938 <HAL_GPIO_Init+0x340>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d013      	beq.n	800182e <HAL_GPIO_Init+0x236>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a4c      	ldr	r2, [pc, #304]	@ (800193c <HAL_GPIO_Init+0x344>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d00d      	beq.n	800182a <HAL_GPIO_Init+0x232>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a4b      	ldr	r2, [pc, #300]	@ (8001940 <HAL_GPIO_Init+0x348>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d007      	beq.n	8001826 <HAL_GPIO_Init+0x22e>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a4a      	ldr	r2, [pc, #296]	@ (8001944 <HAL_GPIO_Init+0x34c>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d101      	bne.n	8001822 <HAL_GPIO_Init+0x22a>
 800181e:	2306      	movs	r3, #6
 8001820:	e00c      	b.n	800183c <HAL_GPIO_Init+0x244>
 8001822:	2307      	movs	r3, #7
 8001824:	e00a      	b.n	800183c <HAL_GPIO_Init+0x244>
 8001826:	2305      	movs	r3, #5
 8001828:	e008      	b.n	800183c <HAL_GPIO_Init+0x244>
 800182a:	2304      	movs	r3, #4
 800182c:	e006      	b.n	800183c <HAL_GPIO_Init+0x244>
 800182e:	2303      	movs	r3, #3
 8001830:	e004      	b.n	800183c <HAL_GPIO_Init+0x244>
 8001832:	2302      	movs	r3, #2
 8001834:	e002      	b.n	800183c <HAL_GPIO_Init+0x244>
 8001836:	2301      	movs	r3, #1
 8001838:	e000      	b.n	800183c <HAL_GPIO_Init+0x244>
 800183a:	2300      	movs	r3, #0
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	f002 0203 	and.w	r2, r2, #3
 8001842:	0092      	lsls	r2, r2, #2
 8001844:	4093      	lsls	r3, r2
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	4313      	orrs	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800184c:	4937      	ldr	r1, [pc, #220]	@ (800192c <HAL_GPIO_Init+0x334>)
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	089b      	lsrs	r3, r3, #2
 8001852:	3302      	adds	r3, #2
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800185a:	4b3b      	ldr	r3, [pc, #236]	@ (8001948 <HAL_GPIO_Init+0x350>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	43db      	mvns	r3, r3
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	4013      	ands	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	4313      	orrs	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800187e:	4a32      	ldr	r2, [pc, #200]	@ (8001948 <HAL_GPIO_Init+0x350>)
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001884:	4b30      	ldr	r3, [pc, #192]	@ (8001948 <HAL_GPIO_Init+0x350>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	43db      	mvns	r3, r3
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4013      	ands	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d003      	beq.n	80018a8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018a8:	4a27      	ldr	r2, [pc, #156]	@ (8001948 <HAL_GPIO_Init+0x350>)
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80018ae:	4b26      	ldr	r3, [pc, #152]	@ (8001948 <HAL_GPIO_Init+0x350>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	43db      	mvns	r3, r3
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	4013      	ands	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018d2:	4a1d      	ldr	r2, [pc, #116]	@ (8001948 <HAL_GPIO_Init+0x350>)
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80018d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001948 <HAL_GPIO_Init+0x350>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	43db      	mvns	r3, r3
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4013      	ands	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d003      	beq.n	80018fc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018fc:	4a12      	ldr	r2, [pc, #72]	@ (8001948 <HAL_GPIO_Init+0x350>)
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	3301      	adds	r3, #1
 8001906:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	fa22 f303 	lsr.w	r3, r2, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	f47f ae78 	bne.w	8001608 <HAL_GPIO_Init+0x10>
  }
}
 8001918:	bf00      	nop
 800191a:	bf00      	nop
 800191c:	371c      	adds	r7, #28
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	40021000 	.word	0x40021000
 800192c:	40010000 	.word	0x40010000
 8001930:	48000400 	.word	0x48000400
 8001934:	48000800 	.word	0x48000800
 8001938:	48000c00 	.word	0x48000c00
 800193c:	48001000 	.word	0x48001000
 8001940:	48001400 	.word	0x48001400
 8001944:	48001800 	.word	0x48001800
 8001948:	40010400 	.word	0x40010400

0800194c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	460b      	mov	r3, r1
 8001956:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	691a      	ldr	r2, [r3, #16]
 800195c:	887b      	ldrh	r3, [r7, #2]
 800195e:	4013      	ands	r3, r2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d002      	beq.n	800196a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001964:	2301      	movs	r3, #1
 8001966:	73fb      	strb	r3, [r7, #15]
 8001968:	e001      	b.n	800196e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800196a:	2300      	movs	r3, #0
 800196c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800196e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	460b      	mov	r3, r1
 8001986:	807b      	strh	r3, [r7, #2]
 8001988:	4613      	mov	r3, r2
 800198a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800198c:	787b      	ldrb	r3, [r7, #1]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001992:	887a      	ldrh	r2, [r7, #2]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001998:	e002      	b.n	80019a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800199a:	887a      	ldrh	r2, [r7, #2]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019b0:	4b04      	ldr	r3, [pc, #16]	@ (80019c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	40007000 	.word	0x40007000

080019c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80019d6:	d130      	bne.n	8001a3a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019d8:	4b23      	ldr	r3, [pc, #140]	@ (8001a68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80019e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80019e4:	d038      	beq.n	8001a58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019e6:	4b20      	ldr	r3, [pc, #128]	@ (8001a68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80019ee:	4a1e      	ldr	r2, [pc, #120]	@ (8001a68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019f6:	4b1d      	ldr	r3, [pc, #116]	@ (8001a6c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2232      	movs	r2, #50	@ 0x32
 80019fc:	fb02 f303 	mul.w	r3, r2, r3
 8001a00:	4a1b      	ldr	r2, [pc, #108]	@ (8001a70 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a02:	fba2 2303 	umull	r2, r3, r2, r3
 8001a06:	0c9b      	lsrs	r3, r3, #18
 8001a08:	3301      	adds	r3, #1
 8001a0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a0c:	e002      	b.n	8001a14 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	3b01      	subs	r3, #1
 8001a12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a14:	4b14      	ldr	r3, [pc, #80]	@ (8001a68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a20:	d102      	bne.n	8001a28 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1f2      	bne.n	8001a0e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a28:	4b0f      	ldr	r3, [pc, #60]	@ (8001a68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a34:	d110      	bne.n	8001a58 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e00f      	b.n	8001a5a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a46:	d007      	beq.n	8001a58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a48:	4b07      	ldr	r3, [pc, #28]	@ (8001a68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a50:	4a05      	ldr	r2, [pc, #20]	@ (8001a68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a56:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	40007000 	.word	0x40007000
 8001a6c:	20000000 	.word	0x20000000
 8001a70:	431bde83 	.word	0x431bde83

08001a74 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b088      	sub	sp, #32
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e3ca      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a86:	4b97      	ldr	r3, [pc, #604]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 030c 	and.w	r3, r3, #12
 8001a8e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a90:	4b94      	ldr	r3, [pc, #592]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0310 	and.w	r3, r3, #16
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 80e4 	beq.w	8001c70 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d007      	beq.n	8001abe <HAL_RCC_OscConfig+0x4a>
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	2b0c      	cmp	r3, #12
 8001ab2:	f040 808b 	bne.w	8001bcc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	f040 8087 	bne.w	8001bcc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001abe:	4b89      	ldr	r3, [pc, #548]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d005      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x62>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e3a2      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a1a      	ldr	r2, [r3, #32]
 8001ada:	4b82      	ldr	r3, [pc, #520]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d004      	beq.n	8001af0 <HAL_RCC_OscConfig+0x7c>
 8001ae6:	4b7f      	ldr	r3, [pc, #508]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001aee:	e005      	b.n	8001afc <HAL_RCC_OscConfig+0x88>
 8001af0:	4b7c      	ldr	r3, [pc, #496]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001af2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001af6:	091b      	lsrs	r3, r3, #4
 8001af8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d223      	bcs.n	8001b48 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f000 fd55 	bl	80025b4 <RCC_SetFlashLatencyFromMSIRange>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e383      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b14:	4b73      	ldr	r3, [pc, #460]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a72      	ldr	r2, [pc, #456]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b1a:	f043 0308 	orr.w	r3, r3, #8
 8001b1e:	6013      	str	r3, [r2, #0]
 8001b20:	4b70      	ldr	r3, [pc, #448]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	496d      	ldr	r1, [pc, #436]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b32:	4b6c      	ldr	r3, [pc, #432]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	021b      	lsls	r3, r3, #8
 8001b40:	4968      	ldr	r1, [pc, #416]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	604b      	str	r3, [r1, #4]
 8001b46:	e025      	b.n	8001b94 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b48:	4b66      	ldr	r3, [pc, #408]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a65      	ldr	r2, [pc, #404]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b4e:	f043 0308 	orr.w	r3, r3, #8
 8001b52:	6013      	str	r3, [r2, #0]
 8001b54:	4b63      	ldr	r3, [pc, #396]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	4960      	ldr	r1, [pc, #384]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b66:	4b5f      	ldr	r3, [pc, #380]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	021b      	lsls	r3, r3, #8
 8001b74:	495b      	ldr	r1, [pc, #364]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d109      	bne.n	8001b94 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f000 fd15 	bl	80025b4 <RCC_SetFlashLatencyFromMSIRange>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e343      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b94:	f000 fc4a 	bl	800242c <HAL_RCC_GetSysClockFreq>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	4b52      	ldr	r3, [pc, #328]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	091b      	lsrs	r3, r3, #4
 8001ba0:	f003 030f 	and.w	r3, r3, #15
 8001ba4:	4950      	ldr	r1, [pc, #320]	@ (8001ce8 <HAL_RCC_OscConfig+0x274>)
 8001ba6:	5ccb      	ldrb	r3, [r1, r3]
 8001ba8:	f003 031f 	and.w	r3, r3, #31
 8001bac:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb0:	4a4e      	ldr	r2, [pc, #312]	@ (8001cec <HAL_RCC_OscConfig+0x278>)
 8001bb2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bb4:	4b4e      	ldr	r3, [pc, #312]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fbb7 	bl	800132c <HAL_InitTick>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d052      	beq.n	8001c6e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001bc8:	7bfb      	ldrb	r3, [r7, #15]
 8001bca:	e327      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d032      	beq.n	8001c3a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bd4:	4b43      	ldr	r3, [pc, #268]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a42      	ldr	r2, [pc, #264]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001be0:	f7ff fbf4 	bl	80013cc <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001be8:	f7ff fbf0 	bl	80013cc <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e310      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bfa:	4b3a      	ldr	r3, [pc, #232]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0f0      	beq.n	8001be8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c06:	4b37      	ldr	r3, [pc, #220]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a36      	ldr	r2, [pc, #216]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001c0c:	f043 0308 	orr.w	r3, r3, #8
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	4b34      	ldr	r3, [pc, #208]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	4931      	ldr	r1, [pc, #196]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c24:	4b2f      	ldr	r3, [pc, #188]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	69db      	ldr	r3, [r3, #28]
 8001c30:	021b      	lsls	r3, r3, #8
 8001c32:	492c      	ldr	r1, [pc, #176]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	604b      	str	r3, [r1, #4]
 8001c38:	e01a      	b.n	8001c70 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c3a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a29      	ldr	r2, [pc, #164]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001c40:	f023 0301 	bic.w	r3, r3, #1
 8001c44:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c46:	f7ff fbc1 	bl	80013cc <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c4e:	f7ff fbbd 	bl	80013cc <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e2dd      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c60:	4b20      	ldr	r3, [pc, #128]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1f0      	bne.n	8001c4e <HAL_RCC_OscConfig+0x1da>
 8001c6c:	e000      	b.n	8001c70 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c6e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d074      	beq.n	8001d66 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	2b08      	cmp	r3, #8
 8001c80:	d005      	beq.n	8001c8e <HAL_RCC_OscConfig+0x21a>
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	2b0c      	cmp	r3, #12
 8001c86:	d10e      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	2b03      	cmp	r3, #3
 8001c8c:	d10b      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d064      	beq.n	8001d64 <HAL_RCC_OscConfig+0x2f0>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d160      	bne.n	8001d64 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e2ba      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cae:	d106      	bne.n	8001cbe <HAL_RCC_OscConfig+0x24a>
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a0b      	ldr	r2, [pc, #44]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001cb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cba:	6013      	str	r3, [r2, #0]
 8001cbc:	e026      	b.n	8001d0c <HAL_RCC_OscConfig+0x298>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001cc6:	d115      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x280>
 8001cc8:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a05      	ldr	r2, [pc, #20]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001cce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cd2:	6013      	str	r3, [r2, #0]
 8001cd4:	4b03      	ldr	r3, [pc, #12]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a02      	ldr	r2, [pc, #8]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001cda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	e014      	b.n	8001d0c <HAL_RCC_OscConfig+0x298>
 8001ce2:	bf00      	nop
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	08005c24 	.word	0x08005c24
 8001cec:	20000000 	.word	0x20000000
 8001cf0:	20000004 	.word	0x20000004
 8001cf4:	4ba0      	ldr	r3, [pc, #640]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a9f      	ldr	r2, [pc, #636]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001cfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	4b9d      	ldr	r3, [pc, #628]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a9c      	ldr	r2, [pc, #624]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001d06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d013      	beq.n	8001d3c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d14:	f7ff fb5a 	bl	80013cc <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d1c:	f7ff fb56 	bl	80013cc <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b64      	cmp	r3, #100	@ 0x64
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e276      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d2e:	4b92      	ldr	r3, [pc, #584]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d0f0      	beq.n	8001d1c <HAL_RCC_OscConfig+0x2a8>
 8001d3a:	e014      	b.n	8001d66 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3c:	f7ff fb46 	bl	80013cc <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d44:	f7ff fb42 	bl	80013cc <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b64      	cmp	r3, #100	@ 0x64
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e262      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d56:	4b88      	ldr	r3, [pc, #544]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1f0      	bne.n	8001d44 <HAL_RCC_OscConfig+0x2d0>
 8001d62:	e000      	b.n	8001d66 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d060      	beq.n	8001e34 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	2b04      	cmp	r3, #4
 8001d76:	d005      	beq.n	8001d84 <HAL_RCC_OscConfig+0x310>
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	2b0c      	cmp	r3, #12
 8001d7c:	d119      	bne.n	8001db2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d116      	bne.n	8001db2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d84:	4b7c      	ldr	r3, [pc, #496]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d005      	beq.n	8001d9c <HAL_RCC_OscConfig+0x328>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e23f      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9c:	4b76      	ldr	r3, [pc, #472]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	061b      	lsls	r3, r3, #24
 8001daa:	4973      	ldr	r1, [pc, #460]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001db0:	e040      	b.n	8001e34 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d023      	beq.n	8001e02 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dba:	4b6f      	ldr	r3, [pc, #444]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a6e      	ldr	r2, [pc, #440]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001dc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc6:	f7ff fb01 	bl	80013cc <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dce:	f7ff fafd 	bl	80013cc <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e21d      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001de0:	4b65      	ldr	r3, [pc, #404]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d0f0      	beq.n	8001dce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dec:	4b62      	ldr	r3, [pc, #392]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	061b      	lsls	r3, r3, #24
 8001dfa:	495f      	ldr	r1, [pc, #380]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	604b      	str	r3, [r1, #4]
 8001e00:	e018      	b.n	8001e34 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e02:	4b5d      	ldr	r3, [pc, #372]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a5c      	ldr	r2, [pc, #368]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001e08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0e:	f7ff fadd 	bl	80013cc <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e16:	f7ff fad9 	bl	80013cc <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e1f9      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e28:	4b53      	ldr	r3, [pc, #332]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1f0      	bne.n	8001e16 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0308 	and.w	r3, r3, #8
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d03c      	beq.n	8001eba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d01c      	beq.n	8001e82 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e48:	4b4b      	ldr	r3, [pc, #300]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e4e:	4a4a      	ldr	r2, [pc, #296]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e58:	f7ff fab8 	bl	80013cc <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e60:	f7ff fab4 	bl	80013cc <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e1d4      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e72:	4b41      	ldr	r3, [pc, #260]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0ef      	beq.n	8001e60 <HAL_RCC_OscConfig+0x3ec>
 8001e80:	e01b      	b.n	8001eba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e82:	4b3d      	ldr	r3, [pc, #244]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001e84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e88:	4a3b      	ldr	r2, [pc, #236]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001e8a:	f023 0301 	bic.w	r3, r3, #1
 8001e8e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e92:	f7ff fa9b 	bl	80013cc <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e9a:	f7ff fa97 	bl	80013cc <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e1b7      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001eac:	4b32      	ldr	r3, [pc, #200]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1ef      	bne.n	8001e9a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 80a6 	beq.w	8002014 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ecc:	4b2a      	ldr	r3, [pc, #168]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d10d      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed8:	4b27      	ldr	r3, [pc, #156]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001eda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001edc:	4a26      	ldr	r2, [pc, #152]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001ede:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ee2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ee4:	4b24      	ldr	r3, [pc, #144]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ef4:	4b21      	ldr	r3, [pc, #132]	@ (8001f7c <HAL_RCC_OscConfig+0x508>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d118      	bne.n	8001f32 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f00:	4b1e      	ldr	r3, [pc, #120]	@ (8001f7c <HAL_RCC_OscConfig+0x508>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a1d      	ldr	r2, [pc, #116]	@ (8001f7c <HAL_RCC_OscConfig+0x508>)
 8001f06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f0c:	f7ff fa5e 	bl	80013cc <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f14:	f7ff fa5a 	bl	80013cc <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e17a      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f26:	4b15      	ldr	r3, [pc, #84]	@ (8001f7c <HAL_RCC_OscConfig+0x508>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0f0      	beq.n	8001f14 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d108      	bne.n	8001f4c <HAL_RCC_OscConfig+0x4d8>
 8001f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f40:	4a0d      	ldr	r2, [pc, #52]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f4a:	e029      	b.n	8001fa0 <HAL_RCC_OscConfig+0x52c>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	2b05      	cmp	r3, #5
 8001f52:	d115      	bne.n	8001f80 <HAL_RCC_OscConfig+0x50c>
 8001f54:	4b08      	ldr	r3, [pc, #32]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f5a:	4a07      	ldr	r2, [pc, #28]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001f5c:	f043 0304 	orr.w	r3, r3, #4
 8001f60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f64:	4b04      	ldr	r3, [pc, #16]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f6a:	4a03      	ldr	r2, [pc, #12]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f74:	e014      	b.n	8001fa0 <HAL_RCC_OscConfig+0x52c>
 8001f76:	bf00      	nop
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40007000 	.word	0x40007000
 8001f80:	4b9c      	ldr	r3, [pc, #624]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 8001f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f86:	4a9b      	ldr	r2, [pc, #620]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 8001f88:	f023 0301 	bic.w	r3, r3, #1
 8001f8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f90:	4b98      	ldr	r3, [pc, #608]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 8001f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f96:	4a97      	ldr	r2, [pc, #604]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 8001f98:	f023 0304 	bic.w	r3, r3, #4
 8001f9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d016      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa8:	f7ff fa10 	bl	80013cc <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fae:	e00a      	b.n	8001fc6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb0:	f7ff fa0c 	bl	80013cc <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e12a      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fc6:	4b8b      	ldr	r3, [pc, #556]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 8001fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0ed      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x53c>
 8001fd4:	e015      	b.n	8002002 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd6:	f7ff f9f9 	bl	80013cc <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fdc:	e00a      	b.n	8001ff4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fde:	f7ff f9f5 	bl	80013cc <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e113      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ff4:	4b7f      	ldr	r3, [pc, #508]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 8001ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1ed      	bne.n	8001fde <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002002:	7ffb      	ldrb	r3, [r7, #31]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d105      	bne.n	8002014 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002008:	4b7a      	ldr	r3, [pc, #488]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 800200a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800200c:	4a79      	ldr	r2, [pc, #484]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 800200e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002012:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 80fe 	beq.w	800221a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002022:	2b02      	cmp	r3, #2
 8002024:	f040 80d0 	bne.w	80021c8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002028:	4b72      	ldr	r3, [pc, #456]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	f003 0203 	and.w	r2, r3, #3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002038:	429a      	cmp	r2, r3
 800203a:	d130      	bne.n	800209e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002046:	3b01      	subs	r3, #1
 8002048:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800204a:	429a      	cmp	r2, r3
 800204c:	d127      	bne.n	800209e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002058:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800205a:	429a      	cmp	r2, r3
 800205c:	d11f      	bne.n	800209e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002068:	2a07      	cmp	r2, #7
 800206a:	bf14      	ite	ne
 800206c:	2201      	movne	r2, #1
 800206e:	2200      	moveq	r2, #0
 8002070:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002072:	4293      	cmp	r3, r2
 8002074:	d113      	bne.n	800209e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002080:	085b      	lsrs	r3, r3, #1
 8002082:	3b01      	subs	r3, #1
 8002084:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002086:	429a      	cmp	r2, r3
 8002088:	d109      	bne.n	800209e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002094:	085b      	lsrs	r3, r3, #1
 8002096:	3b01      	subs	r3, #1
 8002098:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800209a:	429a      	cmp	r2, r3
 800209c:	d06e      	beq.n	800217c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	2b0c      	cmp	r3, #12
 80020a2:	d069      	beq.n	8002178 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020a4:	4b53      	ldr	r3, [pc, #332]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d105      	bne.n	80020bc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80020b0:	4b50      	ldr	r3, [pc, #320]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e0ad      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80020c0:	4b4c      	ldr	r3, [pc, #304]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a4b      	ldr	r2, [pc, #300]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 80020c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020ca:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020cc:	f7ff f97e 	bl	80013cc <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d4:	f7ff f97a 	bl	80013cc <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e09a      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020e6:	4b43      	ldr	r3, [pc, #268]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f0      	bne.n	80020d4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020f2:	4b40      	ldr	r3, [pc, #256]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	4b40      	ldr	r3, [pc, #256]	@ (80021f8 <HAL_RCC_OscConfig+0x784>)
 80020f8:	4013      	ands	r3, r2
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002102:	3a01      	subs	r2, #1
 8002104:	0112      	lsls	r2, r2, #4
 8002106:	4311      	orrs	r1, r2
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800210c:	0212      	lsls	r2, r2, #8
 800210e:	4311      	orrs	r1, r2
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002114:	0852      	lsrs	r2, r2, #1
 8002116:	3a01      	subs	r2, #1
 8002118:	0552      	lsls	r2, r2, #21
 800211a:	4311      	orrs	r1, r2
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002120:	0852      	lsrs	r2, r2, #1
 8002122:	3a01      	subs	r2, #1
 8002124:	0652      	lsls	r2, r2, #25
 8002126:	4311      	orrs	r1, r2
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800212c:	0912      	lsrs	r2, r2, #4
 800212e:	0452      	lsls	r2, r2, #17
 8002130:	430a      	orrs	r2, r1
 8002132:	4930      	ldr	r1, [pc, #192]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 8002134:	4313      	orrs	r3, r2
 8002136:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002138:	4b2e      	ldr	r3, [pc, #184]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a2d      	ldr	r2, [pc, #180]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 800213e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002142:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002144:	4b2b      	ldr	r3, [pc, #172]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	4a2a      	ldr	r2, [pc, #168]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 800214a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800214e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002150:	f7ff f93c 	bl	80013cc <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002158:	f7ff f938 	bl	80013cc <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e058      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800216a:	4b22      	ldr	r3, [pc, #136]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0f0      	beq.n	8002158 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002176:	e050      	b.n	800221a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e04f      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800217c:	4b1d      	ldr	r3, [pc, #116]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d148      	bne.n	800221a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002188:	4b1a      	ldr	r3, [pc, #104]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a19      	ldr	r2, [pc, #100]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 800218e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002192:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002194:	4b17      	ldr	r3, [pc, #92]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	4a16      	ldr	r2, [pc, #88]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 800219a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800219e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021a0:	f7ff f914 	bl	80013cc <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a8:	f7ff f910 	bl	80013cc <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e030      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ba:	4b0e      	ldr	r3, [pc, #56]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0f0      	beq.n	80021a8 <HAL_RCC_OscConfig+0x734>
 80021c6:	e028      	b.n	800221a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	2b0c      	cmp	r3, #12
 80021cc:	d023      	beq.n	8002216 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ce:	4b09      	ldr	r3, [pc, #36]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a08      	ldr	r2, [pc, #32]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 80021d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021da:	f7ff f8f7 	bl	80013cc <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021e0:	e00c      	b.n	80021fc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e2:	f7ff f8f3 	bl	80013cc <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d905      	bls.n	80021fc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e013      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
 80021f4:	40021000 	.word	0x40021000
 80021f8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021fc:	4b09      	ldr	r3, [pc, #36]	@ (8002224 <HAL_RCC_OscConfig+0x7b0>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1ec      	bne.n	80021e2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002208:	4b06      	ldr	r3, [pc, #24]	@ (8002224 <HAL_RCC_OscConfig+0x7b0>)
 800220a:	68da      	ldr	r2, [r3, #12]
 800220c:	4905      	ldr	r1, [pc, #20]	@ (8002224 <HAL_RCC_OscConfig+0x7b0>)
 800220e:	4b06      	ldr	r3, [pc, #24]	@ (8002228 <HAL_RCC_OscConfig+0x7b4>)
 8002210:	4013      	ands	r3, r2
 8002212:	60cb      	str	r3, [r1, #12]
 8002214:	e001      	b.n	800221a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e000      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3720      	adds	r7, #32
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40021000 	.word	0x40021000
 8002228:	feeefffc 	.word	0xfeeefffc

0800222c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e0e7      	b.n	8002410 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002240:	4b75      	ldr	r3, [pc, #468]	@ (8002418 <HAL_RCC_ClockConfig+0x1ec>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	429a      	cmp	r2, r3
 800224c:	d910      	bls.n	8002270 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800224e:	4b72      	ldr	r3, [pc, #456]	@ (8002418 <HAL_RCC_ClockConfig+0x1ec>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f023 0207 	bic.w	r2, r3, #7
 8002256:	4970      	ldr	r1, [pc, #448]	@ (8002418 <HAL_RCC_ClockConfig+0x1ec>)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	4313      	orrs	r3, r2
 800225c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800225e:	4b6e      	ldr	r3, [pc, #440]	@ (8002418 <HAL_RCC_ClockConfig+0x1ec>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	429a      	cmp	r2, r3
 800226a:	d001      	beq.n	8002270 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e0cf      	b.n	8002410 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d010      	beq.n	800229e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	4b66      	ldr	r3, [pc, #408]	@ (800241c <HAL_RCC_ClockConfig+0x1f0>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002288:	429a      	cmp	r2, r3
 800228a:	d908      	bls.n	800229e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800228c:	4b63      	ldr	r3, [pc, #396]	@ (800241c <HAL_RCC_ClockConfig+0x1f0>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	4960      	ldr	r1, [pc, #384]	@ (800241c <HAL_RCC_ClockConfig+0x1f0>)
 800229a:	4313      	orrs	r3, r2
 800229c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d04c      	beq.n	8002344 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b03      	cmp	r3, #3
 80022b0:	d107      	bne.n	80022c2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022b2:	4b5a      	ldr	r3, [pc, #360]	@ (800241c <HAL_RCC_ClockConfig+0x1f0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d121      	bne.n	8002302 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e0a6      	b.n	8002410 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d107      	bne.n	80022da <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022ca:	4b54      	ldr	r3, [pc, #336]	@ (800241c <HAL_RCC_ClockConfig+0x1f0>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d115      	bne.n	8002302 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e09a      	b.n	8002410 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d107      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022e2:	4b4e      	ldr	r3, [pc, #312]	@ (800241c <HAL_RCC_ClockConfig+0x1f0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d109      	bne.n	8002302 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e08e      	b.n	8002410 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022f2:	4b4a      	ldr	r3, [pc, #296]	@ (800241c <HAL_RCC_ClockConfig+0x1f0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e086      	b.n	8002410 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002302:	4b46      	ldr	r3, [pc, #280]	@ (800241c <HAL_RCC_ClockConfig+0x1f0>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f023 0203 	bic.w	r2, r3, #3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	4943      	ldr	r1, [pc, #268]	@ (800241c <HAL_RCC_ClockConfig+0x1f0>)
 8002310:	4313      	orrs	r3, r2
 8002312:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002314:	f7ff f85a 	bl	80013cc <HAL_GetTick>
 8002318:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231a:	e00a      	b.n	8002332 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800231c:	f7ff f856 	bl	80013cc <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	f241 3288 	movw	r2, #5000	@ 0x1388
 800232a:	4293      	cmp	r3, r2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e06e      	b.n	8002410 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002332:	4b3a      	ldr	r3, [pc, #232]	@ (800241c <HAL_RCC_ClockConfig+0x1f0>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 020c 	and.w	r2, r3, #12
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	429a      	cmp	r2, r3
 8002342:	d1eb      	bne.n	800231c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d010      	beq.n	8002372 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	4b31      	ldr	r3, [pc, #196]	@ (800241c <HAL_RCC_ClockConfig+0x1f0>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800235c:	429a      	cmp	r2, r3
 800235e:	d208      	bcs.n	8002372 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002360:	4b2e      	ldr	r3, [pc, #184]	@ (800241c <HAL_RCC_ClockConfig+0x1f0>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	492b      	ldr	r1, [pc, #172]	@ (800241c <HAL_RCC_ClockConfig+0x1f0>)
 800236e:	4313      	orrs	r3, r2
 8002370:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002372:	4b29      	ldr	r3, [pc, #164]	@ (8002418 <HAL_RCC_ClockConfig+0x1ec>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	429a      	cmp	r2, r3
 800237e:	d210      	bcs.n	80023a2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002380:	4b25      	ldr	r3, [pc, #148]	@ (8002418 <HAL_RCC_ClockConfig+0x1ec>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f023 0207 	bic.w	r2, r3, #7
 8002388:	4923      	ldr	r1, [pc, #140]	@ (8002418 <HAL_RCC_ClockConfig+0x1ec>)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	4313      	orrs	r3, r2
 800238e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002390:	4b21      	ldr	r3, [pc, #132]	@ (8002418 <HAL_RCC_ClockConfig+0x1ec>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	429a      	cmp	r2, r3
 800239c:	d001      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e036      	b.n	8002410 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0304 	and.w	r3, r3, #4
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d008      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023ae:	4b1b      	ldr	r3, [pc, #108]	@ (800241c <HAL_RCC_ClockConfig+0x1f0>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	4918      	ldr	r1, [pc, #96]	@ (800241c <HAL_RCC_ClockConfig+0x1f0>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0308 	and.w	r3, r3, #8
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d009      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023cc:	4b13      	ldr	r3, [pc, #76]	@ (800241c <HAL_RCC_ClockConfig+0x1f0>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	4910      	ldr	r1, [pc, #64]	@ (800241c <HAL_RCC_ClockConfig+0x1f0>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023e0:	f000 f824 	bl	800242c <HAL_RCC_GetSysClockFreq>
 80023e4:	4602      	mov	r2, r0
 80023e6:	4b0d      	ldr	r3, [pc, #52]	@ (800241c <HAL_RCC_ClockConfig+0x1f0>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	091b      	lsrs	r3, r3, #4
 80023ec:	f003 030f 	and.w	r3, r3, #15
 80023f0:	490b      	ldr	r1, [pc, #44]	@ (8002420 <HAL_RCC_ClockConfig+0x1f4>)
 80023f2:	5ccb      	ldrb	r3, [r1, r3]
 80023f4:	f003 031f 	and.w	r3, r3, #31
 80023f8:	fa22 f303 	lsr.w	r3, r2, r3
 80023fc:	4a09      	ldr	r2, [pc, #36]	@ (8002424 <HAL_RCC_ClockConfig+0x1f8>)
 80023fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002400:	4b09      	ldr	r3, [pc, #36]	@ (8002428 <HAL_RCC_ClockConfig+0x1fc>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f7fe ff91 	bl	800132c <HAL_InitTick>
 800240a:	4603      	mov	r3, r0
 800240c:	72fb      	strb	r3, [r7, #11]

  return status;
 800240e:	7afb      	ldrb	r3, [r7, #11]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40022000 	.word	0x40022000
 800241c:	40021000 	.word	0x40021000
 8002420:	08005c24 	.word	0x08005c24
 8002424:	20000000 	.word	0x20000000
 8002428:	20000004 	.word	0x20000004

0800242c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800242c:	b480      	push	{r7}
 800242e:	b089      	sub	sp, #36	@ 0x24
 8002430:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002432:	2300      	movs	r3, #0
 8002434:	61fb      	str	r3, [r7, #28]
 8002436:	2300      	movs	r3, #0
 8002438:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800243a:	4b3e      	ldr	r3, [pc, #248]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x108>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 030c 	and.w	r3, r3, #12
 8002442:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002444:	4b3b      	ldr	r3, [pc, #236]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x108>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d005      	beq.n	8002460 <HAL_RCC_GetSysClockFreq+0x34>
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	2b0c      	cmp	r3, #12
 8002458:	d121      	bne.n	800249e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d11e      	bne.n	800249e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002460:	4b34      	ldr	r3, [pc, #208]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x108>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0308 	and.w	r3, r3, #8
 8002468:	2b00      	cmp	r3, #0
 800246a:	d107      	bne.n	800247c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800246c:	4b31      	ldr	r3, [pc, #196]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x108>)
 800246e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002472:	0a1b      	lsrs	r3, r3, #8
 8002474:	f003 030f 	and.w	r3, r3, #15
 8002478:	61fb      	str	r3, [r7, #28]
 800247a:	e005      	b.n	8002488 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800247c:	4b2d      	ldr	r3, [pc, #180]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x108>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	091b      	lsrs	r3, r3, #4
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002488:	4a2b      	ldr	r2, [pc, #172]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x10c>)
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002490:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d10d      	bne.n	80024b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800249c:	e00a      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	2b04      	cmp	r3, #4
 80024a2:	d102      	bne.n	80024aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024a4:	4b25      	ldr	r3, [pc, #148]	@ (800253c <HAL_RCC_GetSysClockFreq+0x110>)
 80024a6:	61bb      	str	r3, [r7, #24]
 80024a8:	e004      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	2b08      	cmp	r3, #8
 80024ae:	d101      	bne.n	80024b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024b0:	4b23      	ldr	r3, [pc, #140]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x114>)
 80024b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	2b0c      	cmp	r3, #12
 80024b8:	d134      	bne.n	8002524 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x108>)
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d003      	beq.n	80024d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	2b03      	cmp	r3, #3
 80024ce:	d003      	beq.n	80024d8 <HAL_RCC_GetSysClockFreq+0xac>
 80024d0:	e005      	b.n	80024de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024d2:	4b1a      	ldr	r3, [pc, #104]	@ (800253c <HAL_RCC_GetSysClockFreq+0x110>)
 80024d4:	617b      	str	r3, [r7, #20]
      break;
 80024d6:	e005      	b.n	80024e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024d8:	4b19      	ldr	r3, [pc, #100]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x114>)
 80024da:	617b      	str	r3, [r7, #20]
      break;
 80024dc:	e002      	b.n	80024e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	617b      	str	r3, [r7, #20]
      break;
 80024e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024e4:	4b13      	ldr	r3, [pc, #76]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x108>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	3301      	adds	r3, #1
 80024f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024f2:	4b10      	ldr	r3, [pc, #64]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x108>)
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	0a1b      	lsrs	r3, r3, #8
 80024f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	fb03 f202 	mul.w	r2, r3, r2
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	fbb2 f3f3 	udiv	r3, r2, r3
 8002508:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800250a:	4b0a      	ldr	r3, [pc, #40]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x108>)
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	0e5b      	lsrs	r3, r3, #25
 8002510:	f003 0303 	and.w	r3, r3, #3
 8002514:	3301      	adds	r3, #1
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002522:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002524:	69bb      	ldr	r3, [r7, #24]
}
 8002526:	4618      	mov	r0, r3
 8002528:	3724      	adds	r7, #36	@ 0x24
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	40021000 	.word	0x40021000
 8002538:	08005c3c 	.word	0x08005c3c
 800253c:	00f42400 	.word	0x00f42400
 8002540:	007a1200 	.word	0x007a1200

08002544 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002548:	4b03      	ldr	r3, [pc, #12]	@ (8002558 <HAL_RCC_GetHCLKFreq+0x14>)
 800254a:	681b      	ldr	r3, [r3, #0]
}
 800254c:	4618      	mov	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	20000000 	.word	0x20000000

0800255c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002560:	f7ff fff0 	bl	8002544 <HAL_RCC_GetHCLKFreq>
 8002564:	4602      	mov	r2, r0
 8002566:	4b06      	ldr	r3, [pc, #24]	@ (8002580 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	0a1b      	lsrs	r3, r3, #8
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	4904      	ldr	r1, [pc, #16]	@ (8002584 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002572:	5ccb      	ldrb	r3, [r1, r3]
 8002574:	f003 031f 	and.w	r3, r3, #31
 8002578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800257c:	4618      	mov	r0, r3
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40021000 	.word	0x40021000
 8002584:	08005c34 	.word	0x08005c34

08002588 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800258c:	f7ff ffda 	bl	8002544 <HAL_RCC_GetHCLKFreq>
 8002590:	4602      	mov	r2, r0
 8002592:	4b06      	ldr	r3, [pc, #24]	@ (80025ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	0adb      	lsrs	r3, r3, #11
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	4904      	ldr	r1, [pc, #16]	@ (80025b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800259e:	5ccb      	ldrb	r3, [r1, r3]
 80025a0:	f003 031f 	and.w	r3, r3, #31
 80025a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40021000 	.word	0x40021000
 80025b0:	08005c34 	.word	0x08005c34

080025b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025bc:	2300      	movs	r3, #0
 80025be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025c0:	4b2a      	ldr	r3, [pc, #168]	@ (800266c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025cc:	f7ff f9ee 	bl	80019ac <HAL_PWREx_GetVoltageRange>
 80025d0:	6178      	str	r0, [r7, #20]
 80025d2:	e014      	b.n	80025fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025d4:	4b25      	ldr	r3, [pc, #148]	@ (800266c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d8:	4a24      	ldr	r2, [pc, #144]	@ (800266c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025de:	6593      	str	r3, [r2, #88]	@ 0x58
 80025e0:	4b22      	ldr	r3, [pc, #136]	@ (800266c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80025ec:	f7ff f9de 	bl	80019ac <HAL_PWREx_GetVoltageRange>
 80025f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80025f2:	4b1e      	ldr	r3, [pc, #120]	@ (800266c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f6:	4a1d      	ldr	r2, [pc, #116]	@ (800266c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025fc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002604:	d10b      	bne.n	800261e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2b80      	cmp	r3, #128	@ 0x80
 800260a:	d919      	bls.n	8002640 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002610:	d902      	bls.n	8002618 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002612:	2302      	movs	r3, #2
 8002614:	613b      	str	r3, [r7, #16]
 8002616:	e013      	b.n	8002640 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002618:	2301      	movs	r3, #1
 800261a:	613b      	str	r3, [r7, #16]
 800261c:	e010      	b.n	8002640 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b80      	cmp	r3, #128	@ 0x80
 8002622:	d902      	bls.n	800262a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002624:	2303      	movs	r3, #3
 8002626:	613b      	str	r3, [r7, #16]
 8002628:	e00a      	b.n	8002640 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b80      	cmp	r3, #128	@ 0x80
 800262e:	d102      	bne.n	8002636 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002630:	2302      	movs	r3, #2
 8002632:	613b      	str	r3, [r7, #16]
 8002634:	e004      	b.n	8002640 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b70      	cmp	r3, #112	@ 0x70
 800263a:	d101      	bne.n	8002640 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800263c:	2301      	movs	r3, #1
 800263e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002640:	4b0b      	ldr	r3, [pc, #44]	@ (8002670 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f023 0207 	bic.w	r2, r3, #7
 8002648:	4909      	ldr	r1, [pc, #36]	@ (8002670 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	4313      	orrs	r3, r2
 800264e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002650:	4b07      	ldr	r3, [pc, #28]	@ (8002670 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	429a      	cmp	r2, r3
 800265c:	d001      	beq.n	8002662 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e000      	b.n	8002664 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40021000 	.word	0x40021000
 8002670:	40022000 	.word	0x40022000

08002674 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800267c:	2300      	movs	r3, #0
 800267e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002680:	2300      	movs	r3, #0
 8002682:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800268c:	2b00      	cmp	r3, #0
 800268e:	d041      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002694:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002698:	d02a      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800269a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800269e:	d824      	bhi.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026a0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80026a4:	d008      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80026a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80026aa:	d81e      	bhi.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00a      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80026b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026b4:	d010      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80026b6:	e018      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026b8:	4b86      	ldr	r3, [pc, #536]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	4a85      	ldr	r2, [pc, #532]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026c2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026c4:	e015      	b.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	3304      	adds	r3, #4
 80026ca:	2100      	movs	r1, #0
 80026cc:	4618      	mov	r0, r3
 80026ce:	f000 fabb 	bl	8002c48 <RCCEx_PLLSAI1_Config>
 80026d2:	4603      	mov	r3, r0
 80026d4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026d6:	e00c      	b.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3320      	adds	r3, #32
 80026dc:	2100      	movs	r1, #0
 80026de:	4618      	mov	r0, r3
 80026e0:	f000 fba6 	bl	8002e30 <RCCEx_PLLSAI2_Config>
 80026e4:	4603      	mov	r3, r0
 80026e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026e8:	e003      	b.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	74fb      	strb	r3, [r7, #19]
      break;
 80026ee:	e000      	b.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80026f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026f2:	7cfb      	ldrb	r3, [r7, #19]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10b      	bne.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026f8:	4b76      	ldr	r3, [pc, #472]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026fe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002706:	4973      	ldr	r1, [pc, #460]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002708:	4313      	orrs	r3, r2
 800270a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800270e:	e001      	b.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002710:	7cfb      	ldrb	r3, [r7, #19]
 8002712:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d041      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002724:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002728:	d02a      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800272a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800272e:	d824      	bhi.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002730:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002734:	d008      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002736:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800273a:	d81e      	bhi.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00a      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002740:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002744:	d010      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002746:	e018      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002748:	4b62      	ldr	r3, [pc, #392]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	4a61      	ldr	r2, [pc, #388]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800274e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002752:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002754:	e015      	b.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3304      	adds	r3, #4
 800275a:	2100      	movs	r1, #0
 800275c:	4618      	mov	r0, r3
 800275e:	f000 fa73 	bl	8002c48 <RCCEx_PLLSAI1_Config>
 8002762:	4603      	mov	r3, r0
 8002764:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002766:	e00c      	b.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3320      	adds	r3, #32
 800276c:	2100      	movs	r1, #0
 800276e:	4618      	mov	r0, r3
 8002770:	f000 fb5e 	bl	8002e30 <RCCEx_PLLSAI2_Config>
 8002774:	4603      	mov	r3, r0
 8002776:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002778:	e003      	b.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	74fb      	strb	r3, [r7, #19]
      break;
 800277e:	e000      	b.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002780:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002782:	7cfb      	ldrb	r3, [r7, #19]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10b      	bne.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002788:	4b52      	ldr	r3, [pc, #328]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800278a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800278e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002796:	494f      	ldr	r1, [pc, #316]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002798:	4313      	orrs	r3, r2
 800279a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800279e:	e001      	b.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027a0:	7cfb      	ldrb	r3, [r7, #19]
 80027a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 80a0 	beq.w	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027b2:	2300      	movs	r3, #0
 80027b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027b6:	4b47      	ldr	r3, [pc, #284]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80027c2:	2301      	movs	r3, #1
 80027c4:	e000      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80027c6:	2300      	movs	r3, #0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00d      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027cc:	4b41      	ldr	r3, [pc, #260]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027d0:	4a40      	ldr	r2, [pc, #256]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80027d8:	4b3e      	ldr	r3, [pc, #248]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027e4:	2301      	movs	r3, #1
 80027e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027e8:	4b3b      	ldr	r3, [pc, #236]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a3a      	ldr	r2, [pc, #232]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027f4:	f7fe fdea 	bl	80013cc <HAL_GetTick>
 80027f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027fa:	e009      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027fc:	f7fe fde6 	bl	80013cc <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d902      	bls.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	74fb      	strb	r3, [r7, #19]
        break;
 800280e:	e005      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002810:	4b31      	ldr	r3, [pc, #196]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002818:	2b00      	cmp	r3, #0
 800281a:	d0ef      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800281c:	7cfb      	ldrb	r3, [r7, #19]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d15c      	bne.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002822:	4b2c      	ldr	r3, [pc, #176]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002828:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800282c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d01f      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	429a      	cmp	r2, r3
 800283e:	d019      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002840:	4b24      	ldr	r3, [pc, #144]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002846:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800284a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800284c:	4b21      	ldr	r3, [pc, #132]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800284e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002852:	4a20      	ldr	r2, [pc, #128]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002854:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002858:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800285c:	4b1d      	ldr	r3, [pc, #116]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800285e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002862:	4a1c      	ldr	r2, [pc, #112]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002864:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002868:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800286c:	4a19      	ldr	r2, [pc, #100]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d016      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287e:	f7fe fda5 	bl	80013cc <HAL_GetTick>
 8002882:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002884:	e00b      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002886:	f7fe fda1 	bl	80013cc <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002894:	4293      	cmp	r3, r2
 8002896:	d902      	bls.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	74fb      	strb	r3, [r7, #19]
            break;
 800289c:	e006      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800289e:	4b0d      	ldr	r3, [pc, #52]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0ec      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80028ac:	7cfb      	ldrb	r3, [r7, #19]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10c      	bne.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028b2:	4b08      	ldr	r3, [pc, #32]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028c2:	4904      	ldr	r1, [pc, #16]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80028ca:	e009      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028cc:	7cfb      	ldrb	r3, [r7, #19]
 80028ce:	74bb      	strb	r3, [r7, #18]
 80028d0:	e006      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80028d2:	bf00      	nop
 80028d4:	40021000 	.word	0x40021000
 80028d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028dc:	7cfb      	ldrb	r3, [r7, #19]
 80028de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028e0:	7c7b      	ldrb	r3, [r7, #17]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d105      	bne.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e6:	4b9e      	ldr	r3, [pc, #632]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ea:	4a9d      	ldr	r2, [pc, #628]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028f0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00a      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028fe:	4b98      	ldr	r3, [pc, #608]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002904:	f023 0203 	bic.w	r2, r3, #3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800290c:	4994      	ldr	r1, [pc, #592]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800290e:	4313      	orrs	r3, r2
 8002910:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00a      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002920:	4b8f      	ldr	r3, [pc, #572]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002926:	f023 020c 	bic.w	r2, r3, #12
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800292e:	498c      	ldr	r1, [pc, #560]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002930:	4313      	orrs	r3, r2
 8002932:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0304 	and.w	r3, r3, #4
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00a      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002942:	4b87      	ldr	r3, [pc, #540]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002944:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002948:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002950:	4983      	ldr	r1, [pc, #524]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002952:	4313      	orrs	r3, r2
 8002954:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0308 	and.w	r3, r3, #8
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00a      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002964:	4b7e      	ldr	r3, [pc, #504]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800296a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002972:	497b      	ldr	r1, [pc, #492]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002974:	4313      	orrs	r3, r2
 8002976:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0310 	and.w	r3, r3, #16
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00a      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002986:	4b76      	ldr	r3, [pc, #472]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800298c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002994:	4972      	ldr	r1, [pc, #456]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002996:	4313      	orrs	r3, r2
 8002998:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0320 	and.w	r3, r3, #32
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00a      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029a8:	4b6d      	ldr	r3, [pc, #436]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029b6:	496a      	ldr	r1, [pc, #424]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00a      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029ca:	4b65      	ldr	r3, [pc, #404]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029d0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d8:	4961      	ldr	r1, [pc, #388]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00a      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029ec:	4b5c      	ldr	r3, [pc, #368]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029fa:	4959      	ldr	r1, [pc, #356]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00a      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a0e:	4b54      	ldr	r3, [pc, #336]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a14:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a1c:	4950      	ldr	r1, [pc, #320]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00a      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a30:	4b4b      	ldr	r3, [pc, #300]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a36:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a3e:	4948      	ldr	r1, [pc, #288]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00a      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a52:	4b43      	ldr	r3, [pc, #268]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a58:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a60:	493f      	ldr	r1, [pc, #252]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d028      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a74:	4b3a      	ldr	r3, [pc, #232]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a7a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a82:	4937      	ldr	r1, [pc, #220]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a92:	d106      	bne.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a94:	4b32      	ldr	r3, [pc, #200]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	4a31      	ldr	r2, [pc, #196]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a9e:	60d3      	str	r3, [r2, #12]
 8002aa0:	e011      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002aa6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002aaa:	d10c      	bne.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	3304      	adds	r3, #4
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 f8c8 	bl	8002c48 <RCCEx_PLLSAI1_Config>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002abc:	7cfb      	ldrb	r3, [r7, #19]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002ac2:	7cfb      	ldrb	r3, [r7, #19]
 8002ac4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d028      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ad2:	4b23      	ldr	r3, [pc, #140]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ad8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae0:	491f      	ldr	r1, [pc, #124]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002af0:	d106      	bne.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002af2:	4b1b      	ldr	r3, [pc, #108]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	4a1a      	ldr	r2, [pc, #104]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002afc:	60d3      	str	r3, [r2, #12]
 8002afe:	e011      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b04:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b08:	d10c      	bne.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	3304      	adds	r3, #4
 8002b0e:	2101      	movs	r1, #1
 8002b10:	4618      	mov	r0, r3
 8002b12:	f000 f899 	bl	8002c48 <RCCEx_PLLSAI1_Config>
 8002b16:	4603      	mov	r3, r0
 8002b18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b1a:	7cfb      	ldrb	r3, [r7, #19]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002b20:	7cfb      	ldrb	r3, [r7, #19]
 8002b22:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d02b      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b30:	4b0b      	ldr	r3, [pc, #44]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b36:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b3e:	4908      	ldr	r1, [pc, #32]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b4e:	d109      	bne.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b50:	4b03      	ldr	r3, [pc, #12]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	4a02      	ldr	r2, [pc, #8]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b5a:	60d3      	str	r3, [r2, #12]
 8002b5c:	e014      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002b5e:	bf00      	nop
 8002b60:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b68:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b6c:	d10c      	bne.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	3304      	adds	r3, #4
 8002b72:	2101      	movs	r1, #1
 8002b74:	4618      	mov	r0, r3
 8002b76:	f000 f867 	bl	8002c48 <RCCEx_PLLSAI1_Config>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b7e:	7cfb      	ldrb	r3, [r7, #19]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002b84:	7cfb      	ldrb	r3, [r7, #19]
 8002b86:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d02f      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b94:	4b2b      	ldr	r3, [pc, #172]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b9a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ba2:	4928      	ldr	r1, [pc, #160]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002bae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002bb2:	d10d      	bne.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3304      	adds	r3, #4
 8002bb8:	2102      	movs	r1, #2
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 f844 	bl	8002c48 <RCCEx_PLLSAI1_Config>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bc4:	7cfb      	ldrb	r3, [r7, #19]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d014      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002bca:	7cfb      	ldrb	r3, [r7, #19]
 8002bcc:	74bb      	strb	r3, [r7, #18]
 8002bce:	e011      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002bd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bd8:	d10c      	bne.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	3320      	adds	r3, #32
 8002bde:	2102      	movs	r1, #2
 8002be0:	4618      	mov	r0, r3
 8002be2:	f000 f925 	bl	8002e30 <RCCEx_PLLSAI2_Config>
 8002be6:	4603      	mov	r3, r0
 8002be8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bea:	7cfb      	ldrb	r3, [r7, #19]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002bf0:	7cfb      	ldrb	r3, [r7, #19]
 8002bf2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00a      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c00:	4b10      	ldr	r3, [pc, #64]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c06:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c0e:	490d      	ldr	r1, [pc, #52]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00b      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c22:	4b08      	ldr	r3, [pc, #32]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c28:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c32:	4904      	ldr	r1, [pc, #16]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c3a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3718      	adds	r7, #24
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40021000 	.word	0x40021000

08002c48 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c52:	2300      	movs	r3, #0
 8002c54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c56:	4b75      	ldr	r3, [pc, #468]	@ (8002e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	f003 0303 	and.w	r3, r3, #3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d018      	beq.n	8002c94 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c62:	4b72      	ldr	r3, [pc, #456]	@ (8002e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	f003 0203 	and.w	r2, r3, #3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d10d      	bne.n	8002c8e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
       ||
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d009      	beq.n	8002c8e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c7a:	4b6c      	ldr	r3, [pc, #432]	@ (8002e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	091b      	lsrs	r3, r3, #4
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	1c5a      	adds	r2, r3, #1
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
       ||
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d047      	beq.n	8002d1e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	73fb      	strb	r3, [r7, #15]
 8002c92:	e044      	b.n	8002d1e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2b03      	cmp	r3, #3
 8002c9a:	d018      	beq.n	8002cce <RCCEx_PLLSAI1_Config+0x86>
 8002c9c:	2b03      	cmp	r3, #3
 8002c9e:	d825      	bhi.n	8002cec <RCCEx_PLLSAI1_Config+0xa4>
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d002      	beq.n	8002caa <RCCEx_PLLSAI1_Config+0x62>
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d009      	beq.n	8002cbc <RCCEx_PLLSAI1_Config+0x74>
 8002ca8:	e020      	b.n	8002cec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002caa:	4b60      	ldr	r3, [pc, #384]	@ (8002e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d11d      	bne.n	8002cf2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cba:	e01a      	b.n	8002cf2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002cbc:	4b5b      	ldr	r3, [pc, #364]	@ (8002e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d116      	bne.n	8002cf6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ccc:	e013      	b.n	8002cf6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002cce:	4b57      	ldr	r3, [pc, #348]	@ (8002e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10f      	bne.n	8002cfa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002cda:	4b54      	ldr	r3, [pc, #336]	@ (8002e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d109      	bne.n	8002cfa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002cea:	e006      	b.n	8002cfa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	73fb      	strb	r3, [r7, #15]
      break;
 8002cf0:	e004      	b.n	8002cfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cf2:	bf00      	nop
 8002cf4:	e002      	b.n	8002cfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cf6:	bf00      	nop
 8002cf8:	e000      	b.n	8002cfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cfa:	bf00      	nop
    }

    if(status == HAL_OK)
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10d      	bne.n	8002d1e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d02:	4b4a      	ldr	r3, [pc, #296]	@ (8002e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6819      	ldr	r1, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	3b01      	subs	r3, #1
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	430b      	orrs	r3, r1
 8002d18:	4944      	ldr	r1, [pc, #272]	@ (8002e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d1e:	7bfb      	ldrb	r3, [r7, #15]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d17d      	bne.n	8002e20 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d24:	4b41      	ldr	r3, [pc, #260]	@ (8002e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a40      	ldr	r2, [pc, #256]	@ (8002e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d2a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002d2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d30:	f7fe fb4c 	bl	80013cc <HAL_GetTick>
 8002d34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d36:	e009      	b.n	8002d4c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d38:	f7fe fb48 	bl	80013cc <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d902      	bls.n	8002d4c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	73fb      	strb	r3, [r7, #15]
        break;
 8002d4a:	e005      	b.n	8002d58 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d4c:	4b37      	ldr	r3, [pc, #220]	@ (8002e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1ef      	bne.n	8002d38 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d160      	bne.n	8002e20 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d111      	bne.n	8002d88 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d64:	4b31      	ldr	r3, [pc, #196]	@ (8002e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002d6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6892      	ldr	r2, [r2, #8]
 8002d74:	0211      	lsls	r1, r2, #8
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	68d2      	ldr	r2, [r2, #12]
 8002d7a:	0912      	lsrs	r2, r2, #4
 8002d7c:	0452      	lsls	r2, r2, #17
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	492a      	ldr	r1, [pc, #168]	@ (8002e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	610b      	str	r3, [r1, #16]
 8002d86:	e027      	b.n	8002dd8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d112      	bne.n	8002db4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d8e:	4b27      	ldr	r3, [pc, #156]	@ (8002e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002d96:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	6892      	ldr	r2, [r2, #8]
 8002d9e:	0211      	lsls	r1, r2, #8
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	6912      	ldr	r2, [r2, #16]
 8002da4:	0852      	lsrs	r2, r2, #1
 8002da6:	3a01      	subs	r2, #1
 8002da8:	0552      	lsls	r2, r2, #21
 8002daa:	430a      	orrs	r2, r1
 8002dac:	491f      	ldr	r1, [pc, #124]	@ (8002e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	610b      	str	r3, [r1, #16]
 8002db2:	e011      	b.n	8002dd8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002db4:	4b1d      	ldr	r3, [pc, #116]	@ (8002e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002dbc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	6892      	ldr	r2, [r2, #8]
 8002dc4:	0211      	lsls	r1, r2, #8
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	6952      	ldr	r2, [r2, #20]
 8002dca:	0852      	lsrs	r2, r2, #1
 8002dcc:	3a01      	subs	r2, #1
 8002dce:	0652      	lsls	r2, r2, #25
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	4916      	ldr	r1, [pc, #88]	@ (8002e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002dd8:	4b14      	ldr	r3, [pc, #80]	@ (8002e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a13      	ldr	r2, [pc, #76]	@ (8002e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dde:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002de2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de4:	f7fe faf2 	bl	80013cc <HAL_GetTick>
 8002de8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002dea:	e009      	b.n	8002e00 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002dec:	f7fe faee 	bl	80013cc <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d902      	bls.n	8002e00 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	73fb      	strb	r3, [r7, #15]
          break;
 8002dfe:	e005      	b.n	8002e0c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e00:	4b0a      	ldr	r3, [pc, #40]	@ (8002e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0ef      	beq.n	8002dec <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d106      	bne.n	8002e20 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e12:	4b06      	ldr	r3, [pc, #24]	@ (8002e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e14:	691a      	ldr	r2, [r3, #16]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	4904      	ldr	r1, [pc, #16]	@ (8002e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40021000 	.word	0x40021000

08002e30 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e3e:	4b6a      	ldr	r3, [pc, #424]	@ (8002fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	f003 0303 	and.w	r3, r3, #3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d018      	beq.n	8002e7c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e4a:	4b67      	ldr	r3, [pc, #412]	@ (8002fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	f003 0203 	and.w	r2, r3, #3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d10d      	bne.n	8002e76 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
       ||
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d009      	beq.n	8002e76 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002e62:	4b61      	ldr	r3, [pc, #388]	@ (8002fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	091b      	lsrs	r3, r3, #4
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	1c5a      	adds	r2, r3, #1
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
       ||
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d047      	beq.n	8002f06 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	73fb      	strb	r3, [r7, #15]
 8002e7a:	e044      	b.n	8002f06 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b03      	cmp	r3, #3
 8002e82:	d018      	beq.n	8002eb6 <RCCEx_PLLSAI2_Config+0x86>
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d825      	bhi.n	8002ed4 <RCCEx_PLLSAI2_Config+0xa4>
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d002      	beq.n	8002e92 <RCCEx_PLLSAI2_Config+0x62>
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d009      	beq.n	8002ea4 <RCCEx_PLLSAI2_Config+0x74>
 8002e90:	e020      	b.n	8002ed4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e92:	4b55      	ldr	r3, [pc, #340]	@ (8002fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d11d      	bne.n	8002eda <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ea2:	e01a      	b.n	8002eda <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ea4:	4b50      	ldr	r3, [pc, #320]	@ (8002fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d116      	bne.n	8002ede <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eb4:	e013      	b.n	8002ede <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002eb6:	4b4c      	ldr	r3, [pc, #304]	@ (8002fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10f      	bne.n	8002ee2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ec2:	4b49      	ldr	r3, [pc, #292]	@ (8002fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d109      	bne.n	8002ee2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ed2:	e006      	b.n	8002ee2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ed8:	e004      	b.n	8002ee4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002eda:	bf00      	nop
 8002edc:	e002      	b.n	8002ee4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ede:	bf00      	nop
 8002ee0:	e000      	b.n	8002ee4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ee2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10d      	bne.n	8002f06 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002eea:	4b3f      	ldr	r3, [pc, #252]	@ (8002fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6819      	ldr	r1, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	3b01      	subs	r3, #1
 8002efc:	011b      	lsls	r3, r3, #4
 8002efe:	430b      	orrs	r3, r1
 8002f00:	4939      	ldr	r1, [pc, #228]	@ (8002fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f06:	7bfb      	ldrb	r3, [r7, #15]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d167      	bne.n	8002fdc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f0c:	4b36      	ldr	r3, [pc, #216]	@ (8002fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a35      	ldr	r2, [pc, #212]	@ (8002fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f18:	f7fe fa58 	bl	80013cc <HAL_GetTick>
 8002f1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f1e:	e009      	b.n	8002f34 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f20:	f7fe fa54 	bl	80013cc <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d902      	bls.n	8002f34 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	73fb      	strb	r3, [r7, #15]
        break;
 8002f32:	e005      	b.n	8002f40 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f34:	4b2c      	ldr	r3, [pc, #176]	@ (8002fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1ef      	bne.n	8002f20 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f40:	7bfb      	ldrb	r3, [r7, #15]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d14a      	bne.n	8002fdc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d111      	bne.n	8002f70 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f4c:	4b26      	ldr	r3, [pc, #152]	@ (8002fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002f54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6892      	ldr	r2, [r2, #8]
 8002f5c:	0211      	lsls	r1, r2, #8
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	68d2      	ldr	r2, [r2, #12]
 8002f62:	0912      	lsrs	r2, r2, #4
 8002f64:	0452      	lsls	r2, r2, #17
 8002f66:	430a      	orrs	r2, r1
 8002f68:	491f      	ldr	r1, [pc, #124]	@ (8002fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	614b      	str	r3, [r1, #20]
 8002f6e:	e011      	b.n	8002f94 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f70:	4b1d      	ldr	r3, [pc, #116]	@ (8002fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002f78:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	6892      	ldr	r2, [r2, #8]
 8002f80:	0211      	lsls	r1, r2, #8
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	6912      	ldr	r2, [r2, #16]
 8002f86:	0852      	lsrs	r2, r2, #1
 8002f88:	3a01      	subs	r2, #1
 8002f8a:	0652      	lsls	r2, r2, #25
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	4916      	ldr	r1, [pc, #88]	@ (8002fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002f94:	4b14      	ldr	r3, [pc, #80]	@ (8002fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a13      	ldr	r2, [pc, #76]	@ (8002fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa0:	f7fe fa14 	bl	80013cc <HAL_GetTick>
 8002fa4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002fa6:	e009      	b.n	8002fbc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fa8:	f7fe fa10 	bl	80013cc <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d902      	bls.n	8002fbc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	73fb      	strb	r3, [r7, #15]
          break;
 8002fba:	e005      	b.n	8002fc8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8002fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0ef      	beq.n	8002fa8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d106      	bne.n	8002fdc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002fce:	4b06      	ldr	r3, [pc, #24]	@ (8002fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fd0:	695a      	ldr	r2, [r3, #20]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	4904      	ldr	r1, [pc, #16]	@ (8002fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40021000 	.word	0x40021000

08002fec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e095      	b.n	800312a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003002:	2b00      	cmp	r3, #0
 8003004:	d108      	bne.n	8003018 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800300e:	d009      	beq.n	8003024 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	61da      	str	r2, [r3, #28]
 8003016:	e005      	b.n	8003024 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d106      	bne.n	8003044 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7fd ff50 	bl	8000ee4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800305a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003064:	d902      	bls.n	800306c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003066:	2300      	movs	r3, #0
 8003068:	60fb      	str	r3, [r7, #12]
 800306a:	e002      	b.n	8003072 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800306c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003070:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800307a:	d007      	beq.n	800308c <HAL_SPI_Init+0xa0>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003084:	d002      	beq.n	800308c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800309c:	431a      	orrs	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	69db      	ldr	r3, [r3, #28]
 80030c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80030c4:	431a      	orrs	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ce:	ea42 0103 	orr.w	r1, r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	0c1b      	lsrs	r3, r3, #16
 80030e8:	f003 0204 	and.w	r2, r3, #4
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f0:	f003 0310 	and.w	r3, r3, #16
 80030f4:	431a      	orrs	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	431a      	orrs	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003108:	ea42 0103 	orr.w	r1, r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b088      	sub	sp, #32
 8003136:	af00      	add	r7, sp, #0
 8003138:	60f8      	str	r0, [r7, #12]
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	603b      	str	r3, [r7, #0]
 800313e:	4613      	mov	r3, r2
 8003140:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003142:	f7fe f943 	bl	80013cc <HAL_GetTick>
 8003146:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003148:	88fb      	ldrh	r3, [r7, #6]
 800314a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b01      	cmp	r3, #1
 8003156:	d001      	beq.n	800315c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003158:	2302      	movs	r3, #2
 800315a:	e15c      	b.n	8003416 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d002      	beq.n	8003168 <HAL_SPI_Transmit+0x36>
 8003162:	88fb      	ldrh	r3, [r7, #6]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e154      	b.n	8003416 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003172:	2b01      	cmp	r3, #1
 8003174:	d101      	bne.n	800317a <HAL_SPI_Transmit+0x48>
 8003176:	2302      	movs	r3, #2
 8003178:	e14d      	b.n	8003416 <HAL_SPI_Transmit+0x2e4>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2203      	movs	r2, #3
 8003186:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	68ba      	ldr	r2, [r7, #8]
 8003194:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	88fa      	ldrh	r2, [r7, #6]
 800319a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	88fa      	ldrh	r2, [r7, #6]
 80031a0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031cc:	d10f      	bne.n	80031ee <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031f8:	2b40      	cmp	r3, #64	@ 0x40
 80031fa:	d007      	beq.n	800320c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800320a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003214:	d952      	bls.n	80032bc <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d002      	beq.n	8003224 <HAL_SPI_Transmit+0xf2>
 800321e:	8b7b      	ldrh	r3, [r7, #26]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d145      	bne.n	80032b0 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003228:	881a      	ldrh	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003234:	1c9a      	adds	r2, r3, #2
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800323e:	b29b      	uxth	r3, r3
 8003240:	3b01      	subs	r3, #1
 8003242:	b29a      	uxth	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003248:	e032      	b.n	80032b0 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b02      	cmp	r3, #2
 8003256:	d112      	bne.n	800327e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800325c:	881a      	ldrh	r2, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003268:	1c9a      	adds	r2, r3, #2
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003272:	b29b      	uxth	r3, r3
 8003274:	3b01      	subs	r3, #1
 8003276:	b29a      	uxth	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800327c:	e018      	b.n	80032b0 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800327e:	f7fe f8a5 	bl	80013cc <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	429a      	cmp	r2, r3
 800328c:	d803      	bhi.n	8003296 <HAL_SPI_Transmit+0x164>
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003294:	d102      	bne.n	800329c <HAL_SPI_Transmit+0x16a>
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d109      	bne.n	80032b0 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e0b2      	b.n	8003416 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1c7      	bne.n	800324a <HAL_SPI_Transmit+0x118>
 80032ba:	e083      	b.n	80033c4 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d002      	beq.n	80032ca <HAL_SPI_Transmit+0x198>
 80032c4:	8b7b      	ldrh	r3, [r7, #26]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d177      	bne.n	80033ba <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d912      	bls.n	80032fa <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d8:	881a      	ldrh	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032e4:	1c9a      	adds	r2, r3, #2
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	3b02      	subs	r3, #2
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80032f8:	e05f      	b.n	80033ba <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	330c      	adds	r3, #12
 8003304:	7812      	ldrb	r2, [r2, #0]
 8003306:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800330c:	1c5a      	adds	r2, r3, #1
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003316:	b29b      	uxth	r3, r3
 8003318:	3b01      	subs	r3, #1
 800331a:	b29a      	uxth	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003320:	e04b      	b.n	80033ba <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b02      	cmp	r3, #2
 800332e:	d12b      	bne.n	8003388 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003334:	b29b      	uxth	r3, r3
 8003336:	2b01      	cmp	r3, #1
 8003338:	d912      	bls.n	8003360 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800333e:	881a      	ldrh	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800334a:	1c9a      	adds	r2, r3, #2
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003354:	b29b      	uxth	r3, r3
 8003356:	3b02      	subs	r3, #2
 8003358:	b29a      	uxth	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800335e:	e02c      	b.n	80033ba <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	330c      	adds	r3, #12
 800336a:	7812      	ldrb	r2, [r2, #0]
 800336c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003372:	1c5a      	adds	r2, r3, #1
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800337c:	b29b      	uxth	r3, r3
 800337e:	3b01      	subs	r3, #1
 8003380:	b29a      	uxth	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003386:	e018      	b.n	80033ba <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003388:	f7fe f820 	bl	80013cc <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	429a      	cmp	r2, r3
 8003396:	d803      	bhi.n	80033a0 <HAL_SPI_Transmit+0x26e>
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800339e:	d102      	bne.n	80033a6 <HAL_SPI_Transmit+0x274>
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d109      	bne.n	80033ba <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e02d      	b.n	8003416 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033be:	b29b      	uxth	r3, r3
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1ae      	bne.n	8003322 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033c4:	69fa      	ldr	r2, [r7, #28]
 80033c6:	6839      	ldr	r1, [r7, #0]
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f000 f947 	bl	800365c <SPI_EndRxTxTransaction>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d002      	beq.n	80033da <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2220      	movs	r2, #32
 80033d8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10a      	bne.n	80033f8 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033e2:	2300      	movs	r3, #0
 80033e4:	617b      	str	r3, [r7, #20]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	617b      	str	r3, [r7, #20]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	617b      	str	r3, [r7, #20]
 80033f6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e000      	b.n	8003416 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003414:	2300      	movs	r3, #0
  }
}
 8003416:	4618      	mov	r0, r3
 8003418:	3720      	adds	r7, #32
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
	...

08003420 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b088      	sub	sp, #32
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	603b      	str	r3, [r7, #0]
 800342c:	4613      	mov	r3, r2
 800342e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003430:	f7fd ffcc 	bl	80013cc <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003438:	1a9b      	subs	r3, r3, r2
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	4413      	add	r3, r2
 800343e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003440:	f7fd ffc4 	bl	80013cc <HAL_GetTick>
 8003444:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003446:	4b39      	ldr	r3, [pc, #228]	@ (800352c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	015b      	lsls	r3, r3, #5
 800344c:	0d1b      	lsrs	r3, r3, #20
 800344e:	69fa      	ldr	r2, [r7, #28]
 8003450:	fb02 f303 	mul.w	r3, r2, r3
 8003454:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003456:	e054      	b.n	8003502 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345e:	d050      	beq.n	8003502 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003460:	f7fd ffb4 	bl	80013cc <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	69fa      	ldr	r2, [r7, #28]
 800346c:	429a      	cmp	r2, r3
 800346e:	d902      	bls.n	8003476 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d13d      	bne.n	80034f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003484:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800348e:	d111      	bne.n	80034b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003498:	d004      	beq.n	80034a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034a2:	d107      	bne.n	80034b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034bc:	d10f      	bne.n	80034de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e017      	b.n	8003522 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d101      	bne.n	80034fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	3b01      	subs	r3, #1
 8003500:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	4013      	ands	r3, r2
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	429a      	cmp	r2, r3
 8003510:	bf0c      	ite	eq
 8003512:	2301      	moveq	r3, #1
 8003514:	2300      	movne	r3, #0
 8003516:	b2db      	uxtb	r3, r3
 8003518:	461a      	mov	r2, r3
 800351a:	79fb      	ldrb	r3, [r7, #7]
 800351c:	429a      	cmp	r2, r3
 800351e:	d19b      	bne.n	8003458 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3720      	adds	r7, #32
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	20000000 	.word	0x20000000

08003530 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b08a      	sub	sp, #40	@ 0x28
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
 800353c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800353e:	2300      	movs	r3, #0
 8003540:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003542:	f7fd ff43 	bl	80013cc <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800354a:	1a9b      	subs	r3, r3, r2
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	4413      	add	r3, r2
 8003550:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003552:	f7fd ff3b 	bl	80013cc <HAL_GetTick>
 8003556:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	330c      	adds	r3, #12
 800355e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003560:	4b3d      	ldr	r3, [pc, #244]	@ (8003658 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	4613      	mov	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	00da      	lsls	r2, r3, #3
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	0d1b      	lsrs	r3, r3, #20
 8003570:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003572:	fb02 f303 	mul.w	r3, r2, r3
 8003576:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003578:	e060      	b.n	800363c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003580:	d107      	bne.n	8003592 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d104      	bne.n	8003592 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	b2db      	uxtb	r3, r3
 800358e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003590:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003598:	d050      	beq.n	800363c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800359a:	f7fd ff17 	bl	80013cc <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	6a3b      	ldr	r3, [r7, #32]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d902      	bls.n	80035b0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80035aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d13d      	bne.n	800362c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80035be:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035c8:	d111      	bne.n	80035ee <SPI_WaitFifoStateUntilTimeout+0xbe>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035d2:	d004      	beq.n	80035de <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035dc:	d107      	bne.n	80035ee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035ec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035f6:	d10f      	bne.n	8003618 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003616:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e010      	b.n	800364e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003632:	2300      	movs	r3, #0
 8003634:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	3b01      	subs	r3, #1
 800363a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689a      	ldr	r2, [r3, #8]
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	4013      	ands	r3, r2
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	429a      	cmp	r2, r3
 800364a:	d196      	bne.n	800357a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3728      	adds	r7, #40	@ 0x28
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	20000000 	.word	0x20000000

0800365c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af02      	add	r7, sp, #8
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	2200      	movs	r2, #0
 8003670:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f7ff ff5b 	bl	8003530 <SPI_WaitFifoStateUntilTimeout>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d007      	beq.n	8003690 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003684:	f043 0220 	orr.w	r2, r3, #32
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e027      	b.n	80036e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	2200      	movs	r2, #0
 8003698:	2180      	movs	r1, #128	@ 0x80
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f7ff fec0 	bl	8003420 <SPI_WaitFlagStateUntilTimeout>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d007      	beq.n	80036b6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036aa:	f043 0220 	orr.w	r2, r3, #32
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e014      	b.n	80036e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	2200      	movs	r2, #0
 80036be:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f7ff ff34 	bl	8003530 <SPI_WaitFifoStateUntilTimeout>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d007      	beq.n	80036de <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036d2:	f043 0220 	orr.w	r2, r3, #32
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e000      	b.n	80036e0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e040      	b.n	800377c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d106      	bne.n	8003710 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7fd fd68 	bl	80011e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2224      	movs	r2, #36	@ 0x24
 8003714:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0201 	bic.w	r2, r2, #1
 8003724:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372a:	2b00      	cmp	r3, #0
 800372c:	d002      	beq.n	8003734 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 fb6a 	bl	8003e08 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f8af 	bl	8003898 <UART_SetConfig>
 800373a:	4603      	mov	r3, r0
 800373c:	2b01      	cmp	r3, #1
 800373e:	d101      	bne.n	8003744 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e01b      	b.n	800377c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003752:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689a      	ldr	r2, [r3, #8]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003762:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0201 	orr.w	r2, r2, #1
 8003772:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 fbe9 	bl	8003f4c <UART_CheckIdleState>
 800377a:	4603      	mov	r3, r0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b08a      	sub	sp, #40	@ 0x28
 8003788:	af02      	add	r7, sp, #8
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	603b      	str	r3, [r7, #0]
 8003790:	4613      	mov	r3, r2
 8003792:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003798:	2b20      	cmp	r3, #32
 800379a:	d177      	bne.n	800388c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d002      	beq.n	80037a8 <HAL_UART_Transmit+0x24>
 80037a2:	88fb      	ldrh	r3, [r7, #6]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e070      	b.n	800388e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2221      	movs	r2, #33	@ 0x21
 80037b8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037ba:	f7fd fe07 	bl	80013cc <HAL_GetTick>
 80037be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	88fa      	ldrh	r2, [r7, #6]
 80037c4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	88fa      	ldrh	r2, [r7, #6]
 80037cc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037d8:	d108      	bne.n	80037ec <HAL_UART_Transmit+0x68>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d104      	bne.n	80037ec <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80037e2:	2300      	movs	r3, #0
 80037e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	61bb      	str	r3, [r7, #24]
 80037ea:	e003      	b.n	80037f4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037f0:	2300      	movs	r3, #0
 80037f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037f4:	e02f      	b.n	8003856 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	2200      	movs	r2, #0
 80037fe:	2180      	movs	r1, #128	@ 0x80
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 fc4b 	bl	800409c <UART_WaitOnFlagUntilTimeout>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d004      	beq.n	8003816 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2220      	movs	r2, #32
 8003810:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e03b      	b.n	800388e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10b      	bne.n	8003834 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	881a      	ldrh	r2, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003828:	b292      	uxth	r2, r2
 800382a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	3302      	adds	r3, #2
 8003830:	61bb      	str	r3, [r7, #24]
 8003832:	e007      	b.n	8003844 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	781a      	ldrb	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	3301      	adds	r3, #1
 8003842:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800384a:	b29b      	uxth	r3, r3
 800384c:	3b01      	subs	r3, #1
 800384e:	b29a      	uxth	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800385c:	b29b      	uxth	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1c9      	bne.n	80037f6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	2200      	movs	r2, #0
 800386a:	2140      	movs	r1, #64	@ 0x40
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f000 fc15 	bl	800409c <UART_WaitOnFlagUntilTimeout>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d004      	beq.n	8003882 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2220      	movs	r2, #32
 800387c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e005      	b.n	800388e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2220      	movs	r2, #32
 8003886:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003888:	2300      	movs	r3, #0
 800388a:	e000      	b.n	800388e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800388c:	2302      	movs	r3, #2
  }
}
 800388e:	4618      	mov	r0, r3
 8003890:	3720      	adds	r7, #32
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
	...

08003898 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003898:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800389c:	b08a      	sub	sp, #40	@ 0x28
 800389e:	af00      	add	r7, sp, #0
 80038a0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038a2:	2300      	movs	r3, #0
 80038a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	431a      	orrs	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	431a      	orrs	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	4313      	orrs	r3, r2
 80038be:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	4ba4      	ldr	r3, [pc, #656]	@ (8003b58 <UART_SetConfig+0x2c0>)
 80038c8:	4013      	ands	r3, r2
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	6812      	ldr	r2, [r2, #0]
 80038ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80038d0:	430b      	orrs	r3, r1
 80038d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	68da      	ldr	r2, [r3, #12]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a99      	ldr	r2, [pc, #612]	@ (8003b5c <UART_SetConfig+0x2c4>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d004      	beq.n	8003904 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003900:	4313      	orrs	r3, r2
 8003902:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003914:	430a      	orrs	r2, r1
 8003916:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a90      	ldr	r2, [pc, #576]	@ (8003b60 <UART_SetConfig+0x2c8>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d126      	bne.n	8003970 <UART_SetConfig+0xd8>
 8003922:	4b90      	ldr	r3, [pc, #576]	@ (8003b64 <UART_SetConfig+0x2cc>)
 8003924:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003928:	f003 0303 	and.w	r3, r3, #3
 800392c:	2b03      	cmp	r3, #3
 800392e:	d81b      	bhi.n	8003968 <UART_SetConfig+0xd0>
 8003930:	a201      	add	r2, pc, #4	@ (adr r2, 8003938 <UART_SetConfig+0xa0>)
 8003932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003936:	bf00      	nop
 8003938:	08003949 	.word	0x08003949
 800393c:	08003959 	.word	0x08003959
 8003940:	08003951 	.word	0x08003951
 8003944:	08003961 	.word	0x08003961
 8003948:	2301      	movs	r3, #1
 800394a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800394e:	e116      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003950:	2302      	movs	r3, #2
 8003952:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003956:	e112      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003958:	2304      	movs	r3, #4
 800395a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800395e:	e10e      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003960:	2308      	movs	r3, #8
 8003962:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003966:	e10a      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003968:	2310      	movs	r3, #16
 800396a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800396e:	e106      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a7c      	ldr	r2, [pc, #496]	@ (8003b68 <UART_SetConfig+0x2d0>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d138      	bne.n	80039ec <UART_SetConfig+0x154>
 800397a:	4b7a      	ldr	r3, [pc, #488]	@ (8003b64 <UART_SetConfig+0x2cc>)
 800397c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003980:	f003 030c 	and.w	r3, r3, #12
 8003984:	2b0c      	cmp	r3, #12
 8003986:	d82d      	bhi.n	80039e4 <UART_SetConfig+0x14c>
 8003988:	a201      	add	r2, pc, #4	@ (adr r2, 8003990 <UART_SetConfig+0xf8>)
 800398a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398e:	bf00      	nop
 8003990:	080039c5 	.word	0x080039c5
 8003994:	080039e5 	.word	0x080039e5
 8003998:	080039e5 	.word	0x080039e5
 800399c:	080039e5 	.word	0x080039e5
 80039a0:	080039d5 	.word	0x080039d5
 80039a4:	080039e5 	.word	0x080039e5
 80039a8:	080039e5 	.word	0x080039e5
 80039ac:	080039e5 	.word	0x080039e5
 80039b0:	080039cd 	.word	0x080039cd
 80039b4:	080039e5 	.word	0x080039e5
 80039b8:	080039e5 	.word	0x080039e5
 80039bc:	080039e5 	.word	0x080039e5
 80039c0:	080039dd 	.word	0x080039dd
 80039c4:	2300      	movs	r3, #0
 80039c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039ca:	e0d8      	b.n	8003b7e <UART_SetConfig+0x2e6>
 80039cc:	2302      	movs	r3, #2
 80039ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039d2:	e0d4      	b.n	8003b7e <UART_SetConfig+0x2e6>
 80039d4:	2304      	movs	r3, #4
 80039d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039da:	e0d0      	b.n	8003b7e <UART_SetConfig+0x2e6>
 80039dc:	2308      	movs	r3, #8
 80039de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039e2:	e0cc      	b.n	8003b7e <UART_SetConfig+0x2e6>
 80039e4:	2310      	movs	r3, #16
 80039e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039ea:	e0c8      	b.n	8003b7e <UART_SetConfig+0x2e6>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a5e      	ldr	r2, [pc, #376]	@ (8003b6c <UART_SetConfig+0x2d4>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d125      	bne.n	8003a42 <UART_SetConfig+0x1aa>
 80039f6:	4b5b      	ldr	r3, [pc, #364]	@ (8003b64 <UART_SetConfig+0x2cc>)
 80039f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039fc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003a00:	2b30      	cmp	r3, #48	@ 0x30
 8003a02:	d016      	beq.n	8003a32 <UART_SetConfig+0x19a>
 8003a04:	2b30      	cmp	r3, #48	@ 0x30
 8003a06:	d818      	bhi.n	8003a3a <UART_SetConfig+0x1a2>
 8003a08:	2b20      	cmp	r3, #32
 8003a0a:	d00a      	beq.n	8003a22 <UART_SetConfig+0x18a>
 8003a0c:	2b20      	cmp	r3, #32
 8003a0e:	d814      	bhi.n	8003a3a <UART_SetConfig+0x1a2>
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d002      	beq.n	8003a1a <UART_SetConfig+0x182>
 8003a14:	2b10      	cmp	r3, #16
 8003a16:	d008      	beq.n	8003a2a <UART_SetConfig+0x192>
 8003a18:	e00f      	b.n	8003a3a <UART_SetConfig+0x1a2>
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a20:	e0ad      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003a22:	2302      	movs	r3, #2
 8003a24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a28:	e0a9      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003a2a:	2304      	movs	r3, #4
 8003a2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a30:	e0a5      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003a32:	2308      	movs	r3, #8
 8003a34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a38:	e0a1      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003a3a:	2310      	movs	r3, #16
 8003a3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a40:	e09d      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a4a      	ldr	r2, [pc, #296]	@ (8003b70 <UART_SetConfig+0x2d8>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d125      	bne.n	8003a98 <UART_SetConfig+0x200>
 8003a4c:	4b45      	ldr	r3, [pc, #276]	@ (8003b64 <UART_SetConfig+0x2cc>)
 8003a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a52:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003a56:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a58:	d016      	beq.n	8003a88 <UART_SetConfig+0x1f0>
 8003a5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a5c:	d818      	bhi.n	8003a90 <UART_SetConfig+0x1f8>
 8003a5e:	2b80      	cmp	r3, #128	@ 0x80
 8003a60:	d00a      	beq.n	8003a78 <UART_SetConfig+0x1e0>
 8003a62:	2b80      	cmp	r3, #128	@ 0x80
 8003a64:	d814      	bhi.n	8003a90 <UART_SetConfig+0x1f8>
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <UART_SetConfig+0x1d8>
 8003a6a:	2b40      	cmp	r3, #64	@ 0x40
 8003a6c:	d008      	beq.n	8003a80 <UART_SetConfig+0x1e8>
 8003a6e:	e00f      	b.n	8003a90 <UART_SetConfig+0x1f8>
 8003a70:	2300      	movs	r3, #0
 8003a72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a76:	e082      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a7e:	e07e      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003a80:	2304      	movs	r3, #4
 8003a82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a86:	e07a      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003a88:	2308      	movs	r3, #8
 8003a8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a8e:	e076      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003a90:	2310      	movs	r3, #16
 8003a92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a96:	e072      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a35      	ldr	r2, [pc, #212]	@ (8003b74 <UART_SetConfig+0x2dc>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d12a      	bne.n	8003af8 <UART_SetConfig+0x260>
 8003aa2:	4b30      	ldr	r3, [pc, #192]	@ (8003b64 <UART_SetConfig+0x2cc>)
 8003aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aa8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003aac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ab0:	d01a      	beq.n	8003ae8 <UART_SetConfig+0x250>
 8003ab2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ab6:	d81b      	bhi.n	8003af0 <UART_SetConfig+0x258>
 8003ab8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003abc:	d00c      	beq.n	8003ad8 <UART_SetConfig+0x240>
 8003abe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ac2:	d815      	bhi.n	8003af0 <UART_SetConfig+0x258>
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d003      	beq.n	8003ad0 <UART_SetConfig+0x238>
 8003ac8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003acc:	d008      	beq.n	8003ae0 <UART_SetConfig+0x248>
 8003ace:	e00f      	b.n	8003af0 <UART_SetConfig+0x258>
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ad6:	e052      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003ad8:	2302      	movs	r3, #2
 8003ada:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ade:	e04e      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003ae0:	2304      	movs	r3, #4
 8003ae2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ae6:	e04a      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003ae8:	2308      	movs	r3, #8
 8003aea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aee:	e046      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003af0:	2310      	movs	r3, #16
 8003af2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003af6:	e042      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a17      	ldr	r2, [pc, #92]	@ (8003b5c <UART_SetConfig+0x2c4>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d13a      	bne.n	8003b78 <UART_SetConfig+0x2e0>
 8003b02:	4b18      	ldr	r3, [pc, #96]	@ (8003b64 <UART_SetConfig+0x2cc>)
 8003b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b08:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003b0c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b10:	d01a      	beq.n	8003b48 <UART_SetConfig+0x2b0>
 8003b12:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b16:	d81b      	bhi.n	8003b50 <UART_SetConfig+0x2b8>
 8003b18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b1c:	d00c      	beq.n	8003b38 <UART_SetConfig+0x2a0>
 8003b1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b22:	d815      	bhi.n	8003b50 <UART_SetConfig+0x2b8>
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d003      	beq.n	8003b30 <UART_SetConfig+0x298>
 8003b28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b2c:	d008      	beq.n	8003b40 <UART_SetConfig+0x2a8>
 8003b2e:	e00f      	b.n	8003b50 <UART_SetConfig+0x2b8>
 8003b30:	2300      	movs	r3, #0
 8003b32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b36:	e022      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003b38:	2302      	movs	r3, #2
 8003b3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b3e:	e01e      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003b40:	2304      	movs	r3, #4
 8003b42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b46:	e01a      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003b48:	2308      	movs	r3, #8
 8003b4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b4e:	e016      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003b50:	2310      	movs	r3, #16
 8003b52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b56:	e012      	b.n	8003b7e <UART_SetConfig+0x2e6>
 8003b58:	efff69f3 	.word	0xefff69f3
 8003b5c:	40008000 	.word	0x40008000
 8003b60:	40013800 	.word	0x40013800
 8003b64:	40021000 	.word	0x40021000
 8003b68:	40004400 	.word	0x40004400
 8003b6c:	40004800 	.word	0x40004800
 8003b70:	40004c00 	.word	0x40004c00
 8003b74:	40005000 	.word	0x40005000
 8003b78:	2310      	movs	r3, #16
 8003b7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a9f      	ldr	r2, [pc, #636]	@ (8003e00 <UART_SetConfig+0x568>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d17a      	bne.n	8003c7e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b88:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d824      	bhi.n	8003bda <UART_SetConfig+0x342>
 8003b90:	a201      	add	r2, pc, #4	@ (adr r2, 8003b98 <UART_SetConfig+0x300>)
 8003b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b96:	bf00      	nop
 8003b98:	08003bbd 	.word	0x08003bbd
 8003b9c:	08003bdb 	.word	0x08003bdb
 8003ba0:	08003bc5 	.word	0x08003bc5
 8003ba4:	08003bdb 	.word	0x08003bdb
 8003ba8:	08003bcb 	.word	0x08003bcb
 8003bac:	08003bdb 	.word	0x08003bdb
 8003bb0:	08003bdb 	.word	0x08003bdb
 8003bb4:	08003bdb 	.word	0x08003bdb
 8003bb8:	08003bd3 	.word	0x08003bd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bbc:	f7fe fcce 	bl	800255c <HAL_RCC_GetPCLK1Freq>
 8003bc0:	61f8      	str	r0, [r7, #28]
        break;
 8003bc2:	e010      	b.n	8003be6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bc4:	4b8f      	ldr	r3, [pc, #572]	@ (8003e04 <UART_SetConfig+0x56c>)
 8003bc6:	61fb      	str	r3, [r7, #28]
        break;
 8003bc8:	e00d      	b.n	8003be6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bca:	f7fe fc2f 	bl	800242c <HAL_RCC_GetSysClockFreq>
 8003bce:	61f8      	str	r0, [r7, #28]
        break;
 8003bd0:	e009      	b.n	8003be6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bd6:	61fb      	str	r3, [r7, #28]
        break;
 8003bd8:	e005      	b.n	8003be6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003be4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 80fb 	beq.w	8003de4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	4413      	add	r3, r2
 8003bf8:	69fa      	ldr	r2, [r7, #28]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d305      	bcc.n	8003c0a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c04:	69fa      	ldr	r2, [r7, #28]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d903      	bls.n	8003c12 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003c10:	e0e8      	b.n	8003de4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	2200      	movs	r2, #0
 8003c16:	461c      	mov	r4, r3
 8003c18:	4615      	mov	r5, r2
 8003c1a:	f04f 0200 	mov.w	r2, #0
 8003c1e:	f04f 0300 	mov.w	r3, #0
 8003c22:	022b      	lsls	r3, r5, #8
 8003c24:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003c28:	0222      	lsls	r2, r4, #8
 8003c2a:	68f9      	ldr	r1, [r7, #12]
 8003c2c:	6849      	ldr	r1, [r1, #4]
 8003c2e:	0849      	lsrs	r1, r1, #1
 8003c30:	2000      	movs	r0, #0
 8003c32:	4688      	mov	r8, r1
 8003c34:	4681      	mov	r9, r0
 8003c36:	eb12 0a08 	adds.w	sl, r2, r8
 8003c3a:	eb43 0b09 	adc.w	fp, r3, r9
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	603b      	str	r3, [r7, #0]
 8003c46:	607a      	str	r2, [r7, #4]
 8003c48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c4c:	4650      	mov	r0, sl
 8003c4e:	4659      	mov	r1, fp
 8003c50:	f7fc faba 	bl	80001c8 <__aeabi_uldivmod>
 8003c54:	4602      	mov	r2, r0
 8003c56:	460b      	mov	r3, r1
 8003c58:	4613      	mov	r3, r2
 8003c5a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c62:	d308      	bcc.n	8003c76 <UART_SetConfig+0x3de>
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c6a:	d204      	bcs.n	8003c76 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	60da      	str	r2, [r3, #12]
 8003c74:	e0b6      	b.n	8003de4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003c7c:	e0b2      	b.n	8003de4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c86:	d15e      	bne.n	8003d46 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003c88:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003c8c:	2b08      	cmp	r3, #8
 8003c8e:	d828      	bhi.n	8003ce2 <UART_SetConfig+0x44a>
 8003c90:	a201      	add	r2, pc, #4	@ (adr r2, 8003c98 <UART_SetConfig+0x400>)
 8003c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c96:	bf00      	nop
 8003c98:	08003cbd 	.word	0x08003cbd
 8003c9c:	08003cc5 	.word	0x08003cc5
 8003ca0:	08003ccd 	.word	0x08003ccd
 8003ca4:	08003ce3 	.word	0x08003ce3
 8003ca8:	08003cd3 	.word	0x08003cd3
 8003cac:	08003ce3 	.word	0x08003ce3
 8003cb0:	08003ce3 	.word	0x08003ce3
 8003cb4:	08003ce3 	.word	0x08003ce3
 8003cb8:	08003cdb 	.word	0x08003cdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cbc:	f7fe fc4e 	bl	800255c <HAL_RCC_GetPCLK1Freq>
 8003cc0:	61f8      	str	r0, [r7, #28]
        break;
 8003cc2:	e014      	b.n	8003cee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cc4:	f7fe fc60 	bl	8002588 <HAL_RCC_GetPCLK2Freq>
 8003cc8:	61f8      	str	r0, [r7, #28]
        break;
 8003cca:	e010      	b.n	8003cee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ccc:	4b4d      	ldr	r3, [pc, #308]	@ (8003e04 <UART_SetConfig+0x56c>)
 8003cce:	61fb      	str	r3, [r7, #28]
        break;
 8003cd0:	e00d      	b.n	8003cee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cd2:	f7fe fbab 	bl	800242c <HAL_RCC_GetSysClockFreq>
 8003cd6:	61f8      	str	r0, [r7, #28]
        break;
 8003cd8:	e009      	b.n	8003cee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cde:	61fb      	str	r3, [r7, #28]
        break;
 8003ce0:	e005      	b.n	8003cee <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003cec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d077      	beq.n	8003de4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	005a      	lsls	r2, r3, #1
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	085b      	lsrs	r3, r3, #1
 8003cfe:	441a      	add	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d08:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	2b0f      	cmp	r3, #15
 8003d0e:	d916      	bls.n	8003d3e <UART_SetConfig+0x4a6>
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d16:	d212      	bcs.n	8003d3e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	f023 030f 	bic.w	r3, r3, #15
 8003d20:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	085b      	lsrs	r3, r3, #1
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	8afb      	ldrh	r3, [r7, #22]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	8afa      	ldrh	r2, [r7, #22]
 8003d3a:	60da      	str	r2, [r3, #12]
 8003d3c:	e052      	b.n	8003de4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003d44:	e04e      	b.n	8003de4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d46:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003d4a:	2b08      	cmp	r3, #8
 8003d4c:	d827      	bhi.n	8003d9e <UART_SetConfig+0x506>
 8003d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8003d54 <UART_SetConfig+0x4bc>)
 8003d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d54:	08003d79 	.word	0x08003d79
 8003d58:	08003d81 	.word	0x08003d81
 8003d5c:	08003d89 	.word	0x08003d89
 8003d60:	08003d9f 	.word	0x08003d9f
 8003d64:	08003d8f 	.word	0x08003d8f
 8003d68:	08003d9f 	.word	0x08003d9f
 8003d6c:	08003d9f 	.word	0x08003d9f
 8003d70:	08003d9f 	.word	0x08003d9f
 8003d74:	08003d97 	.word	0x08003d97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d78:	f7fe fbf0 	bl	800255c <HAL_RCC_GetPCLK1Freq>
 8003d7c:	61f8      	str	r0, [r7, #28]
        break;
 8003d7e:	e014      	b.n	8003daa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d80:	f7fe fc02 	bl	8002588 <HAL_RCC_GetPCLK2Freq>
 8003d84:	61f8      	str	r0, [r7, #28]
        break;
 8003d86:	e010      	b.n	8003daa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d88:	4b1e      	ldr	r3, [pc, #120]	@ (8003e04 <UART_SetConfig+0x56c>)
 8003d8a:	61fb      	str	r3, [r7, #28]
        break;
 8003d8c:	e00d      	b.n	8003daa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d8e:	f7fe fb4d 	bl	800242c <HAL_RCC_GetSysClockFreq>
 8003d92:	61f8      	str	r0, [r7, #28]
        break;
 8003d94:	e009      	b.n	8003daa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d9a:	61fb      	str	r3, [r7, #28]
        break;
 8003d9c:	e005      	b.n	8003daa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003da8:	bf00      	nop
    }

    if (pclk != 0U)
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d019      	beq.n	8003de4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	085a      	lsrs	r2, r3, #1
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	441a      	add	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	2b0f      	cmp	r3, #15
 8003dc8:	d909      	bls.n	8003dde <UART_SetConfig+0x546>
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dd0:	d205      	bcs.n	8003dde <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	60da      	str	r2, [r3, #12]
 8003ddc:	e002      	b.n	8003de4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003df0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3728      	adds	r7, #40	@ 0x28
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dfe:	bf00      	nop
 8003e00:	40008000 	.word	0x40008000
 8003e04:	00f42400 	.word	0x00f42400

08003e08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e14:	f003 0308 	and.w	r3, r3, #8
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00a      	beq.n	8003e32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00a      	beq.n	8003e54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	430a      	orrs	r2, r1
 8003e52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00a      	beq.n	8003e76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7a:	f003 0304 	and.w	r3, r3, #4
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00a      	beq.n	8003e98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	430a      	orrs	r2, r1
 8003e96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e9c:	f003 0310 	and.w	r3, r3, #16
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00a      	beq.n	8003eba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebe:	f003 0320 	and.w	r3, r3, #32
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00a      	beq.n	8003edc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d01a      	beq.n	8003f1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f06:	d10a      	bne.n	8003f1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00a      	beq.n	8003f40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	605a      	str	r2, [r3, #4]
  }
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b098      	sub	sp, #96	@ 0x60
 8003f50:	af02      	add	r7, sp, #8
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f5c:	f7fd fa36 	bl	80013cc <HAL_GetTick>
 8003f60:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0308 	and.w	r3, r3, #8
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	d12e      	bne.n	8003fce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f70:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f88c 	bl	800409c <UART_WaitOnFlagUntilTimeout>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d021      	beq.n	8003fce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f92:	e853 3f00 	ldrex	r3, [r3]
 8003f96:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fa8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003faa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003fae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fb0:	e841 2300 	strex	r3, r2, [r1]
 8003fb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003fb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1e6      	bne.n	8003f8a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e062      	b.n	8004094 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b04      	cmp	r3, #4
 8003fda:	d149      	bne.n	8004070 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fdc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f856 	bl	800409c <UART_WaitOnFlagUntilTimeout>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d03c      	beq.n	8004070 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffe:	e853 3f00 	ldrex	r3, [r3]
 8004002:	623b      	str	r3, [r7, #32]
   return(result);
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800400a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	461a      	mov	r2, r3
 8004012:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004014:	633b      	str	r3, [r7, #48]	@ 0x30
 8004016:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004018:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800401a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800401c:	e841 2300 	strex	r3, r2, [r1]
 8004020:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1e6      	bne.n	8003ff6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	3308      	adds	r3, #8
 800402e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	e853 3f00 	ldrex	r3, [r3]
 8004036:	60fb      	str	r3, [r7, #12]
   return(result);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f023 0301 	bic.w	r3, r3, #1
 800403e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	3308      	adds	r3, #8
 8004046:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004048:	61fa      	str	r2, [r7, #28]
 800404a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404c:	69b9      	ldr	r1, [r7, #24]
 800404e:	69fa      	ldr	r2, [r7, #28]
 8004050:	e841 2300 	strex	r3, r2, [r1]
 8004054:	617b      	str	r3, [r7, #20]
   return(result);
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1e5      	bne.n	8004028 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2220      	movs	r2, #32
 8004060:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e011      	b.n	8004094 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2220      	movs	r2, #32
 8004074:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2220      	movs	r2, #32
 800407a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3758      	adds	r7, #88	@ 0x58
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	603b      	str	r3, [r7, #0]
 80040a8:	4613      	mov	r3, r2
 80040aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040ac:	e04f      	b.n	800414e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b4:	d04b      	beq.n	800414e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040b6:	f7fd f989 	bl	80013cc <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d302      	bcc.n	80040cc <UART_WaitOnFlagUntilTimeout+0x30>
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e04e      	b.n	800416e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0304 	and.w	r3, r3, #4
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d037      	beq.n	800414e <UART_WaitOnFlagUntilTimeout+0xb2>
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	2b80      	cmp	r3, #128	@ 0x80
 80040e2:	d034      	beq.n	800414e <UART_WaitOnFlagUntilTimeout+0xb2>
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	2b40      	cmp	r3, #64	@ 0x40
 80040e8:	d031      	beq.n	800414e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	69db      	ldr	r3, [r3, #28]
 80040f0:	f003 0308 	and.w	r3, r3, #8
 80040f4:	2b08      	cmp	r3, #8
 80040f6:	d110      	bne.n	800411a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2208      	movs	r2, #8
 80040fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f000 f838 	bl	8004176 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2208      	movs	r2, #8
 800410a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e029      	b.n	800416e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	69db      	ldr	r3, [r3, #28]
 8004120:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004124:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004128:	d111      	bne.n	800414e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004132:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f000 f81e 	bl	8004176 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2220      	movs	r2, #32
 800413e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e00f      	b.n	800416e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	69da      	ldr	r2, [r3, #28]
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	4013      	ands	r3, r2
 8004158:	68ba      	ldr	r2, [r7, #8]
 800415a:	429a      	cmp	r2, r3
 800415c:	bf0c      	ite	eq
 800415e:	2301      	moveq	r3, #1
 8004160:	2300      	movne	r3, #0
 8004162:	b2db      	uxtb	r3, r3
 8004164:	461a      	mov	r2, r3
 8004166:	79fb      	ldrb	r3, [r7, #7]
 8004168:	429a      	cmp	r2, r3
 800416a:	d0a0      	beq.n	80040ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004176:	b480      	push	{r7}
 8004178:	b095      	sub	sp, #84	@ 0x54
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004186:	e853 3f00 	ldrex	r3, [r3]
 800418a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800418c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800418e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004192:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	461a      	mov	r2, r3
 800419a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800419c:	643b      	str	r3, [r7, #64]	@ 0x40
 800419e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80041a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80041a4:	e841 2300 	strex	r3, r2, [r1]
 80041a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80041aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1e6      	bne.n	800417e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	3308      	adds	r3, #8
 80041b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b8:	6a3b      	ldr	r3, [r7, #32]
 80041ba:	e853 3f00 	ldrex	r3, [r3]
 80041be:	61fb      	str	r3, [r7, #28]
   return(result);
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	f023 0301 	bic.w	r3, r3, #1
 80041c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	3308      	adds	r3, #8
 80041ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041d8:	e841 2300 	strex	r3, r2, [r1]
 80041dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80041de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1e5      	bne.n	80041b0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d118      	bne.n	800421e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	e853 3f00 	ldrex	r3, [r3]
 80041f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	f023 0310 	bic.w	r3, r3, #16
 8004200:	647b      	str	r3, [r7, #68]	@ 0x44
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	461a      	mov	r2, r3
 8004208:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800420a:	61bb      	str	r3, [r7, #24]
 800420c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420e:	6979      	ldr	r1, [r7, #20]
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	e841 2300 	strex	r3, r2, [r1]
 8004216:	613b      	str	r3, [r7, #16]
   return(result);
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1e6      	bne.n	80041ec <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2220      	movs	r2, #32
 8004222:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004232:	bf00      	nop
 8004234:	3754      	adds	r7, #84	@ 0x54
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
	...

08004240 <malloc>:
 8004240:	4b02      	ldr	r3, [pc, #8]	@ (800424c <malloc+0xc>)
 8004242:	4601      	mov	r1, r0
 8004244:	6818      	ldr	r0, [r3, #0]
 8004246:	f000 b82d 	b.w	80042a4 <_malloc_r>
 800424a:	bf00      	nop
 800424c:	20000018 	.word	0x20000018

08004250 <free>:
 8004250:	4b02      	ldr	r3, [pc, #8]	@ (800425c <free+0xc>)
 8004252:	4601      	mov	r1, r0
 8004254:	6818      	ldr	r0, [r3, #0]
 8004256:	f000 bb35 	b.w	80048c4 <_free_r>
 800425a:	bf00      	nop
 800425c:	20000018 	.word	0x20000018

08004260 <sbrk_aligned>:
 8004260:	b570      	push	{r4, r5, r6, lr}
 8004262:	4e0f      	ldr	r6, [pc, #60]	@ (80042a0 <sbrk_aligned+0x40>)
 8004264:	460c      	mov	r4, r1
 8004266:	6831      	ldr	r1, [r6, #0]
 8004268:	4605      	mov	r5, r0
 800426a:	b911      	cbnz	r1, 8004272 <sbrk_aligned+0x12>
 800426c:	f000 fada 	bl	8004824 <_sbrk_r>
 8004270:	6030      	str	r0, [r6, #0]
 8004272:	4621      	mov	r1, r4
 8004274:	4628      	mov	r0, r5
 8004276:	f000 fad5 	bl	8004824 <_sbrk_r>
 800427a:	1c43      	adds	r3, r0, #1
 800427c:	d103      	bne.n	8004286 <sbrk_aligned+0x26>
 800427e:	f04f 34ff 	mov.w	r4, #4294967295
 8004282:	4620      	mov	r0, r4
 8004284:	bd70      	pop	{r4, r5, r6, pc}
 8004286:	1cc4      	adds	r4, r0, #3
 8004288:	f024 0403 	bic.w	r4, r4, #3
 800428c:	42a0      	cmp	r0, r4
 800428e:	d0f8      	beq.n	8004282 <sbrk_aligned+0x22>
 8004290:	1a21      	subs	r1, r4, r0
 8004292:	4628      	mov	r0, r5
 8004294:	f000 fac6 	bl	8004824 <_sbrk_r>
 8004298:	3001      	adds	r0, #1
 800429a:	d1f2      	bne.n	8004282 <sbrk_aligned+0x22>
 800429c:	e7ef      	b.n	800427e <sbrk_aligned+0x1e>
 800429e:	bf00      	nop
 80042a0:	20000190 	.word	0x20000190

080042a4 <_malloc_r>:
 80042a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042a8:	1ccd      	adds	r5, r1, #3
 80042aa:	f025 0503 	bic.w	r5, r5, #3
 80042ae:	3508      	adds	r5, #8
 80042b0:	2d0c      	cmp	r5, #12
 80042b2:	bf38      	it	cc
 80042b4:	250c      	movcc	r5, #12
 80042b6:	2d00      	cmp	r5, #0
 80042b8:	4606      	mov	r6, r0
 80042ba:	db01      	blt.n	80042c0 <_malloc_r+0x1c>
 80042bc:	42a9      	cmp	r1, r5
 80042be:	d904      	bls.n	80042ca <_malloc_r+0x26>
 80042c0:	230c      	movs	r3, #12
 80042c2:	6033      	str	r3, [r6, #0]
 80042c4:	2000      	movs	r0, #0
 80042c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80043a0 <_malloc_r+0xfc>
 80042ce:	f000 f869 	bl	80043a4 <__malloc_lock>
 80042d2:	f8d8 3000 	ldr.w	r3, [r8]
 80042d6:	461c      	mov	r4, r3
 80042d8:	bb44      	cbnz	r4, 800432c <_malloc_r+0x88>
 80042da:	4629      	mov	r1, r5
 80042dc:	4630      	mov	r0, r6
 80042de:	f7ff ffbf 	bl	8004260 <sbrk_aligned>
 80042e2:	1c43      	adds	r3, r0, #1
 80042e4:	4604      	mov	r4, r0
 80042e6:	d158      	bne.n	800439a <_malloc_r+0xf6>
 80042e8:	f8d8 4000 	ldr.w	r4, [r8]
 80042ec:	4627      	mov	r7, r4
 80042ee:	2f00      	cmp	r7, #0
 80042f0:	d143      	bne.n	800437a <_malloc_r+0xd6>
 80042f2:	2c00      	cmp	r4, #0
 80042f4:	d04b      	beq.n	800438e <_malloc_r+0xea>
 80042f6:	6823      	ldr	r3, [r4, #0]
 80042f8:	4639      	mov	r1, r7
 80042fa:	4630      	mov	r0, r6
 80042fc:	eb04 0903 	add.w	r9, r4, r3
 8004300:	f000 fa90 	bl	8004824 <_sbrk_r>
 8004304:	4581      	cmp	r9, r0
 8004306:	d142      	bne.n	800438e <_malloc_r+0xea>
 8004308:	6821      	ldr	r1, [r4, #0]
 800430a:	1a6d      	subs	r5, r5, r1
 800430c:	4629      	mov	r1, r5
 800430e:	4630      	mov	r0, r6
 8004310:	f7ff ffa6 	bl	8004260 <sbrk_aligned>
 8004314:	3001      	adds	r0, #1
 8004316:	d03a      	beq.n	800438e <_malloc_r+0xea>
 8004318:	6823      	ldr	r3, [r4, #0]
 800431a:	442b      	add	r3, r5
 800431c:	6023      	str	r3, [r4, #0]
 800431e:	f8d8 3000 	ldr.w	r3, [r8]
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	bb62      	cbnz	r2, 8004380 <_malloc_r+0xdc>
 8004326:	f8c8 7000 	str.w	r7, [r8]
 800432a:	e00f      	b.n	800434c <_malloc_r+0xa8>
 800432c:	6822      	ldr	r2, [r4, #0]
 800432e:	1b52      	subs	r2, r2, r5
 8004330:	d420      	bmi.n	8004374 <_malloc_r+0xd0>
 8004332:	2a0b      	cmp	r2, #11
 8004334:	d917      	bls.n	8004366 <_malloc_r+0xc2>
 8004336:	1961      	adds	r1, r4, r5
 8004338:	42a3      	cmp	r3, r4
 800433a:	6025      	str	r5, [r4, #0]
 800433c:	bf18      	it	ne
 800433e:	6059      	strne	r1, [r3, #4]
 8004340:	6863      	ldr	r3, [r4, #4]
 8004342:	bf08      	it	eq
 8004344:	f8c8 1000 	streq.w	r1, [r8]
 8004348:	5162      	str	r2, [r4, r5]
 800434a:	604b      	str	r3, [r1, #4]
 800434c:	4630      	mov	r0, r6
 800434e:	f000 f82f 	bl	80043b0 <__malloc_unlock>
 8004352:	f104 000b 	add.w	r0, r4, #11
 8004356:	1d23      	adds	r3, r4, #4
 8004358:	f020 0007 	bic.w	r0, r0, #7
 800435c:	1ac2      	subs	r2, r0, r3
 800435e:	bf1c      	itt	ne
 8004360:	1a1b      	subne	r3, r3, r0
 8004362:	50a3      	strne	r3, [r4, r2]
 8004364:	e7af      	b.n	80042c6 <_malloc_r+0x22>
 8004366:	6862      	ldr	r2, [r4, #4]
 8004368:	42a3      	cmp	r3, r4
 800436a:	bf0c      	ite	eq
 800436c:	f8c8 2000 	streq.w	r2, [r8]
 8004370:	605a      	strne	r2, [r3, #4]
 8004372:	e7eb      	b.n	800434c <_malloc_r+0xa8>
 8004374:	4623      	mov	r3, r4
 8004376:	6864      	ldr	r4, [r4, #4]
 8004378:	e7ae      	b.n	80042d8 <_malloc_r+0x34>
 800437a:	463c      	mov	r4, r7
 800437c:	687f      	ldr	r7, [r7, #4]
 800437e:	e7b6      	b.n	80042ee <_malloc_r+0x4a>
 8004380:	461a      	mov	r2, r3
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	42a3      	cmp	r3, r4
 8004386:	d1fb      	bne.n	8004380 <_malloc_r+0xdc>
 8004388:	2300      	movs	r3, #0
 800438a:	6053      	str	r3, [r2, #4]
 800438c:	e7de      	b.n	800434c <_malloc_r+0xa8>
 800438e:	230c      	movs	r3, #12
 8004390:	6033      	str	r3, [r6, #0]
 8004392:	4630      	mov	r0, r6
 8004394:	f000 f80c 	bl	80043b0 <__malloc_unlock>
 8004398:	e794      	b.n	80042c4 <_malloc_r+0x20>
 800439a:	6005      	str	r5, [r0, #0]
 800439c:	e7d6      	b.n	800434c <_malloc_r+0xa8>
 800439e:	bf00      	nop
 80043a0:	20000194 	.word	0x20000194

080043a4 <__malloc_lock>:
 80043a4:	4801      	ldr	r0, [pc, #4]	@ (80043ac <__malloc_lock+0x8>)
 80043a6:	f000 ba8a 	b.w	80048be <__retarget_lock_acquire_recursive>
 80043aa:	bf00      	nop
 80043ac:	200002d8 	.word	0x200002d8

080043b0 <__malloc_unlock>:
 80043b0:	4801      	ldr	r0, [pc, #4]	@ (80043b8 <__malloc_unlock+0x8>)
 80043b2:	f000 ba85 	b.w	80048c0 <__retarget_lock_release_recursive>
 80043b6:	bf00      	nop
 80043b8:	200002d8 	.word	0x200002d8

080043bc <std>:
 80043bc:	2300      	movs	r3, #0
 80043be:	b510      	push	{r4, lr}
 80043c0:	4604      	mov	r4, r0
 80043c2:	e9c0 3300 	strd	r3, r3, [r0]
 80043c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80043ca:	6083      	str	r3, [r0, #8]
 80043cc:	8181      	strh	r1, [r0, #12]
 80043ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80043d0:	81c2      	strh	r2, [r0, #14]
 80043d2:	6183      	str	r3, [r0, #24]
 80043d4:	4619      	mov	r1, r3
 80043d6:	2208      	movs	r2, #8
 80043d8:	305c      	adds	r0, #92	@ 0x5c
 80043da:	f000 f9e7 	bl	80047ac <memset>
 80043de:	4b0d      	ldr	r3, [pc, #52]	@ (8004414 <std+0x58>)
 80043e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80043e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004418 <std+0x5c>)
 80043e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80043e6:	4b0d      	ldr	r3, [pc, #52]	@ (800441c <std+0x60>)
 80043e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80043ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004420 <std+0x64>)
 80043ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80043ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004424 <std+0x68>)
 80043f0:	6224      	str	r4, [r4, #32]
 80043f2:	429c      	cmp	r4, r3
 80043f4:	d006      	beq.n	8004404 <std+0x48>
 80043f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80043fa:	4294      	cmp	r4, r2
 80043fc:	d002      	beq.n	8004404 <std+0x48>
 80043fe:	33d0      	adds	r3, #208	@ 0xd0
 8004400:	429c      	cmp	r4, r3
 8004402:	d105      	bne.n	8004410 <std+0x54>
 8004404:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800440c:	f000 ba56 	b.w	80048bc <__retarget_lock_init_recursive>
 8004410:	bd10      	pop	{r4, pc}
 8004412:	bf00      	nop
 8004414:	080045fd 	.word	0x080045fd
 8004418:	0800461f 	.word	0x0800461f
 800441c:	08004657 	.word	0x08004657
 8004420:	0800467b 	.word	0x0800467b
 8004424:	20000198 	.word	0x20000198

08004428 <stdio_exit_handler>:
 8004428:	4a02      	ldr	r2, [pc, #8]	@ (8004434 <stdio_exit_handler+0xc>)
 800442a:	4903      	ldr	r1, [pc, #12]	@ (8004438 <stdio_exit_handler+0x10>)
 800442c:	4803      	ldr	r0, [pc, #12]	@ (800443c <stdio_exit_handler+0x14>)
 800442e:	f000 b869 	b.w	8004504 <_fwalk_sglue>
 8004432:	bf00      	nop
 8004434:	2000000c 	.word	0x2000000c
 8004438:	08004a61 	.word	0x08004a61
 800443c:	2000001c 	.word	0x2000001c

08004440 <cleanup_stdio>:
 8004440:	6841      	ldr	r1, [r0, #4]
 8004442:	4b0c      	ldr	r3, [pc, #48]	@ (8004474 <cleanup_stdio+0x34>)
 8004444:	4299      	cmp	r1, r3
 8004446:	b510      	push	{r4, lr}
 8004448:	4604      	mov	r4, r0
 800444a:	d001      	beq.n	8004450 <cleanup_stdio+0x10>
 800444c:	f000 fb08 	bl	8004a60 <_fflush_r>
 8004450:	68a1      	ldr	r1, [r4, #8]
 8004452:	4b09      	ldr	r3, [pc, #36]	@ (8004478 <cleanup_stdio+0x38>)
 8004454:	4299      	cmp	r1, r3
 8004456:	d002      	beq.n	800445e <cleanup_stdio+0x1e>
 8004458:	4620      	mov	r0, r4
 800445a:	f000 fb01 	bl	8004a60 <_fflush_r>
 800445e:	68e1      	ldr	r1, [r4, #12]
 8004460:	4b06      	ldr	r3, [pc, #24]	@ (800447c <cleanup_stdio+0x3c>)
 8004462:	4299      	cmp	r1, r3
 8004464:	d004      	beq.n	8004470 <cleanup_stdio+0x30>
 8004466:	4620      	mov	r0, r4
 8004468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800446c:	f000 baf8 	b.w	8004a60 <_fflush_r>
 8004470:	bd10      	pop	{r4, pc}
 8004472:	bf00      	nop
 8004474:	20000198 	.word	0x20000198
 8004478:	20000200 	.word	0x20000200
 800447c:	20000268 	.word	0x20000268

08004480 <global_stdio_init.part.0>:
 8004480:	b510      	push	{r4, lr}
 8004482:	4b0b      	ldr	r3, [pc, #44]	@ (80044b0 <global_stdio_init.part.0+0x30>)
 8004484:	4c0b      	ldr	r4, [pc, #44]	@ (80044b4 <global_stdio_init.part.0+0x34>)
 8004486:	4a0c      	ldr	r2, [pc, #48]	@ (80044b8 <global_stdio_init.part.0+0x38>)
 8004488:	601a      	str	r2, [r3, #0]
 800448a:	4620      	mov	r0, r4
 800448c:	2200      	movs	r2, #0
 800448e:	2104      	movs	r1, #4
 8004490:	f7ff ff94 	bl	80043bc <std>
 8004494:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004498:	2201      	movs	r2, #1
 800449a:	2109      	movs	r1, #9
 800449c:	f7ff ff8e 	bl	80043bc <std>
 80044a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80044a4:	2202      	movs	r2, #2
 80044a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044aa:	2112      	movs	r1, #18
 80044ac:	f7ff bf86 	b.w	80043bc <std>
 80044b0:	200002d0 	.word	0x200002d0
 80044b4:	20000198 	.word	0x20000198
 80044b8:	08004429 	.word	0x08004429

080044bc <__sfp_lock_acquire>:
 80044bc:	4801      	ldr	r0, [pc, #4]	@ (80044c4 <__sfp_lock_acquire+0x8>)
 80044be:	f000 b9fe 	b.w	80048be <__retarget_lock_acquire_recursive>
 80044c2:	bf00      	nop
 80044c4:	200002d9 	.word	0x200002d9

080044c8 <__sfp_lock_release>:
 80044c8:	4801      	ldr	r0, [pc, #4]	@ (80044d0 <__sfp_lock_release+0x8>)
 80044ca:	f000 b9f9 	b.w	80048c0 <__retarget_lock_release_recursive>
 80044ce:	bf00      	nop
 80044d0:	200002d9 	.word	0x200002d9

080044d4 <__sinit>:
 80044d4:	b510      	push	{r4, lr}
 80044d6:	4604      	mov	r4, r0
 80044d8:	f7ff fff0 	bl	80044bc <__sfp_lock_acquire>
 80044dc:	6a23      	ldr	r3, [r4, #32]
 80044de:	b11b      	cbz	r3, 80044e8 <__sinit+0x14>
 80044e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044e4:	f7ff bff0 	b.w	80044c8 <__sfp_lock_release>
 80044e8:	4b04      	ldr	r3, [pc, #16]	@ (80044fc <__sinit+0x28>)
 80044ea:	6223      	str	r3, [r4, #32]
 80044ec:	4b04      	ldr	r3, [pc, #16]	@ (8004500 <__sinit+0x2c>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1f5      	bne.n	80044e0 <__sinit+0xc>
 80044f4:	f7ff ffc4 	bl	8004480 <global_stdio_init.part.0>
 80044f8:	e7f2      	b.n	80044e0 <__sinit+0xc>
 80044fa:	bf00      	nop
 80044fc:	08004441 	.word	0x08004441
 8004500:	200002d0 	.word	0x200002d0

08004504 <_fwalk_sglue>:
 8004504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004508:	4607      	mov	r7, r0
 800450a:	4688      	mov	r8, r1
 800450c:	4614      	mov	r4, r2
 800450e:	2600      	movs	r6, #0
 8004510:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004514:	f1b9 0901 	subs.w	r9, r9, #1
 8004518:	d505      	bpl.n	8004526 <_fwalk_sglue+0x22>
 800451a:	6824      	ldr	r4, [r4, #0]
 800451c:	2c00      	cmp	r4, #0
 800451e:	d1f7      	bne.n	8004510 <_fwalk_sglue+0xc>
 8004520:	4630      	mov	r0, r6
 8004522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004526:	89ab      	ldrh	r3, [r5, #12]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d907      	bls.n	800453c <_fwalk_sglue+0x38>
 800452c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004530:	3301      	adds	r3, #1
 8004532:	d003      	beq.n	800453c <_fwalk_sglue+0x38>
 8004534:	4629      	mov	r1, r5
 8004536:	4638      	mov	r0, r7
 8004538:	47c0      	blx	r8
 800453a:	4306      	orrs	r6, r0
 800453c:	3568      	adds	r5, #104	@ 0x68
 800453e:	e7e9      	b.n	8004514 <_fwalk_sglue+0x10>

08004540 <_puts_r>:
 8004540:	6a03      	ldr	r3, [r0, #32]
 8004542:	b570      	push	{r4, r5, r6, lr}
 8004544:	6884      	ldr	r4, [r0, #8]
 8004546:	4605      	mov	r5, r0
 8004548:	460e      	mov	r6, r1
 800454a:	b90b      	cbnz	r3, 8004550 <_puts_r+0x10>
 800454c:	f7ff ffc2 	bl	80044d4 <__sinit>
 8004550:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004552:	07db      	lsls	r3, r3, #31
 8004554:	d405      	bmi.n	8004562 <_puts_r+0x22>
 8004556:	89a3      	ldrh	r3, [r4, #12]
 8004558:	0598      	lsls	r0, r3, #22
 800455a:	d402      	bmi.n	8004562 <_puts_r+0x22>
 800455c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800455e:	f000 f9ae 	bl	80048be <__retarget_lock_acquire_recursive>
 8004562:	89a3      	ldrh	r3, [r4, #12]
 8004564:	0719      	lsls	r1, r3, #28
 8004566:	d502      	bpl.n	800456e <_puts_r+0x2e>
 8004568:	6923      	ldr	r3, [r4, #16]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d135      	bne.n	80045da <_puts_r+0x9a>
 800456e:	4621      	mov	r1, r4
 8004570:	4628      	mov	r0, r5
 8004572:	f000 f8c5 	bl	8004700 <__swsetup_r>
 8004576:	b380      	cbz	r0, 80045da <_puts_r+0x9a>
 8004578:	f04f 35ff 	mov.w	r5, #4294967295
 800457c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800457e:	07da      	lsls	r2, r3, #31
 8004580:	d405      	bmi.n	800458e <_puts_r+0x4e>
 8004582:	89a3      	ldrh	r3, [r4, #12]
 8004584:	059b      	lsls	r3, r3, #22
 8004586:	d402      	bmi.n	800458e <_puts_r+0x4e>
 8004588:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800458a:	f000 f999 	bl	80048c0 <__retarget_lock_release_recursive>
 800458e:	4628      	mov	r0, r5
 8004590:	bd70      	pop	{r4, r5, r6, pc}
 8004592:	2b00      	cmp	r3, #0
 8004594:	da04      	bge.n	80045a0 <_puts_r+0x60>
 8004596:	69a2      	ldr	r2, [r4, #24]
 8004598:	429a      	cmp	r2, r3
 800459a:	dc17      	bgt.n	80045cc <_puts_r+0x8c>
 800459c:	290a      	cmp	r1, #10
 800459e:	d015      	beq.n	80045cc <_puts_r+0x8c>
 80045a0:	6823      	ldr	r3, [r4, #0]
 80045a2:	1c5a      	adds	r2, r3, #1
 80045a4:	6022      	str	r2, [r4, #0]
 80045a6:	7019      	strb	r1, [r3, #0]
 80045a8:	68a3      	ldr	r3, [r4, #8]
 80045aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80045ae:	3b01      	subs	r3, #1
 80045b0:	60a3      	str	r3, [r4, #8]
 80045b2:	2900      	cmp	r1, #0
 80045b4:	d1ed      	bne.n	8004592 <_puts_r+0x52>
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	da11      	bge.n	80045de <_puts_r+0x9e>
 80045ba:	4622      	mov	r2, r4
 80045bc:	210a      	movs	r1, #10
 80045be:	4628      	mov	r0, r5
 80045c0:	f000 f85f 	bl	8004682 <__swbuf_r>
 80045c4:	3001      	adds	r0, #1
 80045c6:	d0d7      	beq.n	8004578 <_puts_r+0x38>
 80045c8:	250a      	movs	r5, #10
 80045ca:	e7d7      	b.n	800457c <_puts_r+0x3c>
 80045cc:	4622      	mov	r2, r4
 80045ce:	4628      	mov	r0, r5
 80045d0:	f000 f857 	bl	8004682 <__swbuf_r>
 80045d4:	3001      	adds	r0, #1
 80045d6:	d1e7      	bne.n	80045a8 <_puts_r+0x68>
 80045d8:	e7ce      	b.n	8004578 <_puts_r+0x38>
 80045da:	3e01      	subs	r6, #1
 80045dc:	e7e4      	b.n	80045a8 <_puts_r+0x68>
 80045de:	6823      	ldr	r3, [r4, #0]
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	6022      	str	r2, [r4, #0]
 80045e4:	220a      	movs	r2, #10
 80045e6:	701a      	strb	r2, [r3, #0]
 80045e8:	e7ee      	b.n	80045c8 <_puts_r+0x88>
	...

080045ec <puts>:
 80045ec:	4b02      	ldr	r3, [pc, #8]	@ (80045f8 <puts+0xc>)
 80045ee:	4601      	mov	r1, r0
 80045f0:	6818      	ldr	r0, [r3, #0]
 80045f2:	f7ff bfa5 	b.w	8004540 <_puts_r>
 80045f6:	bf00      	nop
 80045f8:	20000018 	.word	0x20000018

080045fc <__sread>:
 80045fc:	b510      	push	{r4, lr}
 80045fe:	460c      	mov	r4, r1
 8004600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004604:	f000 f8fc 	bl	8004800 <_read_r>
 8004608:	2800      	cmp	r0, #0
 800460a:	bfab      	itete	ge
 800460c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800460e:	89a3      	ldrhlt	r3, [r4, #12]
 8004610:	181b      	addge	r3, r3, r0
 8004612:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004616:	bfac      	ite	ge
 8004618:	6563      	strge	r3, [r4, #84]	@ 0x54
 800461a:	81a3      	strhlt	r3, [r4, #12]
 800461c:	bd10      	pop	{r4, pc}

0800461e <__swrite>:
 800461e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004622:	461f      	mov	r7, r3
 8004624:	898b      	ldrh	r3, [r1, #12]
 8004626:	05db      	lsls	r3, r3, #23
 8004628:	4605      	mov	r5, r0
 800462a:	460c      	mov	r4, r1
 800462c:	4616      	mov	r6, r2
 800462e:	d505      	bpl.n	800463c <__swrite+0x1e>
 8004630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004634:	2302      	movs	r3, #2
 8004636:	2200      	movs	r2, #0
 8004638:	f000 f8d0 	bl	80047dc <_lseek_r>
 800463c:	89a3      	ldrh	r3, [r4, #12]
 800463e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004642:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004646:	81a3      	strh	r3, [r4, #12]
 8004648:	4632      	mov	r2, r6
 800464a:	463b      	mov	r3, r7
 800464c:	4628      	mov	r0, r5
 800464e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004652:	f000 b8f7 	b.w	8004844 <_write_r>

08004656 <__sseek>:
 8004656:	b510      	push	{r4, lr}
 8004658:	460c      	mov	r4, r1
 800465a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800465e:	f000 f8bd 	bl	80047dc <_lseek_r>
 8004662:	1c43      	adds	r3, r0, #1
 8004664:	89a3      	ldrh	r3, [r4, #12]
 8004666:	bf15      	itete	ne
 8004668:	6560      	strne	r0, [r4, #84]	@ 0x54
 800466a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800466e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004672:	81a3      	strheq	r3, [r4, #12]
 8004674:	bf18      	it	ne
 8004676:	81a3      	strhne	r3, [r4, #12]
 8004678:	bd10      	pop	{r4, pc}

0800467a <__sclose>:
 800467a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800467e:	f000 b89d 	b.w	80047bc <_close_r>

08004682 <__swbuf_r>:
 8004682:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004684:	460e      	mov	r6, r1
 8004686:	4614      	mov	r4, r2
 8004688:	4605      	mov	r5, r0
 800468a:	b118      	cbz	r0, 8004694 <__swbuf_r+0x12>
 800468c:	6a03      	ldr	r3, [r0, #32]
 800468e:	b90b      	cbnz	r3, 8004694 <__swbuf_r+0x12>
 8004690:	f7ff ff20 	bl	80044d4 <__sinit>
 8004694:	69a3      	ldr	r3, [r4, #24]
 8004696:	60a3      	str	r3, [r4, #8]
 8004698:	89a3      	ldrh	r3, [r4, #12]
 800469a:	071a      	lsls	r2, r3, #28
 800469c:	d501      	bpl.n	80046a2 <__swbuf_r+0x20>
 800469e:	6923      	ldr	r3, [r4, #16]
 80046a0:	b943      	cbnz	r3, 80046b4 <__swbuf_r+0x32>
 80046a2:	4621      	mov	r1, r4
 80046a4:	4628      	mov	r0, r5
 80046a6:	f000 f82b 	bl	8004700 <__swsetup_r>
 80046aa:	b118      	cbz	r0, 80046b4 <__swbuf_r+0x32>
 80046ac:	f04f 37ff 	mov.w	r7, #4294967295
 80046b0:	4638      	mov	r0, r7
 80046b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046b4:	6823      	ldr	r3, [r4, #0]
 80046b6:	6922      	ldr	r2, [r4, #16]
 80046b8:	1a98      	subs	r0, r3, r2
 80046ba:	6963      	ldr	r3, [r4, #20]
 80046bc:	b2f6      	uxtb	r6, r6
 80046be:	4283      	cmp	r3, r0
 80046c0:	4637      	mov	r7, r6
 80046c2:	dc05      	bgt.n	80046d0 <__swbuf_r+0x4e>
 80046c4:	4621      	mov	r1, r4
 80046c6:	4628      	mov	r0, r5
 80046c8:	f000 f9ca 	bl	8004a60 <_fflush_r>
 80046cc:	2800      	cmp	r0, #0
 80046ce:	d1ed      	bne.n	80046ac <__swbuf_r+0x2a>
 80046d0:	68a3      	ldr	r3, [r4, #8]
 80046d2:	3b01      	subs	r3, #1
 80046d4:	60a3      	str	r3, [r4, #8]
 80046d6:	6823      	ldr	r3, [r4, #0]
 80046d8:	1c5a      	adds	r2, r3, #1
 80046da:	6022      	str	r2, [r4, #0]
 80046dc:	701e      	strb	r6, [r3, #0]
 80046de:	6962      	ldr	r2, [r4, #20]
 80046e0:	1c43      	adds	r3, r0, #1
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d004      	beq.n	80046f0 <__swbuf_r+0x6e>
 80046e6:	89a3      	ldrh	r3, [r4, #12]
 80046e8:	07db      	lsls	r3, r3, #31
 80046ea:	d5e1      	bpl.n	80046b0 <__swbuf_r+0x2e>
 80046ec:	2e0a      	cmp	r6, #10
 80046ee:	d1df      	bne.n	80046b0 <__swbuf_r+0x2e>
 80046f0:	4621      	mov	r1, r4
 80046f2:	4628      	mov	r0, r5
 80046f4:	f000 f9b4 	bl	8004a60 <_fflush_r>
 80046f8:	2800      	cmp	r0, #0
 80046fa:	d0d9      	beq.n	80046b0 <__swbuf_r+0x2e>
 80046fc:	e7d6      	b.n	80046ac <__swbuf_r+0x2a>
	...

08004700 <__swsetup_r>:
 8004700:	b538      	push	{r3, r4, r5, lr}
 8004702:	4b29      	ldr	r3, [pc, #164]	@ (80047a8 <__swsetup_r+0xa8>)
 8004704:	4605      	mov	r5, r0
 8004706:	6818      	ldr	r0, [r3, #0]
 8004708:	460c      	mov	r4, r1
 800470a:	b118      	cbz	r0, 8004714 <__swsetup_r+0x14>
 800470c:	6a03      	ldr	r3, [r0, #32]
 800470e:	b90b      	cbnz	r3, 8004714 <__swsetup_r+0x14>
 8004710:	f7ff fee0 	bl	80044d4 <__sinit>
 8004714:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004718:	0719      	lsls	r1, r3, #28
 800471a:	d422      	bmi.n	8004762 <__swsetup_r+0x62>
 800471c:	06da      	lsls	r2, r3, #27
 800471e:	d407      	bmi.n	8004730 <__swsetup_r+0x30>
 8004720:	2209      	movs	r2, #9
 8004722:	602a      	str	r2, [r5, #0]
 8004724:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004728:	81a3      	strh	r3, [r4, #12]
 800472a:	f04f 30ff 	mov.w	r0, #4294967295
 800472e:	e033      	b.n	8004798 <__swsetup_r+0x98>
 8004730:	0758      	lsls	r0, r3, #29
 8004732:	d512      	bpl.n	800475a <__swsetup_r+0x5a>
 8004734:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004736:	b141      	cbz	r1, 800474a <__swsetup_r+0x4a>
 8004738:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800473c:	4299      	cmp	r1, r3
 800473e:	d002      	beq.n	8004746 <__swsetup_r+0x46>
 8004740:	4628      	mov	r0, r5
 8004742:	f000 f8bf 	bl	80048c4 <_free_r>
 8004746:	2300      	movs	r3, #0
 8004748:	6363      	str	r3, [r4, #52]	@ 0x34
 800474a:	89a3      	ldrh	r3, [r4, #12]
 800474c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004750:	81a3      	strh	r3, [r4, #12]
 8004752:	2300      	movs	r3, #0
 8004754:	6063      	str	r3, [r4, #4]
 8004756:	6923      	ldr	r3, [r4, #16]
 8004758:	6023      	str	r3, [r4, #0]
 800475a:	89a3      	ldrh	r3, [r4, #12]
 800475c:	f043 0308 	orr.w	r3, r3, #8
 8004760:	81a3      	strh	r3, [r4, #12]
 8004762:	6923      	ldr	r3, [r4, #16]
 8004764:	b94b      	cbnz	r3, 800477a <__swsetup_r+0x7a>
 8004766:	89a3      	ldrh	r3, [r4, #12]
 8004768:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800476c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004770:	d003      	beq.n	800477a <__swsetup_r+0x7a>
 8004772:	4621      	mov	r1, r4
 8004774:	4628      	mov	r0, r5
 8004776:	f000 f9c1 	bl	8004afc <__smakebuf_r>
 800477a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800477e:	f013 0201 	ands.w	r2, r3, #1
 8004782:	d00a      	beq.n	800479a <__swsetup_r+0x9a>
 8004784:	2200      	movs	r2, #0
 8004786:	60a2      	str	r2, [r4, #8]
 8004788:	6962      	ldr	r2, [r4, #20]
 800478a:	4252      	negs	r2, r2
 800478c:	61a2      	str	r2, [r4, #24]
 800478e:	6922      	ldr	r2, [r4, #16]
 8004790:	b942      	cbnz	r2, 80047a4 <__swsetup_r+0xa4>
 8004792:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004796:	d1c5      	bne.n	8004724 <__swsetup_r+0x24>
 8004798:	bd38      	pop	{r3, r4, r5, pc}
 800479a:	0799      	lsls	r1, r3, #30
 800479c:	bf58      	it	pl
 800479e:	6962      	ldrpl	r2, [r4, #20]
 80047a0:	60a2      	str	r2, [r4, #8]
 80047a2:	e7f4      	b.n	800478e <__swsetup_r+0x8e>
 80047a4:	2000      	movs	r0, #0
 80047a6:	e7f7      	b.n	8004798 <__swsetup_r+0x98>
 80047a8:	20000018 	.word	0x20000018

080047ac <memset>:
 80047ac:	4402      	add	r2, r0
 80047ae:	4603      	mov	r3, r0
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d100      	bne.n	80047b6 <memset+0xa>
 80047b4:	4770      	bx	lr
 80047b6:	f803 1b01 	strb.w	r1, [r3], #1
 80047ba:	e7f9      	b.n	80047b0 <memset+0x4>

080047bc <_close_r>:
 80047bc:	b538      	push	{r3, r4, r5, lr}
 80047be:	4d06      	ldr	r5, [pc, #24]	@ (80047d8 <_close_r+0x1c>)
 80047c0:	2300      	movs	r3, #0
 80047c2:	4604      	mov	r4, r0
 80047c4:	4608      	mov	r0, r1
 80047c6:	602b      	str	r3, [r5, #0]
 80047c8:	f7fc fc5e 	bl	8001088 <_close>
 80047cc:	1c43      	adds	r3, r0, #1
 80047ce:	d102      	bne.n	80047d6 <_close_r+0x1a>
 80047d0:	682b      	ldr	r3, [r5, #0]
 80047d2:	b103      	cbz	r3, 80047d6 <_close_r+0x1a>
 80047d4:	6023      	str	r3, [r4, #0]
 80047d6:	bd38      	pop	{r3, r4, r5, pc}
 80047d8:	200002d4 	.word	0x200002d4

080047dc <_lseek_r>:
 80047dc:	b538      	push	{r3, r4, r5, lr}
 80047de:	4d07      	ldr	r5, [pc, #28]	@ (80047fc <_lseek_r+0x20>)
 80047e0:	4604      	mov	r4, r0
 80047e2:	4608      	mov	r0, r1
 80047e4:	4611      	mov	r1, r2
 80047e6:	2200      	movs	r2, #0
 80047e8:	602a      	str	r2, [r5, #0]
 80047ea:	461a      	mov	r2, r3
 80047ec:	f7fc fc73 	bl	80010d6 <_lseek>
 80047f0:	1c43      	adds	r3, r0, #1
 80047f2:	d102      	bne.n	80047fa <_lseek_r+0x1e>
 80047f4:	682b      	ldr	r3, [r5, #0]
 80047f6:	b103      	cbz	r3, 80047fa <_lseek_r+0x1e>
 80047f8:	6023      	str	r3, [r4, #0]
 80047fa:	bd38      	pop	{r3, r4, r5, pc}
 80047fc:	200002d4 	.word	0x200002d4

08004800 <_read_r>:
 8004800:	b538      	push	{r3, r4, r5, lr}
 8004802:	4d07      	ldr	r5, [pc, #28]	@ (8004820 <_read_r+0x20>)
 8004804:	4604      	mov	r4, r0
 8004806:	4608      	mov	r0, r1
 8004808:	4611      	mov	r1, r2
 800480a:	2200      	movs	r2, #0
 800480c:	602a      	str	r2, [r5, #0]
 800480e:	461a      	mov	r2, r3
 8004810:	f7fc fc1d 	bl	800104e <_read>
 8004814:	1c43      	adds	r3, r0, #1
 8004816:	d102      	bne.n	800481e <_read_r+0x1e>
 8004818:	682b      	ldr	r3, [r5, #0]
 800481a:	b103      	cbz	r3, 800481e <_read_r+0x1e>
 800481c:	6023      	str	r3, [r4, #0]
 800481e:	bd38      	pop	{r3, r4, r5, pc}
 8004820:	200002d4 	.word	0x200002d4

08004824 <_sbrk_r>:
 8004824:	b538      	push	{r3, r4, r5, lr}
 8004826:	4d06      	ldr	r5, [pc, #24]	@ (8004840 <_sbrk_r+0x1c>)
 8004828:	2300      	movs	r3, #0
 800482a:	4604      	mov	r4, r0
 800482c:	4608      	mov	r0, r1
 800482e:	602b      	str	r3, [r5, #0]
 8004830:	f7fc fc5e 	bl	80010f0 <_sbrk>
 8004834:	1c43      	adds	r3, r0, #1
 8004836:	d102      	bne.n	800483e <_sbrk_r+0x1a>
 8004838:	682b      	ldr	r3, [r5, #0]
 800483a:	b103      	cbz	r3, 800483e <_sbrk_r+0x1a>
 800483c:	6023      	str	r3, [r4, #0]
 800483e:	bd38      	pop	{r3, r4, r5, pc}
 8004840:	200002d4 	.word	0x200002d4

08004844 <_write_r>:
 8004844:	b538      	push	{r3, r4, r5, lr}
 8004846:	4d07      	ldr	r5, [pc, #28]	@ (8004864 <_write_r+0x20>)
 8004848:	4604      	mov	r4, r0
 800484a:	4608      	mov	r0, r1
 800484c:	4611      	mov	r1, r2
 800484e:	2200      	movs	r2, #0
 8004850:	602a      	str	r2, [r5, #0]
 8004852:	461a      	mov	r2, r3
 8004854:	f7fc f8c6 	bl	80009e4 <_write>
 8004858:	1c43      	adds	r3, r0, #1
 800485a:	d102      	bne.n	8004862 <_write_r+0x1e>
 800485c:	682b      	ldr	r3, [r5, #0]
 800485e:	b103      	cbz	r3, 8004862 <_write_r+0x1e>
 8004860:	6023      	str	r3, [r4, #0]
 8004862:	bd38      	pop	{r3, r4, r5, pc}
 8004864:	200002d4 	.word	0x200002d4

08004868 <__errno>:
 8004868:	4b01      	ldr	r3, [pc, #4]	@ (8004870 <__errno+0x8>)
 800486a:	6818      	ldr	r0, [r3, #0]
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	20000018 	.word	0x20000018

08004874 <__libc_init_array>:
 8004874:	b570      	push	{r4, r5, r6, lr}
 8004876:	4d0d      	ldr	r5, [pc, #52]	@ (80048ac <__libc_init_array+0x38>)
 8004878:	4c0d      	ldr	r4, [pc, #52]	@ (80048b0 <__libc_init_array+0x3c>)
 800487a:	1b64      	subs	r4, r4, r5
 800487c:	10a4      	asrs	r4, r4, #2
 800487e:	2600      	movs	r6, #0
 8004880:	42a6      	cmp	r6, r4
 8004882:	d109      	bne.n	8004898 <__libc_init_array+0x24>
 8004884:	4d0b      	ldr	r5, [pc, #44]	@ (80048b4 <__libc_init_array+0x40>)
 8004886:	4c0c      	ldr	r4, [pc, #48]	@ (80048b8 <__libc_init_array+0x44>)
 8004888:	f000 f996 	bl	8004bb8 <_init>
 800488c:	1b64      	subs	r4, r4, r5
 800488e:	10a4      	asrs	r4, r4, #2
 8004890:	2600      	movs	r6, #0
 8004892:	42a6      	cmp	r6, r4
 8004894:	d105      	bne.n	80048a2 <__libc_init_array+0x2e>
 8004896:	bd70      	pop	{r4, r5, r6, pc}
 8004898:	f855 3b04 	ldr.w	r3, [r5], #4
 800489c:	4798      	blx	r3
 800489e:	3601      	adds	r6, #1
 80048a0:	e7ee      	b.n	8004880 <__libc_init_array+0xc>
 80048a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80048a6:	4798      	blx	r3
 80048a8:	3601      	adds	r6, #1
 80048aa:	e7f2      	b.n	8004892 <__libc_init_array+0x1e>
 80048ac:	08005c74 	.word	0x08005c74
 80048b0:	08005c74 	.word	0x08005c74
 80048b4:	08005c74 	.word	0x08005c74
 80048b8:	08005c78 	.word	0x08005c78

080048bc <__retarget_lock_init_recursive>:
 80048bc:	4770      	bx	lr

080048be <__retarget_lock_acquire_recursive>:
 80048be:	4770      	bx	lr

080048c0 <__retarget_lock_release_recursive>:
 80048c0:	4770      	bx	lr
	...

080048c4 <_free_r>:
 80048c4:	b538      	push	{r3, r4, r5, lr}
 80048c6:	4605      	mov	r5, r0
 80048c8:	2900      	cmp	r1, #0
 80048ca:	d041      	beq.n	8004950 <_free_r+0x8c>
 80048cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048d0:	1f0c      	subs	r4, r1, #4
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	bfb8      	it	lt
 80048d6:	18e4      	addlt	r4, r4, r3
 80048d8:	f7ff fd64 	bl	80043a4 <__malloc_lock>
 80048dc:	4a1d      	ldr	r2, [pc, #116]	@ (8004954 <_free_r+0x90>)
 80048de:	6813      	ldr	r3, [r2, #0]
 80048e0:	b933      	cbnz	r3, 80048f0 <_free_r+0x2c>
 80048e2:	6063      	str	r3, [r4, #4]
 80048e4:	6014      	str	r4, [r2, #0]
 80048e6:	4628      	mov	r0, r5
 80048e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048ec:	f7ff bd60 	b.w	80043b0 <__malloc_unlock>
 80048f0:	42a3      	cmp	r3, r4
 80048f2:	d908      	bls.n	8004906 <_free_r+0x42>
 80048f4:	6820      	ldr	r0, [r4, #0]
 80048f6:	1821      	adds	r1, r4, r0
 80048f8:	428b      	cmp	r3, r1
 80048fa:	bf01      	itttt	eq
 80048fc:	6819      	ldreq	r1, [r3, #0]
 80048fe:	685b      	ldreq	r3, [r3, #4]
 8004900:	1809      	addeq	r1, r1, r0
 8004902:	6021      	streq	r1, [r4, #0]
 8004904:	e7ed      	b.n	80048e2 <_free_r+0x1e>
 8004906:	461a      	mov	r2, r3
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	b10b      	cbz	r3, 8004910 <_free_r+0x4c>
 800490c:	42a3      	cmp	r3, r4
 800490e:	d9fa      	bls.n	8004906 <_free_r+0x42>
 8004910:	6811      	ldr	r1, [r2, #0]
 8004912:	1850      	adds	r0, r2, r1
 8004914:	42a0      	cmp	r0, r4
 8004916:	d10b      	bne.n	8004930 <_free_r+0x6c>
 8004918:	6820      	ldr	r0, [r4, #0]
 800491a:	4401      	add	r1, r0
 800491c:	1850      	adds	r0, r2, r1
 800491e:	4283      	cmp	r3, r0
 8004920:	6011      	str	r1, [r2, #0]
 8004922:	d1e0      	bne.n	80048e6 <_free_r+0x22>
 8004924:	6818      	ldr	r0, [r3, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	6053      	str	r3, [r2, #4]
 800492a:	4408      	add	r0, r1
 800492c:	6010      	str	r0, [r2, #0]
 800492e:	e7da      	b.n	80048e6 <_free_r+0x22>
 8004930:	d902      	bls.n	8004938 <_free_r+0x74>
 8004932:	230c      	movs	r3, #12
 8004934:	602b      	str	r3, [r5, #0]
 8004936:	e7d6      	b.n	80048e6 <_free_r+0x22>
 8004938:	6820      	ldr	r0, [r4, #0]
 800493a:	1821      	adds	r1, r4, r0
 800493c:	428b      	cmp	r3, r1
 800493e:	bf04      	itt	eq
 8004940:	6819      	ldreq	r1, [r3, #0]
 8004942:	685b      	ldreq	r3, [r3, #4]
 8004944:	6063      	str	r3, [r4, #4]
 8004946:	bf04      	itt	eq
 8004948:	1809      	addeq	r1, r1, r0
 800494a:	6021      	streq	r1, [r4, #0]
 800494c:	6054      	str	r4, [r2, #4]
 800494e:	e7ca      	b.n	80048e6 <_free_r+0x22>
 8004950:	bd38      	pop	{r3, r4, r5, pc}
 8004952:	bf00      	nop
 8004954:	20000194 	.word	0x20000194

08004958 <__sflush_r>:
 8004958:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800495c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004960:	0716      	lsls	r6, r2, #28
 8004962:	4605      	mov	r5, r0
 8004964:	460c      	mov	r4, r1
 8004966:	d454      	bmi.n	8004a12 <__sflush_r+0xba>
 8004968:	684b      	ldr	r3, [r1, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	dc02      	bgt.n	8004974 <__sflush_r+0x1c>
 800496e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004970:	2b00      	cmp	r3, #0
 8004972:	dd48      	ble.n	8004a06 <__sflush_r+0xae>
 8004974:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004976:	2e00      	cmp	r6, #0
 8004978:	d045      	beq.n	8004a06 <__sflush_r+0xae>
 800497a:	2300      	movs	r3, #0
 800497c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004980:	682f      	ldr	r7, [r5, #0]
 8004982:	6a21      	ldr	r1, [r4, #32]
 8004984:	602b      	str	r3, [r5, #0]
 8004986:	d030      	beq.n	80049ea <__sflush_r+0x92>
 8004988:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800498a:	89a3      	ldrh	r3, [r4, #12]
 800498c:	0759      	lsls	r1, r3, #29
 800498e:	d505      	bpl.n	800499c <__sflush_r+0x44>
 8004990:	6863      	ldr	r3, [r4, #4]
 8004992:	1ad2      	subs	r2, r2, r3
 8004994:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004996:	b10b      	cbz	r3, 800499c <__sflush_r+0x44>
 8004998:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800499a:	1ad2      	subs	r2, r2, r3
 800499c:	2300      	movs	r3, #0
 800499e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80049a0:	6a21      	ldr	r1, [r4, #32]
 80049a2:	4628      	mov	r0, r5
 80049a4:	47b0      	blx	r6
 80049a6:	1c43      	adds	r3, r0, #1
 80049a8:	89a3      	ldrh	r3, [r4, #12]
 80049aa:	d106      	bne.n	80049ba <__sflush_r+0x62>
 80049ac:	6829      	ldr	r1, [r5, #0]
 80049ae:	291d      	cmp	r1, #29
 80049b0:	d82b      	bhi.n	8004a0a <__sflush_r+0xb2>
 80049b2:	4a2a      	ldr	r2, [pc, #168]	@ (8004a5c <__sflush_r+0x104>)
 80049b4:	410a      	asrs	r2, r1
 80049b6:	07d6      	lsls	r6, r2, #31
 80049b8:	d427      	bmi.n	8004a0a <__sflush_r+0xb2>
 80049ba:	2200      	movs	r2, #0
 80049bc:	6062      	str	r2, [r4, #4]
 80049be:	04d9      	lsls	r1, r3, #19
 80049c0:	6922      	ldr	r2, [r4, #16]
 80049c2:	6022      	str	r2, [r4, #0]
 80049c4:	d504      	bpl.n	80049d0 <__sflush_r+0x78>
 80049c6:	1c42      	adds	r2, r0, #1
 80049c8:	d101      	bne.n	80049ce <__sflush_r+0x76>
 80049ca:	682b      	ldr	r3, [r5, #0]
 80049cc:	b903      	cbnz	r3, 80049d0 <__sflush_r+0x78>
 80049ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80049d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80049d2:	602f      	str	r7, [r5, #0]
 80049d4:	b1b9      	cbz	r1, 8004a06 <__sflush_r+0xae>
 80049d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80049da:	4299      	cmp	r1, r3
 80049dc:	d002      	beq.n	80049e4 <__sflush_r+0x8c>
 80049de:	4628      	mov	r0, r5
 80049e0:	f7ff ff70 	bl	80048c4 <_free_r>
 80049e4:	2300      	movs	r3, #0
 80049e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80049e8:	e00d      	b.n	8004a06 <__sflush_r+0xae>
 80049ea:	2301      	movs	r3, #1
 80049ec:	4628      	mov	r0, r5
 80049ee:	47b0      	blx	r6
 80049f0:	4602      	mov	r2, r0
 80049f2:	1c50      	adds	r0, r2, #1
 80049f4:	d1c9      	bne.n	800498a <__sflush_r+0x32>
 80049f6:	682b      	ldr	r3, [r5, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d0c6      	beq.n	800498a <__sflush_r+0x32>
 80049fc:	2b1d      	cmp	r3, #29
 80049fe:	d001      	beq.n	8004a04 <__sflush_r+0xac>
 8004a00:	2b16      	cmp	r3, #22
 8004a02:	d11e      	bne.n	8004a42 <__sflush_r+0xea>
 8004a04:	602f      	str	r7, [r5, #0]
 8004a06:	2000      	movs	r0, #0
 8004a08:	e022      	b.n	8004a50 <__sflush_r+0xf8>
 8004a0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a0e:	b21b      	sxth	r3, r3
 8004a10:	e01b      	b.n	8004a4a <__sflush_r+0xf2>
 8004a12:	690f      	ldr	r7, [r1, #16]
 8004a14:	2f00      	cmp	r7, #0
 8004a16:	d0f6      	beq.n	8004a06 <__sflush_r+0xae>
 8004a18:	0793      	lsls	r3, r2, #30
 8004a1a:	680e      	ldr	r6, [r1, #0]
 8004a1c:	bf08      	it	eq
 8004a1e:	694b      	ldreq	r3, [r1, #20]
 8004a20:	600f      	str	r7, [r1, #0]
 8004a22:	bf18      	it	ne
 8004a24:	2300      	movne	r3, #0
 8004a26:	eba6 0807 	sub.w	r8, r6, r7
 8004a2a:	608b      	str	r3, [r1, #8]
 8004a2c:	f1b8 0f00 	cmp.w	r8, #0
 8004a30:	dde9      	ble.n	8004a06 <__sflush_r+0xae>
 8004a32:	6a21      	ldr	r1, [r4, #32]
 8004a34:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004a36:	4643      	mov	r3, r8
 8004a38:	463a      	mov	r2, r7
 8004a3a:	4628      	mov	r0, r5
 8004a3c:	47b0      	blx	r6
 8004a3e:	2800      	cmp	r0, #0
 8004a40:	dc08      	bgt.n	8004a54 <__sflush_r+0xfc>
 8004a42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a4a:	81a3      	strh	r3, [r4, #12]
 8004a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a54:	4407      	add	r7, r0
 8004a56:	eba8 0800 	sub.w	r8, r8, r0
 8004a5a:	e7e7      	b.n	8004a2c <__sflush_r+0xd4>
 8004a5c:	dfbffffe 	.word	0xdfbffffe

08004a60 <_fflush_r>:
 8004a60:	b538      	push	{r3, r4, r5, lr}
 8004a62:	690b      	ldr	r3, [r1, #16]
 8004a64:	4605      	mov	r5, r0
 8004a66:	460c      	mov	r4, r1
 8004a68:	b913      	cbnz	r3, 8004a70 <_fflush_r+0x10>
 8004a6a:	2500      	movs	r5, #0
 8004a6c:	4628      	mov	r0, r5
 8004a6e:	bd38      	pop	{r3, r4, r5, pc}
 8004a70:	b118      	cbz	r0, 8004a7a <_fflush_r+0x1a>
 8004a72:	6a03      	ldr	r3, [r0, #32]
 8004a74:	b90b      	cbnz	r3, 8004a7a <_fflush_r+0x1a>
 8004a76:	f7ff fd2d 	bl	80044d4 <__sinit>
 8004a7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d0f3      	beq.n	8004a6a <_fflush_r+0xa>
 8004a82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004a84:	07d0      	lsls	r0, r2, #31
 8004a86:	d404      	bmi.n	8004a92 <_fflush_r+0x32>
 8004a88:	0599      	lsls	r1, r3, #22
 8004a8a:	d402      	bmi.n	8004a92 <_fflush_r+0x32>
 8004a8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a8e:	f7ff ff16 	bl	80048be <__retarget_lock_acquire_recursive>
 8004a92:	4628      	mov	r0, r5
 8004a94:	4621      	mov	r1, r4
 8004a96:	f7ff ff5f 	bl	8004958 <__sflush_r>
 8004a9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a9c:	07da      	lsls	r2, r3, #31
 8004a9e:	4605      	mov	r5, r0
 8004aa0:	d4e4      	bmi.n	8004a6c <_fflush_r+0xc>
 8004aa2:	89a3      	ldrh	r3, [r4, #12]
 8004aa4:	059b      	lsls	r3, r3, #22
 8004aa6:	d4e1      	bmi.n	8004a6c <_fflush_r+0xc>
 8004aa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004aaa:	f7ff ff09 	bl	80048c0 <__retarget_lock_release_recursive>
 8004aae:	e7dd      	b.n	8004a6c <_fflush_r+0xc>

08004ab0 <__swhatbuf_r>:
 8004ab0:	b570      	push	{r4, r5, r6, lr}
 8004ab2:	460c      	mov	r4, r1
 8004ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ab8:	2900      	cmp	r1, #0
 8004aba:	b096      	sub	sp, #88	@ 0x58
 8004abc:	4615      	mov	r5, r2
 8004abe:	461e      	mov	r6, r3
 8004ac0:	da0d      	bge.n	8004ade <__swhatbuf_r+0x2e>
 8004ac2:	89a3      	ldrh	r3, [r4, #12]
 8004ac4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004ac8:	f04f 0100 	mov.w	r1, #0
 8004acc:	bf14      	ite	ne
 8004ace:	2340      	movne	r3, #64	@ 0x40
 8004ad0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004ad4:	2000      	movs	r0, #0
 8004ad6:	6031      	str	r1, [r6, #0]
 8004ad8:	602b      	str	r3, [r5, #0]
 8004ada:	b016      	add	sp, #88	@ 0x58
 8004adc:	bd70      	pop	{r4, r5, r6, pc}
 8004ade:	466a      	mov	r2, sp
 8004ae0:	f000 f848 	bl	8004b74 <_fstat_r>
 8004ae4:	2800      	cmp	r0, #0
 8004ae6:	dbec      	blt.n	8004ac2 <__swhatbuf_r+0x12>
 8004ae8:	9901      	ldr	r1, [sp, #4]
 8004aea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004aee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004af2:	4259      	negs	r1, r3
 8004af4:	4159      	adcs	r1, r3
 8004af6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004afa:	e7eb      	b.n	8004ad4 <__swhatbuf_r+0x24>

08004afc <__smakebuf_r>:
 8004afc:	898b      	ldrh	r3, [r1, #12]
 8004afe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b00:	079d      	lsls	r5, r3, #30
 8004b02:	4606      	mov	r6, r0
 8004b04:	460c      	mov	r4, r1
 8004b06:	d507      	bpl.n	8004b18 <__smakebuf_r+0x1c>
 8004b08:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004b0c:	6023      	str	r3, [r4, #0]
 8004b0e:	6123      	str	r3, [r4, #16]
 8004b10:	2301      	movs	r3, #1
 8004b12:	6163      	str	r3, [r4, #20]
 8004b14:	b003      	add	sp, #12
 8004b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b18:	ab01      	add	r3, sp, #4
 8004b1a:	466a      	mov	r2, sp
 8004b1c:	f7ff ffc8 	bl	8004ab0 <__swhatbuf_r>
 8004b20:	9f00      	ldr	r7, [sp, #0]
 8004b22:	4605      	mov	r5, r0
 8004b24:	4639      	mov	r1, r7
 8004b26:	4630      	mov	r0, r6
 8004b28:	f7ff fbbc 	bl	80042a4 <_malloc_r>
 8004b2c:	b948      	cbnz	r0, 8004b42 <__smakebuf_r+0x46>
 8004b2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b32:	059a      	lsls	r2, r3, #22
 8004b34:	d4ee      	bmi.n	8004b14 <__smakebuf_r+0x18>
 8004b36:	f023 0303 	bic.w	r3, r3, #3
 8004b3a:	f043 0302 	orr.w	r3, r3, #2
 8004b3e:	81a3      	strh	r3, [r4, #12]
 8004b40:	e7e2      	b.n	8004b08 <__smakebuf_r+0xc>
 8004b42:	89a3      	ldrh	r3, [r4, #12]
 8004b44:	6020      	str	r0, [r4, #0]
 8004b46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b4a:	81a3      	strh	r3, [r4, #12]
 8004b4c:	9b01      	ldr	r3, [sp, #4]
 8004b4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004b52:	b15b      	cbz	r3, 8004b6c <__smakebuf_r+0x70>
 8004b54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b58:	4630      	mov	r0, r6
 8004b5a:	f000 f81d 	bl	8004b98 <_isatty_r>
 8004b5e:	b128      	cbz	r0, 8004b6c <__smakebuf_r+0x70>
 8004b60:	89a3      	ldrh	r3, [r4, #12]
 8004b62:	f023 0303 	bic.w	r3, r3, #3
 8004b66:	f043 0301 	orr.w	r3, r3, #1
 8004b6a:	81a3      	strh	r3, [r4, #12]
 8004b6c:	89a3      	ldrh	r3, [r4, #12]
 8004b6e:	431d      	orrs	r5, r3
 8004b70:	81a5      	strh	r5, [r4, #12]
 8004b72:	e7cf      	b.n	8004b14 <__smakebuf_r+0x18>

08004b74 <_fstat_r>:
 8004b74:	b538      	push	{r3, r4, r5, lr}
 8004b76:	4d07      	ldr	r5, [pc, #28]	@ (8004b94 <_fstat_r+0x20>)
 8004b78:	2300      	movs	r3, #0
 8004b7a:	4604      	mov	r4, r0
 8004b7c:	4608      	mov	r0, r1
 8004b7e:	4611      	mov	r1, r2
 8004b80:	602b      	str	r3, [r5, #0]
 8004b82:	f7fc fa8d 	bl	80010a0 <_fstat>
 8004b86:	1c43      	adds	r3, r0, #1
 8004b88:	d102      	bne.n	8004b90 <_fstat_r+0x1c>
 8004b8a:	682b      	ldr	r3, [r5, #0]
 8004b8c:	b103      	cbz	r3, 8004b90 <_fstat_r+0x1c>
 8004b8e:	6023      	str	r3, [r4, #0]
 8004b90:	bd38      	pop	{r3, r4, r5, pc}
 8004b92:	bf00      	nop
 8004b94:	200002d4 	.word	0x200002d4

08004b98 <_isatty_r>:
 8004b98:	b538      	push	{r3, r4, r5, lr}
 8004b9a:	4d06      	ldr	r5, [pc, #24]	@ (8004bb4 <_isatty_r+0x1c>)
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	4604      	mov	r4, r0
 8004ba0:	4608      	mov	r0, r1
 8004ba2:	602b      	str	r3, [r5, #0]
 8004ba4:	f7fc fa8c 	bl	80010c0 <_isatty>
 8004ba8:	1c43      	adds	r3, r0, #1
 8004baa:	d102      	bne.n	8004bb2 <_isatty_r+0x1a>
 8004bac:	682b      	ldr	r3, [r5, #0]
 8004bae:	b103      	cbz	r3, 8004bb2 <_isatty_r+0x1a>
 8004bb0:	6023      	str	r3, [r4, #0]
 8004bb2:	bd38      	pop	{r3, r4, r5, pc}
 8004bb4:	200002d4 	.word	0x200002d4

08004bb8 <_init>:
 8004bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bba:	bf00      	nop
 8004bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bbe:	bc08      	pop	{r3}
 8004bc0:	469e      	mov	lr, r3
 8004bc2:	4770      	bx	lr

08004bc4 <_fini>:
 8004bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bc6:	bf00      	nop
 8004bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bca:	bc08      	pop	{r3}
 8004bcc:	469e      	mov	lr, r3
 8004bce:	4770      	bx	lr
